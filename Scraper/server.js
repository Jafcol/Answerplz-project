/*Wrapper for reddit API*/
const snoowrap = require('snoowrap');
/*Puppeteer packages for undetected scraping*/
const puppeteerProxy = require('puppeteer-proxy');
const RecaptchaPlugin = require('puppeteer-extra-plugin-recaptcha');
const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
/*Mongodb object modeling tool*/
const mongoose = require('mongoose');
const mongooseToCsv = require('mongoose-to-csv');
/*Packages for writing and reading files*/
const JFile = require('jfile');
const fs = require('fs');
/*Simple httprequest package with proxy support*/
const fetch = require('node-fetch');
const HttpsProxyAgent = require('https-proxy-agent');
const express = require('express');
const bodyParser = require('body-parser');
/*For queueing puppeteer tasks*/
const {default: PQueue} = require('p-queue');
const app = express();
/*User and password for proxy authentication. I use webshare service*/
const proxyUser = 'USERNAME';
const proxyPassword = 'PASSWORD';
const PORT = 5000;
const HOST = '0.0.0.0';
const basePath = process.cwd();
const authProxy = proxyUser + ':' + proxyPassword;
/*Chrome extension to avoid cookie consent popup*/
const cookieIgnorePath = basePath + '/extensions/cookieconsent';
/*Url for stack API*/
const hostBase = 'https://api.stackexchange.com';
/*Topics*/
const base1 = 'english';
const base2 = 'medicalsciences';
const base3 = 'travel';
const base4 = 'cooking';
const base5 = 'gaming';
const base6 = 'movies';
const base7 = 'music';
const base8 = 'scifi';
const base9 = 'pets';
const base10 = 'technology';
const base11 = 'ask';
const base12 = 'askdark';
const base13 = 'literature';
const base14 = 'history';
const base15 = 'sports';
const base16 = 'finance';
const base17 = 'philosophy';
const base18 = 'mythology';
/*Subreddits scraped*/
const subReddit18 = 'mythology';
const subReddit17 = 'askphilosophy';
const subReddit16a = 'FinancialPlanning';
const subReddit16b = 'CryptoCurrency';
const subReddit16c = 'investing';
const subReddit16d = 'financialindependence';
const subReddit16e = 'povertyfinance';
const subReddit16f = 'personalfinance';
const subReddit15 = 'AskSports';
const subReddit13a = 'books';
const subReddit13b = 'comicbooks';
const subReddit13c = 'AskComicbooks';
const subReddit14 = 'AskHistorians';
const subReddit12 = 'sex';
const subReddit11a = 'AskReddit';
const subReddit11b = 'answers';
const subReddit10 = 'AskTechnology';
const subReddit9 = 'AskVet';
const subReddit8 = 'AskScienceFiction';
const subReddit7 = 'askmusic';
const subReddit6a = 'askmovie';
const subReddit6b = 'movies';
const subReddit5 = 'AskGames';
const subReddit4 = 'AskCulinary';
const subReddit3 = 'travel';
const subReddit2 = 'AskDocs';
const subReddit1 = 'asklinguistics';
/*Stack sites scraped*/
const site1 = base1;
const site2a = base2;
const site2b = 'fitness';
const site3a = base3;
const site3b = 'outdoors';
const site4a = base4;
const site4b = 'coffee';
const site5 = base5;
const site6 = base6;
const site7 = 'musicfans';
const site8a = base8;
const site8b = 'worldbuilding';
const site9 = base9;
const site11 = 'lifehacks';
const site13a = base13;
const site13b = 'anime';
const site14 = base14;
const site15 = base15;
const site17 = base17;
const site18 = base18;
/*Fluther urls*/
const fluther1 = 'https://www.fluther.com/topics/language/';
const fluther2 = 'https://www.fluther.com/topics/health/';
const fluther3 = 'https://www.fluther.com/topics/travel/';
const fluther4 = 'https://www.fluther.com/topics/food/';
const fluther6 = 'https://www.fluther.com/topics/movies/';
const fluther7 = 'https://www.fluther.com/topics/music/';
const fluther8 = 'https://www.fluther.com/topics/science_fiction/';
const fluther9 = 'https://www.fluther.com/topics/pets/';
const fluther10 = 'https://www.fluther.com/topics/technology/';
const fluther12 = 'https://www.fluther.com/topics/sex/';
const fluther13 = 'https://www.fluther.com/topics/books/';
const fluther14 = 'https://www.fluther.com/topics/history/';
const fluther15 = 'https://www.fluther.com/topics/sports/';
const fluther16 = 'https://www.fluther.com/topics/finance/';
const fluther17 = 'https://www.fluther.com/topics/philosophy/';
/*Answers.com urls*/
const answerscom1 = 'https://www.answers.com/t/word-games';
const answerscom2 = 'https://www.answers.com/t/health';
const answerscom3 = 'https://www.answers.com/t/travel-and-places';
const answerscom4 = 'https://www.answers.com/t/food-and-cooking';
const answerscom5 = 'https://www.answers.com/t/video-games';
const answerscom6 = 'https://www.answers.com/t/movies';
const answerscom7 = 'https://www.answers.com/t/music';
const answerscom8 = 'https://www.answers.com/t/science-fiction';
const answerscom10 = 'https://www.answers.com/t/technology';
const answerscom11a = 'https://www.answers.com/t/Uncategorized/best?page=1';
const answerscom11b = 'https://www.answers.com/t/Uncategorized/best?page=2';
const answerscom11c = 'https://www.answers.com/t/Uncategorized/best?page=3';
const answerscom11d = 'https://www.answers.com/t/Uncategorized/best?page=4';
const answerscom11e = 'https://www.answers.com/t/Uncategorized/best?page=5';
const answerscom11f = 'https://www.answers.com/t/Uncategorized/best?page=6';
const answerscom11g = 'https://www.answers.com/t/Uncategorized/best?page=7';
const answerscom11h = 'https://www.answers.com/t/Uncategorized/best?page=8';
const answerscom11i = 'https://www.answers.com/t/Uncategorized/best?page=9';
const answerscom11l = 'https://www.answers.com/t/Uncategorized/best?page=10';
const answerscom11m = 'https://www.answers.com/t/Uncategorized/best?page=11';
const answerscom11n = 'https://www.answers.com/t/Uncategorized/best?page=12';
const answerscom11o = 'https://www.answers.com/t/Uncategorized/best?page=13';
const answerscom11p = 'https://www.answers.com/t/Uncategorized/best?page=14';
const answerscom11q = 'https://www.answers.com/t/Uncategorized/best?page=15';
const answerscom11r = 'https://www.answers.com/t/Uncategorized/best?page=16';
const answerscom11s = 'https://www.answers.com/t/Uncategorized/best?page=17';
const answerscom11t = 'https://www.answers.com/t/Uncategorized/best?page=18';
const answerscom11u = 'https://www.answers.com/t/Uncategorized/best?page=19';
const answerscom11v = 'https://www.answers.com/t/Uncategorized/best?page=20';
const answerscom11z = 'https://www.answers.com/t/Uncategorized/best?page=21';
const answerscom11aa = 'https://www.answers.com/t/Uncategorized/best?page=22';
const answerscom11bb = 'https://www.answers.com/t/Uncategorized/best?page=23';
const answerscom11cc = 'https://www.answers.com/t/Uncategorized/best?page=24';
const answerscom11dd = 'https://www.answers.com/t/Uncategorized/best?page=25';
const answerscom11ee = 'https://www.answers.com/t/Uncategorized/best?page=26';
const answerscom11ff = 'https://www.answers.com/t/Uncategorized/best?page=27';
const answerscom11gg = 'https://www.answers.com/t/Uncategorized/best?page=28';
const answerscom11hh = 'https://www.answers.com/t/Uncategorized/best?page=29';
const answerscom11ii = 'https://www.answers.com/t/Uncategorized/best?page=30';
const answerscom11ll = 'https://www.answers.com/t/Uncategorized/best?page=31';
const answerscom11mm = 'https://www.answers.com/t/Uncategorized/best?page=32';
const answerscom11nn = 'https://www.answers.com/t/Uncategorized/best?page=33';
const answerscom11oo = 'https://www.answers.com/t/Uncategorized/best?page=34';
const answerscom11pp = 'https://www.answers.com/t/Uncategorized/best?page=35';
const answerscom11qq = 'https://www.answers.com/t/Uncategorized/best?page=36';
const answerscom11rr = 'https://www.answers.com/t/Uncategorized/best?page=37';
const answerscom11ss = 'https://www.answers.com/t/Uncategorized/best?page=38';
const answerscom11tt = 'https://www.answers.com/t/Uncategorized/best?page=39';
const answerscom11uu = 'https://www.answers.com/t/Uncategorized/best?page=40';
const answerscom12 = 'https://www.answers.com/t/relationships';
const answerscom13a = 'https://www.answers.com/t/books-and-literature';
const answerscom13b = 'https://www.answers.com/t/comics';
const answerscom14 = 'https://www.answers.com/t/history';
const answerscom15 = 'https://www.answers.com/t/sports';
const answerscom16 = 'https://www.answers.com/t/business-and-finance';
const answerscom18 = 'https://www.answers.com/t/mythology';
/*CSS selectors*/
const answerscomSingleQuestion = 'h1[property="name"]';
const answersComLink = 'h1[property="name"] > a';
const answersComBoxLinks = 'div.w-full.q-list-injectable-container > div';
const answersComBoxSingleAnswer = 'div[property="content"]';
const answerscomBoxAnswer = 'div[property="acceptedAnswer"]';
const answersComAnswers = 'div[property="content"]';
const answersComNext = 'div.flex.w-full.justify-between > a:nth-child(2)';
const flutherSingleQuestion = '#question > h1';
const flutherBoxComments = '#quiplist > div';
const flutherComments = 'div.message';
const flutherCommentPoints = 'span.qspan.great-answer > span.score';
const flutherBoxLinks = 'ul.disc-list > li';
const flutherLink = 'h4 > a';
const flutherQuestion = 'h4 > a';
const flutherNumberComments = 'span';
/*Q&A max length*/
const lengthAnswer = 600;
const lengthQuestion = 120;
/*Max limits per topic*/
const limitforItems1 = 900;
const limitforItems2 = 900;
const limitforItems2Stack = 450;
const limitforItems3 = 900;
const limitforItems3Stack = 450;
const limitforItems4 = 900;
const limitforItems4Stack = 450;
const limitforItems5 = 1200;
const limitforItems6 = 900;
const limitforItems6Reddit = 450;
const limitforItems7 = 900;
const limitforItems8 = 900;
const limitforItems8Stack = 450;
const limitforItems9 = 1200;
const limitforItems10 = 1200;
const limitforItems11 = 1200;
const limitforItems11Reddit = 600;
const limitforItems11Answers = 30;
const limitforItems12 = 1200;
const limitforItems13 = 900;
const limitforItems13Reddit = 300;
const limitforItems13Stack = 450;
const limitforItems13Answers = 450;
const limitforItems14 = 900;
const limitforItems15 = 900;
const limitforItems16 = 1200;
const limitforItems16Reddit = 200;
const limitforItems17 = 1200;
const limitforItems18 = 1200;
const queue = new PQueue({concurrency: 1});
/*List of cleaning text regex*/
const regSquare = new RegExp(/\[/, 'g');
const regSquare2 = new RegExp(/\]/, 'g');
const regTagsReddit2 = new RegExp(/\(.*?\)/, 'gi');
const regTagsCode = new RegExp(/<code>.*?<\/code>/, 'gi');
const regTagsReddit = new RegExp(/ *\[[^\]]*]/, 'gi');
const regTags = new RegExp(/(<([^>]+)>)/, 'gi');
const regApex = new RegExp(/(&#39;|&apos;)/, 'g');
const regApex2 = new RegExp(/'/, 'g');
const reg1 = new RegExp(/(\r\n|\n|\r)/, 'gi');
const reg2 = new RegExp(/(&quot;|&#x27;|&#x2F;|&#8209;|&nbsp;|&#160;|&#34;|&cent;|&#162;|&pound;|&#163;|&yen;|&#165;|&euro;|&#8364;|&copy;|&#169;|&reg;|&#174;)/, 'g');
const reg3 = new RegExp(/[\/\\()_$~%'"*!#{}]-/, 'g');
const reg3movienoapex = new RegExp(/[\/\\()_$~%'*!#{}]-/, 'g');
const reg31 = new RegExp('=>', 'g');
const reg32 = new RegExp(':', 'g');
const reg4 = new RegExp('><', 'g');
const regMore5 = new RegExp(/>+/, 'g');
const regLess6 = new RegExp(/<+/, 'g');
const regLessThan7 = new RegExp(/(&lt;|<|&#60;)/, 'g');
const regMoreThan8 = new RegExp(/(&gt;|>|&#62;)/, 'g');
const regPlus9 = new RegExp(/\+/, 'g');
const regUnicode = new RegExp(/&(.*?)[\s]/, 'g');
const regAnd10 = new RegExp('&amp;', 'g');
const regAnd11 = new RegExp('&', 'g');
const reglast = new RegExp(/[^A-Za-z0-9\s.,!?]/, 'g');
const reglastReddit = new RegExp(/[^A-Za-z0-9\s.,!"?]/, 'g');
const reglastReddit2 = new RegExp(/[^A-Za-z0-9\s.,!\[\]?]/, 'g');
const regApexReddit = new RegExp(/"+/, 'g');
const reglastDot = new RegExp(/\.+/, 'g');
const reglastQuest = new RegExp(/\?+/, 'g');
const reglastVirg = new RegExp(/,+/, 'g');
const reglastExclam = new RegExp(/!+/, 'g');
const reglastmeasureAM = new RegExp('i m ', 'gi');
const reglastmeasureAM2 = new RegExp('i  m ', 'gi');
const reglastmeasureAM3 = new RegExp('i   m ', 'gi');
const reg12 = new RegExp(/\s\s+/, 'g');

const reglastmeasuregramsgm1 = new RegExp('1gm ', 'gi');
const reglastmeasuregramsgm2 = new RegExp('2gm ', 'gi');
const reglastmeasuregramsgm3 = new RegExp('3gm ', 'gi');
const reglastmeasuregramsgm4 = new RegExp('4gm ', 'gi');
const reglastmeasuregramsgm5 = new RegExp('5gm ', 'gi');
const reglastmeasuregramsgm6 = new RegExp('6gm ', 'gi');
const reglastmeasuregramsgm7 = new RegExp('7gm ', 'gi');
const reglastmeasuregramsgm8 = new RegExp('8gm ', 'gi');
const reglastmeasuregramsgm9 = new RegExp('9gm ', 'gi');
const reglastmeasuregramsgm0 = new RegExp('0gm ', 'gi');
const reglastmeasuregramsgm1point = new RegExp('1gm\\.', 'gi');
const reglastmeasuregramsgm2point = new RegExp('2gm\\.', 'gi');
const reglastmeasuregramsgm3point = new RegExp('3gm\\.', 'gi');
const reglastmeasuregramsgm4point = new RegExp('4gm\\.', 'gi');
const reglastmeasuregramsgm5point = new RegExp('5gm\\.', 'gi');
const reglastmeasuregramsgm6point = new RegExp('6gm\\.', 'gi');
const reglastmeasuregramsgm7point = new RegExp('7gm\\.', 'gi');
const reglastmeasuregramsgm8point = new RegExp('8gm\\.', 'gi');
const reglastmeasuregramsgm9point = new RegExp('9gm\\.', 'gi');
const reglastmeasuregramsgm0point = new RegExp('0gm\\.', 'gi');
const reglastmeasuregramsgm1virgola = new RegExp('1gm,', 'gi');
const reglastmeasuregramsgm2virgola = new RegExp('2gm,', 'gi');
const reglastmeasuregramsgm3virgola = new RegExp('3gm,', 'gi');
const reglastmeasuregramsgm4virgola = new RegExp('4gm,', 'gi');
const reglastmeasuregramsgm5virgola = new RegExp('5gm,', 'gi');
const reglastmeasuregramsgm6virgola = new RegExp('6gm,', 'gi');
const reglastmeasuregramsgm7virgola = new RegExp('7gm,', 'gi');
const reglastmeasuregramsgm8virgola = new RegExp('8gm,', 'gi');
const reglastmeasuregramsgm9virgola = new RegExp('9gm,', 'gi');
const reglastmeasuregramsgm0virgola = new RegExp('0gm,', 'gi');
const reglastmeasuregramsgm1slash = new RegExp('1gm/', 'gi');
const reglastmeasuregramsgm2slash = new RegExp('2gm/', 'gi');
const reglastmeasuregramsgm3slash = new RegExp('3gm/', 'gi');
const reglastmeasuregramsgm4slash = new RegExp('4gm/', 'gi');
const reglastmeasuregramsgm5slash = new RegExp('5gm/', 'gi');
const reglastmeasuregramsgm6slash = new RegExp('6gm/', 'gi');
const reglastmeasuregramsgm7slash = new RegExp('7gm/', 'gi');
const reglastmeasuregramsgm8slash = new RegExp('8gm/', 'gi');
const reglastmeasuregramsgm9slash = new RegExp('9gm/', 'gi');
const reglastmeasuregramsgm0slash = new RegExp('0gm/', 'gi');
const reglastmeasuregramsgm1question = new RegExp('1gm\\?', 'gi');
const reglastmeasuregramsgm2question = new RegExp('2gm\\?', 'gi');
const reglastmeasuregramsgm3question = new RegExp('3gm\\?', 'gi');
const reglastmeasuregramsgm4question = new RegExp('4gm\\?', 'gi');
const reglastmeasuregramsgm5question = new RegExp('5gm\\?', 'gi');
const reglastmeasuregramsgm6question = new RegExp('6gm\\?', 'gi');
const reglastmeasuregramsgm7question = new RegExp('7gm\\?', 'gi');
const reglastmeasuregramsgm8question = new RegExp('8gm\\?', 'gi');
const reglastmeasuregramsgm9question = new RegExp('9gm\\?', 'gi');
const reglastmeasuregramsgm0question = new RegExp('0gm\\?', 'gi');
const reglastmeasuregramsgm1exclam = new RegExp('1gm!', 'gi');
const reglastmeasuregramsgm2exclam = new RegExp('2gm!', 'gi');
const reglastmeasuregramsgm3exclam = new RegExp('3gm!', 'gi');
const reglastmeasuregramsgm4exclam = new RegExp('4gm!', 'gi');
const reglastmeasuregramsgm5exclam = new RegExp('5gm!', 'gi');
const reglastmeasuregramsgm6exclam = new RegExp('6gm!', 'gi');
const reglastmeasuregramsgm7exclam = new RegExp('7gm!', 'gi');
const reglastmeasuregramsgm8exclam = new RegExp('8gm!', 'gi');
const reglastmeasuregramsgm9exclam = new RegExp('9gm!', 'gi');
const reglastmeasuregramsgm0exclam = new RegExp('0gm!', 'gi');
const reglastmeasuregramsgm1space = new RegExp('1 gm ', 'gi');
const reglastmeasuregramsgm2space = new RegExp('2 gm ', 'gi');
const reglastmeasuregramsgm3space = new RegExp('3 gm ', 'gi');
const reglastmeasuregramsgm4space = new RegExp('4 gm ', 'gi');
const reglastmeasuregramsgm5space = new RegExp('5 gm ', 'gi');
const reglastmeasuregramsgm6space = new RegExp('6 gm ', 'gi');
const reglastmeasuregramsgm7space = new RegExp('7 gm ', 'gi');
const reglastmeasuregramsgm8space = new RegExp('8 gm ', 'gi');
const reglastmeasuregramsgm9space = new RegExp('9 gm ', 'gi');
const reglastmeasuregramsgm0space = new RegExp('0 gm ', 'gi');
const reglastmeasuregramsgm1exclamspace = new RegExp('1 gm!', 'gi');
const reglastmeasuregramsgm2exclamspace = new RegExp('2 gm!', 'gi');
const reglastmeasuregramsgm3exclamspace = new RegExp('3 gm!', 'gi');
const reglastmeasuregramsgm4exclamspace = new RegExp('4 gm!', 'gi');
const reglastmeasuregramsgm5exclamspace = new RegExp('5 gm!', 'gi');
const reglastmeasuregramsgm6exclamspace = new RegExp('6 gm!', 'gi');
const reglastmeasuregramsgm7exclamspace = new RegExp('7 gm!', 'gi');
const reglastmeasuregramsgm8exclamspace = new RegExp('8 gm!', 'gi');
const reglastmeasuregramsgm9exclamspace = new RegExp('9 gm!', 'gi');
const reglastmeasuregramsgm0exclamspace = new RegExp('0 gm!', 'gi');
const reglastmeasuregramsgm1slashspace = new RegExp('1 gm/', 'gi');
const reglastmeasuregramsgm2slashspace = new RegExp('2 gm/', 'gi');
const reglastmeasuregramsgm3slashspace = new RegExp('3 gm/', 'gi');
const reglastmeasuregramsgm4slashspace = new RegExp('4 gm/', 'gi');
const reglastmeasuregramsgm5slashspace = new RegExp('5 gm/', 'gi');
const reglastmeasuregramsgm6slashspace = new RegExp('6 gm/', 'gi');
const reglastmeasuregramsgm7slashspace = new RegExp('7 gm/', 'gi');
const reglastmeasuregramsgm8slashspace = new RegExp('8 gm/', 'gi');
const reglastmeasuregramsgm9slashspace = new RegExp('9 gm/', 'gi');
const reglastmeasuregramsgm0slashspace = new RegExp('0 gm/', 'gi');
const reglastmeasuregramsgm1virgolaspace = new RegExp('1 gm,', 'gi');
const reglastmeasuregramsgm2virgolaspace = new RegExp('2 gm,', 'gi');
const reglastmeasuregramsgm3virgolaspace = new RegExp('3 gm,', 'gi');
const reglastmeasuregramsgm4virgolaspace = new RegExp('4 gm,', 'gi');
const reglastmeasuregramsgm5virgolaspace = new RegExp('5 gm,', 'gi');
const reglastmeasuregramsgm6virgolaspace = new RegExp('6 gm,', 'gi');
const reglastmeasuregramsgm7virgolaspace = new RegExp('7 gm,', 'gi');
const reglastmeasuregramsgm8virgolaspace = new RegExp('8 gm,', 'gi');
const reglastmeasuregramsgm9virgolaspace = new RegExp('9 gm,', 'gi');
const reglastmeasuregramsgm0virgolaspace = new RegExp('0 gm,', 'gi');
const reglastmeasuregramsgm1pointspace = new RegExp('1 gm\\.', 'gi');
const reglastmeasuregramsgm2pointspace = new RegExp('2 gm\\.', 'gi');
const reglastmeasuregramsgm3pointspace = new RegExp('3 gm\\.', 'gi');
const reglastmeasuregramsgm4pointspace = new RegExp('4 gm\\.', 'gi');
const reglastmeasuregramsgm5pointspace = new RegExp('5 gm\\.', 'gi');
const reglastmeasuregramsgm6pointspace = new RegExp('6 gm\\.', 'gi');
const reglastmeasuregramsgm7pointspace = new RegExp('7 gm\\.', 'gi');
const reglastmeasuregramsgm8pointspace = new RegExp('8 gm\\.', 'gi');
const reglastmeasuregramsgm9pointspace = new RegExp('9 gm\\.', 'gi');
const reglastmeasuregramsgm0pointspace = new RegExp('0 gm\\.', 'gi');
const reglastmeasuregramsgm1questionspace = new RegExp('1 gm\\?', 'gi');
const reglastmeasuregramsgm2questionspace = new RegExp('2 gm\\?', 'gi');
const reglastmeasuregramsgm3questionspace = new RegExp('3 gm\\?', 'gi');
const reglastmeasuregramsgm4questionspace = new RegExp('4 gm\\?', 'gi');
const reglastmeasuregramsgm5questionspace = new RegExp('5 gm\\?', 'gi');
const reglastmeasuregramsgm6questionspace = new RegExp('6 gm\\?', 'gi');
const reglastmeasuregramsgm7questionspace = new RegExp('7 gm\\?', 'gi');
const reglastmeasuregramsgm8questionspace = new RegExp('8 gm\\?', 'gi');
const reglastmeasuregramsgm9questionspace = new RegExp('9 gm\\?', 'gi');
const reglastmeasuregramsgm0questionspace = new RegExp('0 gm\\?', 'gi');

const reglastmeasurejoules1 = new RegExp('1j ', 'gi');
const reglastmeasurejoules2 = new RegExp('2j ', 'gi');
const reglastmeasurejoules3 = new RegExp('3j ', 'gi');
const reglastmeasurejoules4 = new RegExp('4j ', 'gi');
const reglastmeasurejoules5 = new RegExp('5j ', 'gi');
const reglastmeasurejoules6 = new RegExp('6j ', 'gi');
const reglastmeasurejoules7 = new RegExp('7j ', 'gi');
const reglastmeasurejoules8 = new RegExp('8j ', 'gi');
const reglastmeasurejoules9 = new RegExp('9j ', 'gi');
const reglastmeasurejoules0 = new RegExp('0j ', 'gi');
const reglastmeasurejoules1point = new RegExp('1j\\.', 'gi');
const reglastmeasurejoules2point = new RegExp('2j\\.', 'gi');
const reglastmeasurejoules3point = new RegExp('3j\\.', 'gi');
const reglastmeasurejoules4point = new RegExp('4j\\.', 'gi');
const reglastmeasurejoules5point = new RegExp('5j\\.', 'gi');
const reglastmeasurejoules6point = new RegExp('6j\\.', 'gi');
const reglastmeasurejoules7point = new RegExp('7j\\.', 'gi');
const reglastmeasurejoules8point = new RegExp('8j\\.', 'gi');
const reglastmeasurejoules9point = new RegExp('9j\\.', 'gi');
const reglastmeasurejoules0point = new RegExp('0j\\.', 'gi');
const reglastmeasurejoules1virgola = new RegExp('1j,', 'gi');
const reglastmeasurejoules2virgola = new RegExp('2j,', 'gi');
const reglastmeasurejoules3virgola = new RegExp('3j,', 'gi');
const reglastmeasurejoules4virgola = new RegExp('4j,', 'gi');
const reglastmeasurejoules5virgola = new RegExp('5j,', 'gi');
const reglastmeasurejoules6virgola = new RegExp('6j,', 'gi');
const reglastmeasurejoules7virgola = new RegExp('7j,', 'gi');
const reglastmeasurejoules8virgola = new RegExp('8j,', 'gi');
const reglastmeasurejoules9virgola = new RegExp('9j,', 'gi');
const reglastmeasurejoules0virgola = new RegExp('0j,', 'gi');
const reglastmeasurejoules1slash = new RegExp('1j/', 'gi');
const reglastmeasurejoules2slash = new RegExp('2j/', 'gi');
const reglastmeasurejoules3slash = new RegExp('3j/', 'gi');
const reglastmeasurejoules4slash = new RegExp('4j/', 'gi');
const reglastmeasurejoules5slash = new RegExp('5j/', 'gi');
const reglastmeasurejoules6slash = new RegExp('6j/', 'gi');
const reglastmeasurejoules7slash = new RegExp('7j/', 'gi');
const reglastmeasurejoules8slash = new RegExp('8j/', 'gi');
const reglastmeasurejoules9slash = new RegExp('9j/', 'gi');
const reglastmeasurejoules0slash = new RegExp('0j/', 'gi');
const reglastmeasurejoules1question = new RegExp('1j\\?', 'gi');
const reglastmeasurejoules2question = new RegExp('2j\\?', 'gi');
const reglastmeasurejoules3question = new RegExp('3j\\?', 'gi');
const reglastmeasurejoules4question = new RegExp('4j\\?', 'gi');
const reglastmeasurejoules5question = new RegExp('5j\\?', 'gi');
const reglastmeasurejoules6question = new RegExp('6j\\?', 'gi');
const reglastmeasurejoules7question = new RegExp('7j\\?', 'gi');
const reglastmeasurejoules8question = new RegExp('8j\\?', 'gi');
const reglastmeasurejoules9question = new RegExp('9j\\?', 'gi');
const reglastmeasurejoules0question = new RegExp('0j\\?', 'gi');
const reglastmeasurejoules1exclam = new RegExp('1j!', 'gi');
const reglastmeasurejoules2exclam = new RegExp('2j!', 'gi');
const reglastmeasurejoules3exclam = new RegExp('3j!', 'gi');
const reglastmeasurejoules4exclam = new RegExp('4j!', 'gi');
const reglastmeasurejoules5exclam = new RegExp('5j!', 'gi');
const reglastmeasurejoules6exclam = new RegExp('6j!', 'gi');
const reglastmeasurejoules7exclam = new RegExp('7j!', 'gi');
const reglastmeasurejoules8exclam = new RegExp('8j!', 'gi');
const reglastmeasurejoules9exclam = new RegExp('9j!', 'gi');
const reglastmeasurejoules0exclam = new RegExp('0j!', 'gi');
const reglastmeasurejoules1space = new RegExp('1 j ', 'gi');
const reglastmeasurejoules2space = new RegExp('2 j ', 'gi');
const reglastmeasurejoules3space = new RegExp('3 j ', 'gi');
const reglastmeasurejoules4space = new RegExp('4 j ', 'gi');
const reglastmeasurejoules5space = new RegExp('5 j ', 'gi');
const reglastmeasurejoules6space = new RegExp('6 j ', 'gi');
const reglastmeasurejoules7space = new RegExp('7 j ', 'gi');
const reglastmeasurejoules8space = new RegExp('8 j ', 'gi');
const reglastmeasurejoules9space = new RegExp('9 j ', 'gi');
const reglastmeasurejoules0space = new RegExp('0 j ', 'gi');
const reglastmeasurejoules1exclamspace = new RegExp('1 j!', 'gi');
const reglastmeasurejoules2exclamspace = new RegExp('2 j!', 'gi');
const reglastmeasurejoules3exclamspace = new RegExp('3 j!', 'gi');
const reglastmeasurejoules4exclamspace = new RegExp('4 j!', 'gi');
const reglastmeasurejoules5exclamspace = new RegExp('5 j!', 'gi');
const reglastmeasurejoules6exclamspace = new RegExp('6 j!', 'gi');
const reglastmeasurejoules7exclamspace = new RegExp('7 j!', 'gi');
const reglastmeasurejoules8exclamspace = new RegExp('8 j!', 'gi');
const reglastmeasurejoules9exclamspace = new RegExp('9 j!', 'gi');
const reglastmeasurejoules0exclamspace = new RegExp('0 j!', 'gi');
const reglastmeasurejoules1slashspace = new RegExp('1 j/', 'gi');
const reglastmeasurejoules2slashspace = new RegExp('2 j/', 'gi');
const reglastmeasurejoules3slashspace = new RegExp('3 j/', 'gi');
const reglastmeasurejoules4slashspace = new RegExp('4 j/', 'gi');
const reglastmeasurejoules5slashspace = new RegExp('5 j/', 'gi');
const reglastmeasurejoules6slashspace = new RegExp('6 j/', 'gi');
const reglastmeasurejoules7slashspace = new RegExp('7 j/', 'gi');
const reglastmeasurejoules8slashspace = new RegExp('8 j/', 'gi');
const reglastmeasurejoules9slashspace = new RegExp('9 j/', 'gi');
const reglastmeasurejoules0slashspace = new RegExp('0 j/', 'gi');
const reglastmeasurejoules1virgolaspace = new RegExp('1 j,', 'gi');
const reglastmeasurejoules2virgolaspace = new RegExp('2 j,', 'gi');
const reglastmeasurejoules3virgolaspace = new RegExp('3 j,', 'gi');
const reglastmeasurejoules4virgolaspace = new RegExp('4 j,', 'gi');
const reglastmeasurejoules5virgolaspace = new RegExp('5 j,', 'gi');
const reglastmeasurejoules6virgolaspace = new RegExp('6 j,', 'gi');
const reglastmeasurejoules7virgolaspace = new RegExp('7 j,', 'gi');
const reglastmeasurejoules8virgolaspace = new RegExp('8 j,', 'gi');
const reglastmeasurejoules9virgolaspace = new RegExp('9 j,', 'gi');
const reglastmeasurejoules0virgolaspace = new RegExp('0 j,', 'gi');
const reglastmeasurejoules1pointspace = new RegExp('1 j\\.', 'gi');
const reglastmeasurejoules2pointspace = new RegExp('2 j\\.', 'gi');
const reglastmeasurejoules3pointspace = new RegExp('3 j\\.', 'gi');
const reglastmeasurejoules4pointspace = new RegExp('4 j\\.', 'gi');
const reglastmeasurejoules5pointspace = new RegExp('5 j\\.', 'gi');
const reglastmeasurejoules6pointspace = new RegExp('6 j\\.', 'gi');
const reglastmeasurejoules7pointspace = new RegExp('7 j\\.', 'gi');
const reglastmeasurejoules8pointspace = new RegExp('8 j\\.', 'gi');
const reglastmeasurejoules9pointspace = new RegExp('9 j\\.', 'gi');
const reglastmeasurejoules0pointspace = new RegExp('0 j\\.', 'gi');
const reglastmeasurejoules1questionspace = new RegExp('1 j\\?', 'gi');
const reglastmeasurejoules2questionspace = new RegExp('2 j\\?', 'gi');
const reglastmeasurejoules3questionspace = new RegExp('3 j\\?', 'gi');
const reglastmeasurejoules4questionspace = new RegExp('4 j\\?', 'gi');
const reglastmeasurejoules5questionspace = new RegExp('5 j\\?', 'gi');
const reglastmeasurejoules6questionspace = new RegExp('6 j\\?', 'gi');
const reglastmeasurejoules7questionspace = new RegExp('7 j\\?', 'gi');
const reglastmeasurejoules8questionspace = new RegExp('8 j\\?', 'gi');
const reglastmeasurejoules9questionspace = new RegExp('9 j\\?', 'gi');
const reglastmeasurejoules0questionspace = new RegExp('0 j\\?', 'gi');

const reglastmeasurefaq1 = new RegExp(',faq ', 'gi');
const reglastmeasurefaqslashfirst = new RegExp('/faq ', 'gi');
const reglastmeasurefaq2 = new RegExp('!faq ', 'gi');
const reglastmeasurefaq3 = new RegExp('\\?faq ', 'gi');
const reglastmeasurefaq4 = new RegExp('\\.faq ', 'gi');
const reglastmeasurefaq5 = new RegExp(' faq ', 'gi');
const reglastmeasurefaq6 = new RegExp(' faq\\.', 'gi');
const reglastmeasurefaq7 = new RegExp(' faq,', 'gi');
const reglastmeasurefaq8 = new RegExp(' faq!', 'gi');
const reglastmeasurefaq9 = new RegExp(' faq\\?', 'gi');
const reglastmeasurefaqslashafter = new RegExp(' faq/', 'gi');

const reglastmeasureama1 = new RegExp(',ama ', 'gi');
const reglastmeasureamaslashfirst = new RegExp('/ama ', 'gi');
const reglastmeasureama2 = new RegExp('!ama ', 'gi');
const reglastmeasureama3 = new RegExp('\\?ama ', 'gi');
const reglastmeasureama4 = new RegExp('\\.ama ', 'gi');
const reglastmeasureama5 = new RegExp(' ama ', 'gi');
const reglastmeasureama6 = new RegExp(' ama\\.', 'gi');
const reglastmeasureama7 = new RegExp(' ama,', 'gi');
const reglastmeasureama8 = new RegExp(' ama!', 'gi');
const reglastmeasureama9 = new RegExp(' ama\\?', 'gi');
const reglastmeasureamaslashafter = new RegExp(' ama/', 'gi');

const reglastmeasureytb1 = new RegExp(',ytb ', 'gi');
const reglastmeasureytbslashfirst = new RegExp('/ytb ', 'gi');
const reglastmeasureytb2 = new RegExp('!ytb ', 'gi');
const reglastmeasureytb3 = new RegExp('\\?ytb ', 'gi');
const reglastmeasureytb4 = new RegExp('\\.ytb ', 'gi');
const reglastmeasureytb5 = new RegExp(' ytb ', 'gi');
const reglastmeasureytb6 = new RegExp(' ytb\\.', 'gi');
const reglastmeasureytb7 = new RegExp(' ytb,', 'gi');
const reglastmeasureytb8 = new RegExp(' ytb!', 'gi');
const reglastmeasureytb9 = new RegExp(' ytb\\?', 'gi');
const reglastmeasureytbslashafter = new RegExp(' ytb/', 'gi');

const reglastmeasurephd1 = new RegExp(',phd ', 'gi');
const reglastmeasurephdslashfirst = new RegExp('/phd ', 'gi');
const reglastmeasurephd2 = new RegExp('!phd ', 'gi');
const reglastmeasurephd3 = new RegExp('\\?phd ', 'gi');
const reglastmeasurephd4 = new RegExp('\\.phd ', 'gi');
const reglastmeasurephd5 = new RegExp(' phd ', 'gi');
const reglastmeasurephd6 = new RegExp(' phd\\.', 'gi');
const reglastmeasurephd7 = new RegExp(' phd,', 'gi');
const reglastmeasurephd8 = new RegExp(' phd!', 'gi');
const reglastmeasurephd9 = new RegExp(' phd\\?', 'gi');
const reglastmeasurephdslashafter = new RegExp(' phd/', 'gi');

const reglastmeasureafaik1 = new RegExp(',afaik ', 'gi');
const reglastmeasureafaikslashfirst = new RegExp('/afaik ', 'gi');
const reglastmeasureafaik2 = new RegExp('!afaik ', 'gi');
const reglastmeasureafaik3 = new RegExp('\\?afaik ', 'gi');
const reglastmeasureafaik4 = new RegExp('\\.afaik ', 'gi');
const reglastmeasureafaik5 = new RegExp(' afaik ', 'gi');
const reglastmeasureafaik6 = new RegExp(' afaik\\.', 'gi');
const reglastmeasureafaik7 = new RegExp(' afaik,', 'gi');
const reglastmeasureafaik8 = new RegExp(' afaik!', 'gi');
const reglastmeasureafaik9 = new RegExp(' afaik\\?', 'gi');
const reglastmeasureafaikslashafter = new RegExp(' afaik/', 'gi');

const reglastmeasuretldr1 = new RegExp(',tldr ', 'gi');
const reglastmeasuretldrslashfirst = new RegExp('/tldr ', 'gi');
const reglastmeasuretldr2 = new RegExp('!tldr ', 'gi');
const reglastmeasuretldr3 = new RegExp('\\?tldr ', 'gi');
const reglastmeasuretldr4 = new RegExp('\\.tldr ', 'gi');
const reglastmeasuretldr5 = new RegExp(' tldr ', 'gi');
const reglastmeasuretldr6 = new RegExp(' tldr\\.', 'gi');
const reglastmeasuretldr7 = new RegExp(' tldr,', 'gi');
const reglastmeasuretldr8 = new RegExp(' tldr!', 'gi');
const reglastmeasuretldr9 = new RegExp(' tldr\\?', 'gi');
const reglastmeasuretldrslashafter = new RegExp(' tldr/', 'gi');

const reglastmeasuretl_dr1 = new RegExp(',tl dr ', 'gi');
const reglastmeasuretl_drslashfirst = new RegExp('/tl dr ', 'gi');
const reglastmeasuretl_dr2 = new RegExp('!tl dr ', 'gi');
const reglastmeasuretl_dr3 = new RegExp('\\?tl dr ', 'gi');
const reglastmeasuretl_dr4 = new RegExp('\\.tl dr ', 'gi');
const reglastmeasuretl_dr5 = new RegExp(' tl dr ', 'gi');
const reglastmeasuretl_dr6 = new RegExp(' tl dr\\.', 'gi');
const reglastmeasuretl_dr7 = new RegExp(' tl dr,', 'gi');
const reglastmeasuretl_dr8 = new RegExp(' tl dr!', 'gi');
const reglastmeasuretl_dr9 = new RegExp(' tl dr\\?', 'gi');
const reglastmeasuretl_drslashafter = new RegExp(' tl dr/', 'gi');

const reglastmeasureMillions1 = new RegExp('1mln ', 'gi');
const reglastmeasureMillions2 = new RegExp('2mln ', 'gi');
const reglastmeasureMillions3 = new RegExp('3mln ', 'gi');
const reglastmeasureMillions4 = new RegExp('4mln ', 'gi');
const reglastmeasureMillions5 = new RegExp('5mln ', 'gi');
const reglastmeasureMillions6 = new RegExp('6mln ', 'gi');
const reglastmeasureMillions7 = new RegExp('7mln ', 'gi');
const reglastmeasureMillions8 = new RegExp('8mln ', 'gi');
const reglastmeasureMillions9 = new RegExp('9mln ', 'gi');
const reglastmeasureMillions0 = new RegExp('0mln ', 'gi');
const reglastmeasureMillions1point = new RegExp('1mln\\.', 'gi');
const reglastmeasureMillions2point = new RegExp('2mln\\.', 'gi');
const reglastmeasureMillions3point = new RegExp('3mln\\.', 'gi');
const reglastmeasureMillions4point = new RegExp('4mln\\.', 'gi');
const reglastmeasureMillions5point = new RegExp('5mln\\.', 'gi');
const reglastmeasureMillions6point = new RegExp('6mln\\.', 'gi');
const reglastmeasureMillions7point = new RegExp('7mln\\.', 'gi');
const reglastmeasureMillions8point = new RegExp('8mln\\.', 'gi');
const reglastmeasureMillions9point = new RegExp('9mln\\.', 'gi');
const reglastmeasureMillions0point = new RegExp('0mln\\.', 'gi');
const reglastmeasureMillions1virgola = new RegExp('1mln,', 'gi');
const reglastmeasureMillions2virgola = new RegExp('2mln,', 'gi');
const reglastmeasureMillions3virgola = new RegExp('3mln,', 'gi');
const reglastmeasureMillions4virgola = new RegExp('4mln,', 'gi');
const reglastmeasureMillions5virgola = new RegExp('5mln,', 'gi');
const reglastmeasureMillions6virgola = new RegExp('6mln,', 'gi');
const reglastmeasureMillions7virgola = new RegExp('7mln,', 'gi');
const reglastmeasureMillions8virgola = new RegExp('8mln,', 'gi');
const reglastmeasureMillions9virgola = new RegExp('9mln,', 'gi');
const reglastmeasureMillions0virgola = new RegExp('0mln,', 'gi');
const reglastmeasureMillions1slash = new RegExp('1mln/', 'gi');
const reglastmeasureMillions2slash = new RegExp('2mln/', 'gi');
const reglastmeasureMillions3slash = new RegExp('3mln/', 'gi');
const reglastmeasureMillions4slash = new RegExp('4mln/', 'gi');
const reglastmeasureMillions5slash = new RegExp('5mln/', 'gi');
const reglastmeasureMillions6slash = new RegExp('6mln/', 'gi');
const reglastmeasureMillions7slash = new RegExp('7mln/', 'gi');
const reglastmeasureMillions8slash = new RegExp('8mln/', 'gi');
const reglastmeasureMillions9slash = new RegExp('9mln/', 'gi');
const reglastmeasureMillions0slash = new RegExp('0mln/', 'gi');
const reglastmeasureMillions1question = new RegExp('1mln\\?', 'gi');
const reglastmeasureMillions2question = new RegExp('2mln\\?', 'gi');
const reglastmeasureMillions3question = new RegExp('3mln\\?', 'gi');
const reglastmeasureMillions4question = new RegExp('4mln\\?', 'gi');
const reglastmeasureMillions5question = new RegExp('5mln\\?', 'gi');
const reglastmeasureMillions6question = new RegExp('6mln\\?', 'gi');
const reglastmeasureMillions7question = new RegExp('7mln\\?', 'gi');
const reglastmeasureMillions8question = new RegExp('8mln\\?', 'gi');
const reglastmeasureMillions9question = new RegExp('9mln\\?', 'gi');
const reglastmeasureMillions0question = new RegExp('0mln\\?', 'gi');
const reglastmeasureMillions1exclam = new RegExp('1mln!', 'gi');
const reglastmeasureMillions2exclam = new RegExp('2mln!', 'gi');
const reglastmeasureMillions3exclam = new RegExp('3mln!', 'gi');
const reglastmeasureMillions4exclam = new RegExp('4mln!', 'gi');
const reglastmeasureMillions5exclam = new RegExp('5mln!', 'gi');
const reglastmeasureMillions6exclam = new RegExp('6mln!', 'gi');
const reglastmeasureMillions7exclam = new RegExp('7mln!', 'gi');
const reglastmeasureMillions8exclam = new RegExp('8mln!', 'gi');
const reglastmeasureMillions9exclam = new RegExp('9mln!', 'gi');
const reglastmeasureMillions0exclam = new RegExp('0mln!', 'gi');
const reglastmeasureMillions1space = new RegExp('1 mln ', 'gi');
const reglastmeasureMillions2space = new RegExp('2 mln ', 'gi');
const reglastmeasureMillions3space = new RegExp('3 mln ', 'gi');
const reglastmeasureMillions4space = new RegExp('4 mln ', 'gi');
const reglastmeasureMillions5space = new RegExp('5 mln ', 'gi');
const reglastmeasureMillions6space = new RegExp('6 mln ', 'gi');
const reglastmeasureMillions7space = new RegExp('7 mln ', 'gi');
const reglastmeasureMillions8space = new RegExp('8 mln ', 'gi');
const reglastmeasureMillions9space = new RegExp('9 mln ', 'gi');
const reglastmeasureMillions0space = new RegExp('0 mln ', 'gi');
const reglastmeasureMillions1exclamspace = new RegExp('1 mln!', 'gi');
const reglastmeasureMillions2exclamspace = new RegExp('2 mln!', 'gi');
const reglastmeasureMillions3exclamspace = new RegExp('3 mln!', 'gi');
const reglastmeasureMillions4exclamspace = new RegExp('4 mln!', 'gi');
const reglastmeasureMillions5exclamspace = new RegExp('5 mln!', 'gi');
const reglastmeasureMillions6exclamspace = new RegExp('6 mln!', 'gi');
const reglastmeasureMillions7exclamspace = new RegExp('7 mln!', 'gi');
const reglastmeasureMillions8exclamspace = new RegExp('8 mln!', 'gi');
const reglastmeasureMillions9exclamspace = new RegExp('9 mln!', 'gi');
const reglastmeasureMillions0exclamspace = new RegExp('0 mln!', 'gi');
const reglastmeasureMillions1slashspace = new RegExp('1 mln/', 'gi');
const reglastmeasureMillions2slashspace = new RegExp('2 mln/', 'gi');
const reglastmeasureMillions3slashspace = new RegExp('3 mln/', 'gi');
const reglastmeasureMillions4slashspace = new RegExp('4 mln/', 'gi');
const reglastmeasureMillions5slashspace = new RegExp('5 mln/', 'gi');
const reglastmeasureMillions6slashspace = new RegExp('6 mln/', 'gi');
const reglastmeasureMillions7slashspace = new RegExp('7 mln/', 'gi');
const reglastmeasureMillions8slashspace = new RegExp('8 mln/', 'gi');
const reglastmeasureMillions9slashspace = new RegExp('9 mln/', 'gi');
const reglastmeasureMillions0slashspace = new RegExp('0 mln/', 'gi');
const reglastmeasureMillions1virgolaspace = new RegExp('1 mln,', 'gi');
const reglastmeasureMillions2virgolaspace = new RegExp('2 mln,', 'gi');
const reglastmeasureMillions3virgolaspace = new RegExp('3 mln,', 'gi');
const reglastmeasureMillions4virgolaspace = new RegExp('4 mln,', 'gi');
const reglastmeasureMillions5virgolaspace = new RegExp('5 mln,', 'gi');
const reglastmeasureMillions6virgolaspace = new RegExp('6 mln,', 'gi');
const reglastmeasureMillions7virgolaspace = new RegExp('7 mln,', 'gi');
const reglastmeasureMillions8virgolaspace = new RegExp('8 mln,', 'gi');
const reglastmeasureMillions9virgolaspace = new RegExp('9 mln,', 'gi');
const reglastmeasureMillions0virgolaspace = new RegExp('0 mln,', 'gi');
const reglastmeasureMillions1pointspace = new RegExp('1 mln\\.', 'gi');
const reglastmeasureMillions2pointspace = new RegExp('2 mln\\.', 'gi');
const reglastmeasureMillions3pointspace = new RegExp('3 mln\\.', 'gi');
const reglastmeasureMillions4pointspace = new RegExp('4 mln\\.', 'gi');
const reglastmeasureMillions5pointspace = new RegExp('5 mln\\.', 'gi');
const reglastmeasureMillions6pointspace = new RegExp('6 mln\\.', 'gi');
const reglastmeasureMillions7pointspace = new RegExp('7 mln\\.', 'gi');
const reglastmeasureMillions8pointspace = new RegExp('8 mln\\.', 'gi');
const reglastmeasureMillions9pointspace = new RegExp('9 mln\\.', 'gi');
const reglastmeasureMillions0pointspace = new RegExp('0 mln\\.', 'gi');
const reglastmeasureMillions1questionspace = new RegExp('1 mln\\?', 'gi');
const reglastmeasureMillions2questionspace = new RegExp('2 mln\\?', 'gi');
const reglastmeasureMillions3questionspace = new RegExp('3 mln\\?', 'gi');
const reglastmeasureMillions4questionspace = new RegExp('4 mln\\?', 'gi');
const reglastmeasureMillions5questionspace = new RegExp('5 mln\\?', 'gi');
const reglastmeasureMillions6questionspace = new RegExp('6 mln\\?', 'gi');
const reglastmeasureMillions7questionspace = new RegExp('7 mln\\?', 'gi');
const reglastmeasureMillions8questionspace = new RegExp('8 mln\\?', 'gi');
const reglastmeasureMillions9questionspace = new RegExp('9 mln\\?', 'gi');
const reglastmeasureMillions0questionspace = new RegExp('0 mln\\?', 'gi');

const reglastmeasureSeason1 = new RegExp('s1e1', 'gi');
const reglastmeasureSeason2 = new RegExp('s2e1', 'gi');
const reglastmeasureSeason3 = new RegExp('s3e1', 'gi');
const reglastmeasureSeason4 = new RegExp('s4e1', 'gi');
const reglastmeasureSeason5 = new RegExp('s5e1', 'gi');
const reglastmeasureSeason6 = new RegExp('s6e1', 'gi');
const reglastmeasureSeason7 = new RegExp('s7e1', 'gi');
const reglastmeasureSeason8 = new RegExp('s8e1', 'gi');
const reglastmeasureSeason9 = new RegExp('s9e1', 'gi');
const reglastmeasureSeason10 = new RegExp('s1e2', 'gi');
const reglastmeasureSeason11 = new RegExp('s2e2', 'gi');
const reglastmeasureSeason12 = new RegExp('s3e2', 'gi');
const reglastmeasureSeason13 = new RegExp('s4e2', 'gi');
const reglastmeasureSeason14 = new RegExp('s5e2', 'gi');
const reglastmeasureSeason15 = new RegExp('s6e2', 'gi');
const reglastmeasureSeason16 = new RegExp('s7e2', 'gi');
const reglastmeasureSeason17 = new RegExp('s8e2', 'gi');
const reglastmeasureSeason18 = new RegExp('s9e2', 'gi');
const reglastmeasureSeason19 = new RegExp('s1e3', 'gi');
const reglastmeasureSeason20 = new RegExp('s2e3', 'gi');
const reglastmeasureSeason21 = new RegExp('s3e3', 'gi');
const reglastmeasureSeason22 = new RegExp('s4e3', 'gi');
const reglastmeasureSeason23 = new RegExp('s5e3', 'gi');
const reglastmeasureSeason24 = new RegExp('s6e3', 'gi');
const reglastmeasureSeason25 = new RegExp('s7e3', 'gi');
const reglastmeasureSeason26 = new RegExp('s8e3', 'gi');
const reglastmeasureSeason27 = new RegExp('s9e3', 'gi');
const reglastmeasureSeason28 = new RegExp('s1e4', 'gi');
const reglastmeasureSeason29 = new RegExp('s2e4', 'gi');
const reglastmeasureSeason30 = new RegExp('s3e4', 'gi');
const reglastmeasureSeason31 = new RegExp('s4e4', 'gi');
const reglastmeasureSeason32 = new RegExp('s5e4', 'gi');
const reglastmeasureSeason33 = new RegExp('s6e4', 'gi');
const reglastmeasureSeason34 = new RegExp('s7e4', 'gi');
const reglastmeasureSeason35 = new RegExp('s8e4', 'gi');
const reglastmeasureSeason36 = new RegExp('s9e4', 'gi');
const reglastmeasureSeason37 = new RegExp('s1e5', 'gi');
const reglastmeasureSeason38 = new RegExp('s2e5', 'gi');
const reglastmeasureSeason39 = new RegExp('s3e5', 'gi');
const reglastmeasureSeason40 = new RegExp('s4e5', 'gi');
const reglastmeasureSeason41 = new RegExp('s5e5', 'gi');
const reglastmeasureSeason42 = new RegExp('s6e5', 'gi');
const reglastmeasureSeason43 = new RegExp('s7e5', 'gi');
const reglastmeasureSeason44 = new RegExp('s8e5', 'gi');
const reglastmeasureSeason45 = new RegExp('s9e5', 'gi');
const reglastmeasureSeason46 = new RegExp('s1e6', 'gi');
const reglastmeasureSeason47 = new RegExp('s2e6', 'gi');
const reglastmeasureSeason48 = new RegExp('s3e6', 'gi');
const reglastmeasureSeason49 = new RegExp('s4e6', 'gi');
const reglastmeasureSeason50 = new RegExp('s5e6', 'gi');
const reglastmeasureSeason51 = new RegExp('s6e6', 'gi');
const reglastmeasureSeason52 = new RegExp('s7e6', 'gi');
const reglastmeasureSeason53 = new RegExp('s8e6', 'gi');
const reglastmeasureSeason54 = new RegExp('s9e6', 'gi');
const reglastmeasureSeason55 = new RegExp('s1e7', 'gi');
const reglastmeasureSeason56 = new RegExp('s2e7', 'gi');
const reglastmeasureSeason57 = new RegExp('s3e7', 'gi');
const reglastmeasureSeason58 = new RegExp('s4e7', 'gi');
const reglastmeasureSeason59 = new RegExp('s5e7', 'gi');
const reglastmeasureSeason60 = new RegExp('s6e7', 'gi');
const reglastmeasureSeason61 = new RegExp('s7e7', 'gi');
const reglastmeasureSeason62 = new RegExp('s8e7', 'gi');
const reglastmeasureSeason63 = new RegExp('s9e7', 'gi');
const reglastmeasureSeason64 = new RegExp('s1e8', 'gi');
const reglastmeasureSeason65 = new RegExp('s2e8', 'gi');
const reglastmeasureSeason66 = new RegExp('s3e8', 'gi');
const reglastmeasureSeason67 = new RegExp('s4e8', 'gi');
const reglastmeasureSeason68 = new RegExp('s5e8', 'gi');
const reglastmeasureSeason69 = new RegExp('s6e8', 'gi');
const reglastmeasureSeason70 = new RegExp('s7e8', 'gi');
const reglastmeasureSeason71 = new RegExp('s8e8', 'gi');
const reglastmeasureSeason72 = new RegExp('s9e8', 'gi');
const reglastmeasureSeason73 = new RegExp('s1e9', 'gi');
const reglastmeasureSeason74 = new RegExp('s2e9', 'gi');
const reglastmeasureSeason75 = new RegExp('s3e9', 'gi');
const reglastmeasureSeason76 = new RegExp('s4e9', 'gi');
const reglastmeasureSeason77 = new RegExp('s5e9', 'gi');
const reglastmeasureSeason78 = new RegExp('s6e9', 'gi');
const reglastmeasureSeason79 = new RegExp('s7e9', 'gi');
const reglastmeasureSeason80 = new RegExp('s8e9', 'gi');
const reglastmeasureSeason81 = new RegExp('s9e9', 'gi');
const reglastmeasureSeason82 = new RegExp('s01e01', 'gi');
const reglastmeasureSeason83 = new RegExp('s02e01', 'gi');
const reglastmeasureSeason84 = new RegExp('s03e01', 'gi');
const reglastmeasureSeason85 = new RegExp('s04e01', 'gi');
const reglastmeasureSeason86 = new RegExp('s05e01', 'gi');
const reglastmeasureSeason87 = new RegExp('s06e01', 'gi');
const reglastmeasureSeason88 = new RegExp('s07e01', 'gi');
const reglastmeasureSeason89 = new RegExp('s08e01', 'gi');
const reglastmeasureSeason90 = new RegExp('s09e01', 'gi');
const reglastmeasureSeason91 = new RegExp('s10e01', 'gi');
const reglastmeasureSeason92 = new RegExp('s11e01', 'gi');
const reglastmeasureSeason93 = new RegExp('s12e01', 'gi');
const reglastmeasureSeason94 = new RegExp('s13e01', 'gi');
const reglastmeasureSeason95 = new RegExp('s14e01', 'gi');
const reglastmeasureSeason96 = new RegExp('s15e01', 'gi');
const reglastmeasureSeason97 = new RegExp('s16e01', 'gi');
const reglastmeasureSeason98 = new RegExp('s17e01', 'gi');
const reglastmeasureSeason99 = new RegExp('s18e01', 'gi');
const reglastmeasureSeason100 = new RegExp('s19e01', 'gi');
const reglastmeasureSeason101 = new RegExp('s20e01', 'gi');
const reglastmeasureSeason102 = new RegExp('s21e01', 'gi');
const reglastmeasureSeason103 = new RegExp('s22e01', 'gi');
const reglastmeasureSeason104 = new RegExp('s23e01', 'gi');
const reglastmeasureSeason105 = new RegExp('s24e01', 'gi');
const reglastmeasureSeason106 = new RegExp('s25e01', 'gi');
const reglastmeasureSeason107 = new RegExp('s26e01', 'gi');
const reglastmeasureSeason108 = new RegExp('s27e01', 'gi');
const reglastmeasureSeason109 = new RegExp('s28e01', 'gi');
const reglastmeasureSeason110 = new RegExp('s29e01', 'gi');
const reglastmeasureSeason111 = new RegExp('s30e01', 'gi');

const reglastmeasureSeason112 = new RegExp('s01e02', 'gi');
const reglastmeasureSeason113 = new RegExp('s02e02', 'gi');
const reglastmeasureSeason114 = new RegExp('s03e02', 'gi');
const reglastmeasureSeason115 = new RegExp('s04e02', 'gi');
const reglastmeasureSeason116 = new RegExp('s05e02', 'gi');
const reglastmeasureSeason117 = new RegExp('s06e02', 'gi');
const reglastmeasureSeason118 = new RegExp('s07e02', 'gi');
const reglastmeasureSeason119 = new RegExp('s08e02', 'gi');
const reglastmeasureSeason120 = new RegExp('s09e02', 'gi');
const reglastmeasureSeason121 = new RegExp('s10e02', 'gi');
const reglastmeasureSeason122 = new RegExp('s11e02', 'gi');
const reglastmeasureSeason123 = new RegExp('s12e02', 'gi');
const reglastmeasureSeason124 = new RegExp('s13e02', 'gi');
const reglastmeasureSeason125 = new RegExp('s14e02', 'gi');
const reglastmeasureSeason126 = new RegExp('s15e02', 'gi');
const reglastmeasureSeason127 = new RegExp('s16e02', 'gi');
const reglastmeasureSeason128 = new RegExp('s17e02', 'gi');
const reglastmeasureSeason129 = new RegExp('s18e02', 'gi');
const reglastmeasureSeason130 = new RegExp('s19e02', 'gi');
const reglastmeasureSeason131 = new RegExp('s20e02', 'gi');
const reglastmeasureSeason132 = new RegExp('s21e02', 'gi');
const reglastmeasureSeason133 = new RegExp('s22e02', 'gi');
const reglastmeasureSeason134 = new RegExp('s23e02', 'gi');
const reglastmeasureSeason135 = new RegExp('s24e02', 'gi');
const reglastmeasureSeason136 = new RegExp('s25e02', 'gi');
const reglastmeasureSeason137 = new RegExp('s26e02', 'gi');
const reglastmeasureSeason138 = new RegExp('s27e02', 'gi');
const reglastmeasureSeason139 = new RegExp('s28e02', 'gi');
const reglastmeasureSeason140 = new RegExp('s29e02', 'gi');
const reglastmeasureSeason141 = new RegExp('s30e02', 'gi');

const reglastmeasureSeason142 = new RegExp('s01e03', 'gi');
const reglastmeasureSeason143 = new RegExp('s02e03', 'gi');
const reglastmeasureSeason144 = new RegExp('s03e03', 'gi');
const reglastmeasureSeason145 = new RegExp('s04e03', 'gi');
const reglastmeasureSeason146 = new RegExp('s05e03', 'gi');
const reglastmeasureSeason147 = new RegExp('s06e03', 'gi');
const reglastmeasureSeason148 = new RegExp('s07e03', 'gi');
const reglastmeasureSeason149 = new RegExp('s08e03', 'gi');
const reglastmeasureSeason150 = new RegExp('s09e03', 'gi');
const reglastmeasureSeason151 = new RegExp('s10e03', 'gi');
const reglastmeasureSeason152 = new RegExp('s11e03', 'gi');
const reglastmeasureSeason153 = new RegExp('s12e03', 'gi');
const reglastmeasureSeason154 = new RegExp('s13e03', 'gi');
const reglastmeasureSeason155 = new RegExp('s14e03', 'gi');
const reglastmeasureSeason156 = new RegExp('s15e03', 'gi');
const reglastmeasureSeason157 = new RegExp('s16e03', 'gi');
const reglastmeasureSeason158 = new RegExp('s17e03', 'gi');
const reglastmeasureSeason159 = new RegExp('s18e03', 'gi');
const reglastmeasureSeason160 = new RegExp('s19e03', 'gi');
const reglastmeasureSeason161 = new RegExp('s20e03', 'gi');
const reglastmeasureSeason162 = new RegExp('s21e03', 'gi');
const reglastmeasureSeason163 = new RegExp('s22e03', 'gi');
const reglastmeasureSeason164 = new RegExp('s23e03', 'gi');
const reglastmeasureSeason165 = new RegExp('s24e03', 'gi');
const reglastmeasureSeason166 = new RegExp('s25e03', 'gi');
const reglastmeasureSeason167 = new RegExp('s26e03', 'gi');
const reglastmeasureSeason168 = new RegExp('s27e03', 'gi');
const reglastmeasureSeason169 = new RegExp('s28e03', 'gi');
const reglastmeasureSeason170 = new RegExp('s29e03', 'gi');
const reglastmeasureSeason171 = new RegExp('s30e03', 'gi');

const reglastmeasureSeason172 = new RegExp('s01e04', 'gi');
const reglastmeasureSeason173 = new RegExp('s02e04', 'gi');
const reglastmeasureSeason174 = new RegExp('s03e04', 'gi');
const reglastmeasureSeason175 = new RegExp('s04e04', 'gi');
const reglastmeasureSeason176 = new RegExp('s05e04', 'gi');
const reglastmeasureSeason177 = new RegExp('s06e04', 'gi');
const reglastmeasureSeason178 = new RegExp('s07e04', 'gi');
const reglastmeasureSeason179 = new RegExp('s08e04', 'gi');
const reglastmeasureSeason180 = new RegExp('s09e04', 'gi');
const reglastmeasureSeason181 = new RegExp('s10e04', 'gi');
const reglastmeasureSeason182 = new RegExp('s11e04', 'gi');
const reglastmeasureSeason183 = new RegExp('s12e04', 'gi');
const reglastmeasureSeason184 = new RegExp('s13e04', 'gi');
const reglastmeasureSeason185 = new RegExp('s14e04', 'gi');
const reglastmeasureSeason186 = new RegExp('s15e04', 'gi');
const reglastmeasureSeason187 = new RegExp('s16e04', 'gi');
const reglastmeasureSeason188 = new RegExp('s17e04', 'gi');
const reglastmeasureSeason189 = new RegExp('s18e04', 'gi');
const reglastmeasureSeason190 = new RegExp('s19e04', 'gi');
const reglastmeasureSeason191 = new RegExp('s20e04', 'gi');
const reglastmeasureSeason192 = new RegExp('s21e04', 'gi');
const reglastmeasureSeason193 = new RegExp('s22e04', 'gi');
const reglastmeasureSeason194 = new RegExp('s23e04', 'gi');
const reglastmeasureSeason195 = new RegExp('s24e04', 'gi');
const reglastmeasureSeason196 = new RegExp('s25e04', 'gi');
const reglastmeasureSeason197 = new RegExp('s26e04', 'gi');
const reglastmeasureSeason198 = new RegExp('s27e04', 'gi');
const reglastmeasureSeason199 = new RegExp('s28e04', 'gi');
const reglastmeasureSeason200 = new RegExp('s29e04', 'gi');
const reglastmeasureSeason201 = new RegExp('s30e04', 'gi');

const reglastmeasureSeason202 = new RegExp('s01e05', 'gi');
const reglastmeasureSeason203 = new RegExp('s02e05', 'gi');
const reglastmeasureSeason204 = new RegExp('s03e05', 'gi');
const reglastmeasureSeason205 = new RegExp('s04e05', 'gi');
const reglastmeasureSeason206 = new RegExp('s05e05', 'gi');
const reglastmeasureSeason207 = new RegExp('s06e05', 'gi');
const reglastmeasureSeason208 = new RegExp('s07e05', 'gi');
const reglastmeasureSeason209 = new RegExp('s08e05', 'gi');
const reglastmeasureSeason210 = new RegExp('s09e05', 'gi');
const reglastmeasureSeason211 = new RegExp('s10e05', 'gi');
const reglastmeasureSeason212 = new RegExp('s11e05', 'gi');
const reglastmeasureSeason213 = new RegExp('s12e05', 'gi');
const reglastmeasureSeason214 = new RegExp('s13e05', 'gi');
const reglastmeasureSeason215 = new RegExp('s14e05', 'gi');
const reglastmeasureSeason216 = new RegExp('s15e05', 'gi');
const reglastmeasureSeason217 = new RegExp('s16e05', 'gi');
const reglastmeasureSeason218 = new RegExp('s17e05', 'gi');
const reglastmeasureSeason219 = new RegExp('s18e05', 'gi');
const reglastmeasureSeason220 = new RegExp('s19e05', 'gi');
const reglastmeasureSeason221 = new RegExp('s20e05', 'gi');
const reglastmeasureSeason222 = new RegExp('s21e05', 'gi');
const reglastmeasureSeason223 = new RegExp('s22e05', 'gi');
const reglastmeasureSeason224 = new RegExp('s23e05', 'gi');
const reglastmeasureSeason225 = new RegExp('s24e05', 'gi');
const reglastmeasureSeason226 = new RegExp('s25e05', 'gi');
const reglastmeasureSeason227 = new RegExp('s26e05', 'gi');
const reglastmeasureSeason228 = new RegExp('s27e05', 'gi');
const reglastmeasureSeason229 = new RegExp('s28e05', 'gi');
const reglastmeasureSeason230 = new RegExp('s29e05', 'gi');
const reglastmeasureSeason231 = new RegExp('s30e05', 'gi');

const reglastmeasureSeason232 = new RegExp('s01e06', 'gi');
const reglastmeasureSeason233 = new RegExp('s02e06', 'gi');
const reglastmeasureSeason234 = new RegExp('s03e06', 'gi');
const reglastmeasureSeason235 = new RegExp('s04e06', 'gi');
const reglastmeasureSeason236 = new RegExp('s05e06', 'gi');
const reglastmeasureSeason237 = new RegExp('s06e06', 'gi');
const reglastmeasureSeason238 = new RegExp('s07e06', 'gi');
const reglastmeasureSeason239 = new RegExp('s08e06', 'gi');
const reglastmeasureSeason240 = new RegExp('s09e06', 'gi');
const reglastmeasureSeason241 = new RegExp('s10e06', 'gi');
const reglastmeasureSeason242 = new RegExp('s11e06', 'gi');
const reglastmeasureSeason243 = new RegExp('s12e06', 'gi');
const reglastmeasureSeason244 = new RegExp('s13e06', 'gi');
const reglastmeasureSeason245 = new RegExp('s14e06', 'gi');
const reglastmeasureSeason246 = new RegExp('s15e06', 'gi');
const reglastmeasureSeason247 = new RegExp('s16e06', 'gi');
const reglastmeasureSeason248 = new RegExp('s17e06', 'gi');
const reglastmeasureSeason249 = new RegExp('s18e06', 'gi');
const reglastmeasureSeason250 = new RegExp('s19e06', 'gi');
const reglastmeasureSeason251 = new RegExp('s20e06', 'gi');
const reglastmeasureSeason252 = new RegExp('s21e06', 'gi');
const reglastmeasureSeason253 = new RegExp('s22e06', 'gi');
const reglastmeasureSeason254 = new RegExp('s23e06', 'gi');
const reglastmeasureSeason255 = new RegExp('s24e06', 'gi');
const reglastmeasureSeason256 = new RegExp('s25e06', 'gi');
const reglastmeasureSeason257 = new RegExp('s26e06', 'gi');
const reglastmeasureSeason258 = new RegExp('s27e06', 'gi');
const reglastmeasureSeason259 = new RegExp('s28e06', 'gi');
const reglastmeasureSeason260 = new RegExp('s29e06', 'gi');
const reglastmeasureSeason261 = new RegExp('s30e06', 'gi');

const reglastmeasureSeason262 = new RegExp('s01e07', 'gi');
const reglastmeasureSeason263 = new RegExp('s02e07', 'gi');
const reglastmeasureSeason264 = new RegExp('s03e07', 'gi');
const reglastmeasureSeason265 = new RegExp('s04e07', 'gi');
const reglastmeasureSeason266 = new RegExp('s05e07', 'gi');
const reglastmeasureSeason267 = new RegExp('s06e07', 'gi');
const reglastmeasureSeason268 = new RegExp('s07e07', 'gi');
const reglastmeasureSeason269 = new RegExp('s08e07', 'gi');
const reglastmeasureSeason270 = new RegExp('s09e07', 'gi');
const reglastmeasureSeason271 = new RegExp('s10e07', 'gi');
const reglastmeasureSeason272 = new RegExp('s11e07', 'gi');
const reglastmeasureSeason273 = new RegExp('s12e07', 'gi');
const reglastmeasureSeason274 = new RegExp('s13e07', 'gi');
const reglastmeasureSeason275 = new RegExp('s14e07', 'gi');
const reglastmeasureSeason276 = new RegExp('s15e07', 'gi');
const reglastmeasureSeason277 = new RegExp('s16e07', 'gi');
const reglastmeasureSeason278 = new RegExp('s17e07', 'gi');
const reglastmeasureSeason279 = new RegExp('s18e07', 'gi');
const reglastmeasureSeason280 = new RegExp('s19e07', 'gi');
const reglastmeasureSeason281 = new RegExp('s20e07', 'gi');
const reglastmeasureSeason282 = new RegExp('s21e07', 'gi');
const reglastmeasureSeason283 = new RegExp('s22e07', 'gi');
const reglastmeasureSeason284 = new RegExp('s23e07', 'gi');
const reglastmeasureSeason285 = new RegExp('s24e07', 'gi');
const reglastmeasureSeason286 = new RegExp('s25e07', 'gi');
const reglastmeasureSeason287 = new RegExp('s26e07', 'gi');
const reglastmeasureSeason288 = new RegExp('s27e07', 'gi');
const reglastmeasureSeason289 = new RegExp('s28e07', 'gi');
const reglastmeasureSeason290 = new RegExp('s29e07', 'gi');
const reglastmeasureSeason291 = new RegExp('s30e07', 'gi');

const reglastmeasureSeason292 = new RegExp('s01e08', 'gi');
const reglastmeasureSeason293 = new RegExp('s02e08', 'gi');
const reglastmeasureSeason294 = new RegExp('s03e08', 'gi');
const reglastmeasureSeason295 = new RegExp('s04e08', 'gi');
const reglastmeasureSeason296 = new RegExp('s05e08', 'gi');
const reglastmeasureSeason297 = new RegExp('s06e08', 'gi');
const reglastmeasureSeason298 = new RegExp('s07e08', 'gi');
const reglastmeasureSeason299 = new RegExp('s08e08', 'gi');
const reglastmeasureSeason300 = new RegExp('s09e08', 'gi');
const reglastmeasureSeason301 = new RegExp('s10e08', 'gi');
const reglastmeasureSeason302 = new RegExp('s11e08', 'gi');
const reglastmeasureSeason303 = new RegExp('s12e08', 'gi');
const reglastmeasureSeason304 = new RegExp('s13e08', 'gi');
const reglastmeasureSeason305 = new RegExp('s14e08', 'gi');
const reglastmeasureSeason306 = new RegExp('s15e08', 'gi');
const reglastmeasureSeason307 = new RegExp('s16e08', 'gi');
const reglastmeasureSeason308 = new RegExp('s17e08', 'gi');
const reglastmeasureSeason309 = new RegExp('s18e08', 'gi');
const reglastmeasureSeason310 = new RegExp('s19e08', 'gi');
const reglastmeasureSeason311 = new RegExp('s20e08', 'gi');
const reglastmeasureSeason312 = new RegExp('s21e08', 'gi');
const reglastmeasureSeason313 = new RegExp('s22e08', 'gi');
const reglastmeasureSeason314 = new RegExp('s23e08', 'gi');
const reglastmeasureSeason315 = new RegExp('s24e08', 'gi');
const reglastmeasureSeason316 = new RegExp('s25e08', 'gi');
const reglastmeasureSeason317 = new RegExp('s26e08', 'gi');
const reglastmeasureSeason318 = new RegExp('s27e08', 'gi');
const reglastmeasureSeason319 = new RegExp('s28e08', 'gi');
const reglastmeasureSeason320 = new RegExp('s29e08', 'gi');
const reglastmeasureSeason321 = new RegExp('s30e08', 'gi');

const reglastmeasureSeason322 = new RegExp('s01e09', 'gi');
const reglastmeasureSeason323 = new RegExp('s02e09', 'gi');
const reglastmeasureSeason324 = new RegExp('s03e09', 'gi');
const reglastmeasureSeason325 = new RegExp('s04e09', 'gi');
const reglastmeasureSeason326 = new RegExp('s05e09', 'gi');
const reglastmeasureSeason327 = new RegExp('s06e09', 'gi');
const reglastmeasureSeason328 = new RegExp('s07e09', 'gi');
const reglastmeasureSeason329 = new RegExp('s08e09', 'gi');
const reglastmeasureSeason330 = new RegExp('s09e09', 'gi');
const reglastmeasureSeason331 = new RegExp('s10e09', 'gi');
const reglastmeasureSeason332 = new RegExp('s11e09', 'gi');
const reglastmeasureSeason333 = new RegExp('s12e09', 'gi');
const reglastmeasureSeason334 = new RegExp('s13e09', 'gi');
const reglastmeasureSeason335 = new RegExp('s14e09', 'gi');
const reglastmeasureSeason336 = new RegExp('s15e09', 'gi');
const reglastmeasureSeason337 = new RegExp('s16e09', 'gi');
const reglastmeasureSeason338 = new RegExp('s17e09', 'gi');
const reglastmeasureSeason339 = new RegExp('s18e09', 'gi');
const reglastmeasureSeason340 = new RegExp('s19e09', 'gi');
const reglastmeasureSeason341 = new RegExp('s20e09', 'gi');
const reglastmeasureSeason342 = new RegExp('s21e09', 'gi');
const reglastmeasureSeason343 = new RegExp('s22e09', 'gi');
const reglastmeasureSeason344 = new RegExp('s23e09', 'gi');
const reglastmeasureSeason345 = new RegExp('s24e09', 'gi');
const reglastmeasureSeason346 = new RegExp('s25e09', 'gi');
const reglastmeasureSeason347 = new RegExp('s26e09', 'gi');
const reglastmeasureSeason348 = new RegExp('s27e09', 'gi');
const reglastmeasureSeason349 = new RegExp('s28e09', 'gi');
const reglastmeasureSeason350 = new RegExp('s29e09', 'gi');
const reglastmeasureSeason351 = new RegExp('s30e09', 'gi');

const reglastmeasureSeason352 = new RegExp('s01e1', 'gi');
const reglastmeasureSeason353 = new RegExp('s02e1', 'gi');
const reglastmeasureSeason354 = new RegExp('s03e1', 'gi');
const reglastmeasureSeason355 = new RegExp('s04e1', 'gi');
const reglastmeasureSeason356 = new RegExp('s05e1', 'gi');
const reglastmeasureSeason357 = new RegExp('s06e1', 'gi');
const reglastmeasureSeason358 = new RegExp('s07e1', 'gi');
const reglastmeasureSeason359 = new RegExp('s08e1', 'gi');
const reglastmeasureSeason360 = new RegExp('s09e1', 'gi');
const reglastmeasureSeason361 = new RegExp('s10e1', 'gi');
const reglastmeasureSeason362 = new RegExp('s11e1', 'gi');
const reglastmeasureSeason363 = new RegExp('s12e1', 'gi');
const reglastmeasureSeason364 = new RegExp('s13e1', 'gi');
const reglastmeasureSeason365 = new RegExp('s14e1', 'gi');
const reglastmeasureSeason366 = new RegExp('s15e1', 'gi');
const reglastmeasureSeason367 = new RegExp('s16e1', 'gi');
const reglastmeasureSeason368 = new RegExp('s17e1', 'gi');
const reglastmeasureSeason369 = new RegExp('s18e1', 'gi');
const reglastmeasureSeason370 = new RegExp('s19e1', 'gi');
const reglastmeasureSeason371 = new RegExp('s20e1', 'gi');
const reglastmeasureSeason372 = new RegExp('s21e1', 'gi');
const reglastmeasureSeason373 = new RegExp('s22e1', 'gi');
const reglastmeasureSeason374 = new RegExp('s23e1', 'gi');
const reglastmeasureSeason375 = new RegExp('s24e1', 'gi');
const reglastmeasureSeason376 = new RegExp('s25e1', 'gi');
const reglastmeasureSeason377 = new RegExp('s26e1', 'gi');
const reglastmeasureSeason378 = new RegExp('s27e1', 'gi');
const reglastmeasureSeason379 = new RegExp('s28e1', 'gi');
const reglastmeasureSeason380 = new RegExp('s29e1', 'gi');
const reglastmeasureSeason381 = new RegExp('s30e1', 'gi');

const reglastmeasureSeason382 = new RegExp('s01e2', 'gi');
const reglastmeasureSeason383 = new RegExp('s02e2', 'gi');
const reglastmeasureSeason384 = new RegExp('s03e2', 'gi');
const reglastmeasureSeason385 = new RegExp('s04e2', 'gi');
const reglastmeasureSeason386 = new RegExp('s05e2', 'gi');
const reglastmeasureSeason387 = new RegExp('s06e2', 'gi');
const reglastmeasureSeason388 = new RegExp('s07e2', 'gi');
const reglastmeasureSeason389 = new RegExp('s08e2', 'gi');
const reglastmeasureSeason390 = new RegExp('s09e2', 'gi');
const reglastmeasureSeason391 = new RegExp('s10e2', 'gi');
const reglastmeasureSeason392 = new RegExp('s11e2', 'gi');
const reglastmeasureSeason393 = new RegExp('s12e2', 'gi');
const reglastmeasureSeason394 = new RegExp('s13e2', 'gi');
const reglastmeasureSeason395 = new RegExp('s14e2', 'gi');
const reglastmeasureSeason396 = new RegExp('s15e2', 'gi');
const reglastmeasureSeason397 = new RegExp('s16e2', 'gi');
const reglastmeasureSeason398 = new RegExp('s17e2', 'gi');
const reglastmeasureSeason399 = new RegExp('s18e2', 'gi');
const reglastmeasureSeason400 = new RegExp('s19e2', 'gi');
const reglastmeasureSeason401 = new RegExp('s20e2', 'gi');
const reglastmeasureSeason402 = new RegExp('s21e2', 'gi');
const reglastmeasureSeason403 = new RegExp('s22e2', 'gi');
const reglastmeasureSeason404 = new RegExp('s23e2', 'gi');
const reglastmeasureSeason405 = new RegExp('s24e2', 'gi');
const reglastmeasureSeason406 = new RegExp('s25e2', 'gi');
const reglastmeasureSeason407 = new RegExp('s26e2', 'gi');
const reglastmeasureSeason408 = new RegExp('s27e2', 'gi');
const reglastmeasureSeason409 = new RegExp('s28e2', 'gi');
const reglastmeasureSeason410 = new RegExp('s29e2', 'gi');
const reglastmeasureSeason411 = new RegExp('s30e2', 'gi');

const reglastmeasureSeason412 = new RegExp('s01e3', 'gi');
const reglastmeasureSeason413 = new RegExp('s02e3', 'gi');
const reglastmeasureSeason414 = new RegExp('s03e3', 'gi');
const reglastmeasureSeason415 = new RegExp('s04e3', 'gi');
const reglastmeasureSeason416 = new RegExp('s05e3', 'gi');
const reglastmeasureSeason417 = new RegExp('s06e3', 'gi');
const reglastmeasureSeason418 = new RegExp('s07e3', 'gi');
const reglastmeasureSeason419 = new RegExp('s08e3', 'gi');
const reglastmeasureSeason420 = new RegExp('s09e3', 'gi');
const reglastmeasureSeason421 = new RegExp('s10e3', 'gi');
const reglastmeasureSeason422 = new RegExp('s11e3', 'gi');
const reglastmeasureSeason423 = new RegExp('s12e3', 'gi');
const reglastmeasureSeason424 = new RegExp('s13e3', 'gi');
const reglastmeasureSeason425 = new RegExp('s14e3', 'gi');
const reglastmeasureSeason426 = new RegExp('s15e3', 'gi');
const reglastmeasureSeason427 = new RegExp('s16e3', 'gi');
const reglastmeasureSeason428 = new RegExp('s17e3', 'gi');
const reglastmeasureSeason429 = new RegExp('s18e3', 'gi');
const reglastmeasureSeason430 = new RegExp('s19e3', 'gi');
const reglastmeasureSeason431 = new RegExp('s20e3', 'gi');
const reglastmeasureSeason432 = new RegExp('s21e3', 'gi');
const reglastmeasureSeason433 = new RegExp('s22e3', 'gi');
const reglastmeasureSeason434 = new RegExp('s23e3', 'gi');
const reglastmeasureSeason435 = new RegExp('s24e3', 'gi');
const reglastmeasureSeason436 = new RegExp('s25e3', 'gi');
const reglastmeasureSeason437 = new RegExp('s26e3', 'gi');
const reglastmeasureSeason438 = new RegExp('s27e3', 'gi');
const reglastmeasureSeason439 = new RegExp('s28e3', 'gi');
const reglastmeasureSeason440 = new RegExp('s29e3', 'gi');
const reglastmeasureSeason441 = new RegExp('s30e3', 'gi');

const reglastmeasureSeason442 = new RegExp('s01e4', 'gi');
const reglastmeasureSeason443 = new RegExp('s02e4', 'gi');
const reglastmeasureSeason444 = new RegExp('s03e4', 'gi');
const reglastmeasureSeason445 = new RegExp('s04e4', 'gi');
const reglastmeasureSeason446 = new RegExp('s05e4', 'gi');
const reglastmeasureSeason447 = new RegExp('s06e4', 'gi');
const reglastmeasureSeason448 = new RegExp('s07e4', 'gi');
const reglastmeasureSeason449 = new RegExp('s08e4', 'gi');
const reglastmeasureSeason450 = new RegExp('s09e4', 'gi');
const reglastmeasureSeason451 = new RegExp('s10e4', 'gi');
const reglastmeasureSeason452 = new RegExp('s11e4', 'gi');
const reglastmeasureSeason453 = new RegExp('s12e4', 'gi');
const reglastmeasureSeason454 = new RegExp('s13e4', 'gi');
const reglastmeasureSeason455 = new RegExp('s14e4', 'gi');
const reglastmeasureSeason456 = new RegExp('s15e4', 'gi');
const reglastmeasureSeason457 = new RegExp('s16e4', 'gi');
const reglastmeasureSeason458 = new RegExp('s17e4', 'gi');
const reglastmeasureSeason459 = new RegExp('s18e4', 'gi');
const reglastmeasureSeason460 = new RegExp('s19e4', 'gi');
const reglastmeasureSeason461 = new RegExp('s20e4', 'gi');
const reglastmeasureSeason462 = new RegExp('s21e4', 'gi');
const reglastmeasureSeason463 = new RegExp('s22e4', 'gi');
const reglastmeasureSeason464 = new RegExp('s23e4', 'gi');
const reglastmeasureSeason465 = new RegExp('s24e4', 'gi');
const reglastmeasureSeason466 = new RegExp('s25e4', 'gi');
const reglastmeasureSeason467 = new RegExp('s26e4', 'gi');
const reglastmeasureSeason468 = new RegExp('s27e4', 'gi');
const reglastmeasureSeason469 = new RegExp('s28e4', 'gi');
const reglastmeasureSeason470 = new RegExp('s29e4', 'gi');
const reglastmeasureSeason471 = new RegExp('s30e4', 'gi');

const reglastmeasureSeason472 = new RegExp('s01e5', 'gi');
const reglastmeasureSeason473 = new RegExp('s02e5', 'gi');
const reglastmeasureSeason474 = new RegExp('s03e5', 'gi');
const reglastmeasureSeason475 = new RegExp('s04e5', 'gi');
const reglastmeasureSeason476 = new RegExp('s05e5', 'gi');
const reglastmeasureSeason477 = new RegExp('s06e5', 'gi');
const reglastmeasureSeason478 = new RegExp('s07e5', 'gi');
const reglastmeasureSeason479 = new RegExp('s08e5', 'gi');
const reglastmeasureSeason480 = new RegExp('s09e5', 'gi');
const reglastmeasureSeason481 = new RegExp('s10e5', 'gi');
const reglastmeasureSeason482 = new RegExp('s11e5', 'gi');
const reglastmeasureSeason483 = new RegExp('s12e5', 'gi');
const reglastmeasureSeason484 = new RegExp('s13e5', 'gi');
const reglastmeasureSeason485 = new RegExp('s14e5', 'gi');
const reglastmeasureSeason486 = new RegExp('s15e5', 'gi');
const reglastmeasureSeason487 = new RegExp('s16e5', 'gi');
const reglastmeasureSeason488 = new RegExp('s17e5', 'gi');
const reglastmeasureSeason489 = new RegExp('s18e5', 'gi');
const reglastmeasureSeason490 = new RegExp('s19e5', 'gi');
const reglastmeasureSeason491 = new RegExp('s20e5', 'gi');
const reglastmeasureSeason492 = new RegExp('s21e5', 'gi');
const reglastmeasureSeason493 = new RegExp('s22e5', 'gi');
const reglastmeasureSeason494 = new RegExp('s23e5', 'gi');
const reglastmeasureSeason495 = new RegExp('s24e5', 'gi');
const reglastmeasureSeason496 = new RegExp('s25e5', 'gi');
const reglastmeasureSeason497 = new RegExp('s26e5', 'gi');
const reglastmeasureSeason498 = new RegExp('s27e5', 'gi');
const reglastmeasureSeason499 = new RegExp('s28e5', 'gi');
const reglastmeasureSeason500 = new RegExp('s29e5', 'gi');
const reglastmeasureSeason501 = new RegExp('s30e5', 'gi');

const reglastmeasureSeason502 = new RegExp('s01e6', 'gi');
const reglastmeasureSeason503 = new RegExp('s02e6', 'gi');
const reglastmeasureSeason504 = new RegExp('s03e6', 'gi');
const reglastmeasureSeason505 = new RegExp('s04e6', 'gi');
const reglastmeasureSeason506 = new RegExp('s05e6', 'gi');
const reglastmeasureSeason507 = new RegExp('s06e6', 'gi');
const reglastmeasureSeason508 = new RegExp('s07e6', 'gi');
const reglastmeasureSeason509 = new RegExp('s08e6', 'gi');
const reglastmeasureSeason510 = new RegExp('s09e6', 'gi');
const reglastmeasureSeason511 = new RegExp('s10e6', 'gi');
const reglastmeasureSeason512 = new RegExp('s11e6', 'gi');
const reglastmeasureSeason513 = new RegExp('s12e6', 'gi');
const reglastmeasureSeason514 = new RegExp('s13e6', 'gi');
const reglastmeasureSeason515 = new RegExp('s14e6', 'gi');
const reglastmeasureSeason516 = new RegExp('s15e6', 'gi');
const reglastmeasureSeason517 = new RegExp('s16e6', 'gi');
const reglastmeasureSeason518 = new RegExp('s17e6', 'gi');
const reglastmeasureSeason519 = new RegExp('s18e6', 'gi');
const reglastmeasureSeason520 = new RegExp('s19e6', 'gi');
const reglastmeasureSeason521 = new RegExp('s20e6', 'gi');
const reglastmeasureSeason522 = new RegExp('s21e6', 'gi');
const reglastmeasureSeason523 = new RegExp('s22e6', 'gi');
const reglastmeasureSeason524 = new RegExp('s23e6', 'gi');
const reglastmeasureSeason525 = new RegExp('s24e6', 'gi');
const reglastmeasureSeason526 = new RegExp('s25e6', 'gi');
const reglastmeasureSeason527 = new RegExp('s26e6', 'gi');
const reglastmeasureSeason528 = new RegExp('s27e6', 'gi');
const reglastmeasureSeason529 = new RegExp('s28e6', 'gi');
const reglastmeasureSeason530 = new RegExp('s29e6', 'gi');
const reglastmeasureSeason531 = new RegExp('s30e6', 'gi');

const reglastmeasureSeason532 = new RegExp('s01e7', 'gi');
const reglastmeasureSeason533 = new RegExp('s02e7', 'gi');
const reglastmeasureSeason534 = new RegExp('s03e7', 'gi');
const reglastmeasureSeason535 = new RegExp('s04e7', 'gi');
const reglastmeasureSeason536 = new RegExp('s05e7', 'gi');
const reglastmeasureSeason537 = new RegExp('s06e7', 'gi');
const reglastmeasureSeason538 = new RegExp('s07e7', 'gi');
const reglastmeasureSeason539 = new RegExp('s08e7', 'gi');
const reglastmeasureSeason540 = new RegExp('s09e7', 'gi');
const reglastmeasureSeason541 = new RegExp('s10e7', 'gi');
const reglastmeasureSeason542 = new RegExp('s11e7', 'gi');
const reglastmeasureSeason543 = new RegExp('s12e7', 'gi');
const reglastmeasureSeason544 = new RegExp('s13e7', 'gi');
const reglastmeasureSeason545 = new RegExp('s14e7', 'gi');
const reglastmeasureSeason546 = new RegExp('s15e7', 'gi');
const reglastmeasureSeason547 = new RegExp('s16e7', 'gi');
const reglastmeasureSeason548 = new RegExp('s17e7', 'gi');
const reglastmeasureSeason549 = new RegExp('s18e7', 'gi');
const reglastmeasureSeason550 = new RegExp('s19e7', 'gi');
const reglastmeasureSeason551 = new RegExp('s20e7', 'gi');
const reglastmeasureSeason552 = new RegExp('s21e7', 'gi');
const reglastmeasureSeason553 = new RegExp('s22e7', 'gi');
const reglastmeasureSeason554 = new RegExp('s23e7', 'gi');
const reglastmeasureSeason555 = new RegExp('s24e7', 'gi');
const reglastmeasureSeason556 = new RegExp('s25e7', 'gi');
const reglastmeasureSeason557 = new RegExp('s26e7', 'gi');
const reglastmeasureSeason558 = new RegExp('s27e7', 'gi');
const reglastmeasureSeason559 = new RegExp('s28e7', 'gi');
const reglastmeasureSeason560 = new RegExp('s29e7', 'gi');
const reglastmeasureSeason561 = new RegExp('s30e7', 'gi');

const reglastmeasureSeason562 = new RegExp('s01e8', 'gi');
const reglastmeasureSeason563 = new RegExp('s02e8', 'gi');
const reglastmeasureSeason564 = new RegExp('s03e8', 'gi');
const reglastmeasureSeason565 = new RegExp('s04e8', 'gi');
const reglastmeasureSeason566 = new RegExp('s05e8', 'gi');
const reglastmeasureSeason567 = new RegExp('s06e8', 'gi');
const reglastmeasureSeason568 = new RegExp('s07e8', 'gi');
const reglastmeasureSeason569 = new RegExp('s08e8', 'gi');
const reglastmeasureSeason570 = new RegExp('s09e8', 'gi');
const reglastmeasureSeason571 = new RegExp('s10e8', 'gi');
const reglastmeasureSeason572 = new RegExp('s11e8', 'gi');
const reglastmeasureSeason573 = new RegExp('s12e8', 'gi');
const reglastmeasureSeason574 = new RegExp('s13e8', 'gi');
const reglastmeasureSeason575 = new RegExp('s14e8', 'gi');
const reglastmeasureSeason576 = new RegExp('s15e8', 'gi');
const reglastmeasureSeason577 = new RegExp('s16e8', 'gi');
const reglastmeasureSeason578 = new RegExp('s17e8', 'gi');
const reglastmeasureSeason579 = new RegExp('s18e8', 'gi');
const reglastmeasureSeason580 = new RegExp('s19e8', 'gi');
const reglastmeasureSeason581 = new RegExp('s20e8', 'gi');
const reglastmeasureSeason582 = new RegExp('s21e8', 'gi');
const reglastmeasureSeason583 = new RegExp('s22e8', 'gi');
const reglastmeasureSeason584 = new RegExp('s23e8', 'gi');
const reglastmeasureSeason585 = new RegExp('s24e8', 'gi');
const reglastmeasureSeason586 = new RegExp('s25e8', 'gi');
const reglastmeasureSeason587 = new RegExp('s26e8', 'gi');
const reglastmeasureSeason588 = new RegExp('s27e8', 'gi');
const reglastmeasureSeason589 = new RegExp('s28e8', 'gi');
const reglastmeasureSeason590 = new RegExp('s29e8', 'gi');
const reglastmeasureSeason591 = new RegExp('s30e8', 'gi');

const reglastmeasureSeason592 = new RegExp('s01e9', 'gi');
const reglastmeasureSeason593 = new RegExp('s02e9', 'gi');
const reglastmeasureSeason594 = new RegExp('s03e9', 'gi');
const reglastmeasureSeason595 = new RegExp('s04e9', 'gi');
const reglastmeasureSeason596 = new RegExp('s05e9', 'gi');
const reglastmeasureSeason597 = new RegExp('s06e9', 'gi');
const reglastmeasureSeason598 = new RegExp('s07e9', 'gi');
const reglastmeasureSeason599 = new RegExp('s08e9', 'gi');
const reglastmeasureSeason600 = new RegExp('s09e9', 'gi');
const reglastmeasureSeason601 = new RegExp('s10e9', 'gi');
const reglastmeasureSeason602 = new RegExp('s11e9', 'gi');
const reglastmeasureSeason603 = new RegExp('s12e9', 'gi');
const reglastmeasureSeason604 = new RegExp('s13e9', 'gi');
const reglastmeasureSeason605 = new RegExp('s14e9', 'gi');
const reglastmeasureSeason606 = new RegExp('s15e9', 'gi');
const reglastmeasureSeason607 = new RegExp('s16e9', 'gi');
const reglastmeasureSeason608 = new RegExp('s17e9', 'gi');
const reglastmeasureSeason609 = new RegExp('s18e9', 'gi');
const reglastmeasureSeason610 = new RegExp('s19e9', 'gi');
const reglastmeasureSeason611 = new RegExp('s20e9', 'gi');
const reglastmeasureSeason612 = new RegExp('s21e9', 'gi');
const reglastmeasureSeason613 = new RegExp('s22e9', 'gi');
const reglastmeasureSeason614 = new RegExp('s23e9', 'gi');
const reglastmeasureSeason615 = new RegExp('s24e9', 'gi');
const reglastmeasureSeason616 = new RegExp('s25e9', 'gi');
const reglastmeasureSeason617 = new RegExp('s26e9', 'gi');
const reglastmeasureSeason618 = new RegExp('s27e9', 'gi');
const reglastmeasureSeason619 = new RegExp('s28e9', 'gi');
const reglastmeasureSeason620 = new RegExp('s29e9', 'gi');
const reglastmeasureSeason621 = new RegExp('s30e9', 'gi');

const reglastmeasurejkr1 = new RegExp(',jkr ', 'gi');
const reglastmeasurejkrslashfirst = new RegExp('/jkr ', 'gi');
const reglastmeasurejkr2 = new RegExp('!jkr ', 'gi');
const reglastmeasurejkr3 = new RegExp('\\?jkr ', 'gi');
const reglastmeasurejkr4 = new RegExp('\\.jkr ', 'gi');
const reglastmeasurejkr5 = new RegExp(' jkr ', 'gi');
const reglastmeasurejkr6 = new RegExp(' jkr\\.', 'gi');
const reglastmeasurejkr7 = new RegExp(' jkr,', 'gi');
const reglastmeasurejkr8 = new RegExp(' jkr!', 'gi');
const reglastmeasurejkr9 = new RegExp(' jkr\\?', 'gi');
const reglastmeasurejkrslashafter = new RegExp(' jkr/', 'gi');

const reglastmeasurehours1 = new RegExp('1h ', 'gi');
const reglastmeasurehours2 = new RegExp('2h ', 'gi');
const reglastmeasurehours3 = new RegExp('3h ', 'gi');
const reglastmeasurehours4 = new RegExp('4h ', 'gi');
const reglastmeasurehours5 = new RegExp('5h ', 'gi');
const reglastmeasurehours6 = new RegExp('6h ', 'gi');
const reglastmeasurehours7 = new RegExp('7h ', 'gi');
const reglastmeasurehours8 = new RegExp('8h ', 'gi');
const reglastmeasurehours9 = new RegExp('9h ', 'gi');
const reglastmeasurehours0 = new RegExp('0h ', 'gi');
const reglastmeasurehours1point = new RegExp('1h\\.', 'gi');
const reglastmeasurehours2point = new RegExp('2h\\.', 'gi');
const reglastmeasurehours3point = new RegExp('3h\\.', 'gi');
const reglastmeasurehours4point = new RegExp('4h\\.', 'gi');
const reglastmeasurehours5point = new RegExp('5h\\.', 'gi');
const reglastmeasurehours6point = new RegExp('6h\\.', 'gi');
const reglastmeasurehours7point = new RegExp('7h\\.', 'gi');
const reglastmeasurehours8point = new RegExp('8h\\.', 'gi');
const reglastmeasurehours9point = new RegExp('9h\\.', 'gi');
const reglastmeasurehours0point = new RegExp('0h\\.', 'gi');
const reglastmeasurehours1virgola = new RegExp('1h,', 'gi');
const reglastmeasurehours2virgola = new RegExp('2h,', 'gi');
const reglastmeasurehours3virgola = new RegExp('3h,', 'gi');
const reglastmeasurehours4virgola = new RegExp('4h,', 'gi');
const reglastmeasurehours5virgola = new RegExp('5h,', 'gi');
const reglastmeasurehours6virgola = new RegExp('6h,', 'gi');
const reglastmeasurehours7virgola = new RegExp('7h,', 'gi');
const reglastmeasurehours8virgola = new RegExp('8h,', 'gi');
const reglastmeasurehours9virgola = new RegExp('9h,', 'gi');
const reglastmeasurehours0virgola = new RegExp('0h,', 'gi');
const reglastmeasurehours1slash = new RegExp('1h/', 'gi');
const reglastmeasurehours2slash = new RegExp('2h/', 'gi');
const reglastmeasurehours3slash = new RegExp('3h/', 'gi');
const reglastmeasurehours4slash = new RegExp('4h/', 'gi');
const reglastmeasurehours5slash = new RegExp('5h/', 'gi');
const reglastmeasurehours6slash = new RegExp('6h/', 'gi');
const reglastmeasurehours7slash = new RegExp('7h/', 'gi');
const reglastmeasurehours8slash = new RegExp('8h/', 'gi');
const reglastmeasurehours9slash = new RegExp('9h/', 'gi');
const reglastmeasurehours0slash = new RegExp('0h/', 'gi');
const reglastmeasurehours1question = new RegExp('1h\\?', 'gi');
const reglastmeasurehours2question = new RegExp('2h\\?', 'gi');
const reglastmeasurehours3question = new RegExp('3h\\?', 'gi');
const reglastmeasurehours4question = new RegExp('4h\\?', 'gi');
const reglastmeasurehours5question = new RegExp('5h\\?', 'gi');
const reglastmeasurehours6question = new RegExp('6h\\?', 'gi');
const reglastmeasurehours7question = new RegExp('7h\\?', 'gi');
const reglastmeasurehours8question = new RegExp('8h\\?', 'gi');
const reglastmeasurehours9question = new RegExp('9h\\?', 'gi');
const reglastmeasurehours0question = new RegExp('0h\\?', 'gi');
const reglastmeasurehours1exclam = new RegExp('1h!', 'gi');
const reglastmeasurehours2exclam = new RegExp('2h!', 'gi');
const reglastmeasurehours3exclam = new RegExp('3h!', 'gi');
const reglastmeasurehours4exclam = new RegExp('4h!', 'gi');
const reglastmeasurehours5exclam = new RegExp('5h!', 'gi');
const reglastmeasurehours6exclam = new RegExp('6h!', 'gi');
const reglastmeasurehours7exclam = new RegExp('7h!', 'gi');
const reglastmeasurehours8exclam = new RegExp('8h!', 'gi');
const reglastmeasurehours9exclam = new RegExp('9h!', 'gi');
const reglastmeasurehours0exclam = new RegExp('0h!', 'gi');
const reglastmeasurehours1space = new RegExp('1 h ', 'gi');
const reglastmeasurehours2space = new RegExp('2 h ', 'gi');
const reglastmeasurehours3space = new RegExp('3 h ', 'gi');
const reglastmeasurehours4space = new RegExp('4 h ', 'gi');
const reglastmeasurehours5space = new RegExp('5 h ', 'gi');
const reglastmeasurehours6space = new RegExp('6 h ', 'gi');
const reglastmeasurehours7space = new RegExp('7 h ', 'gi');
const reglastmeasurehours8space = new RegExp('8 h ', 'gi');
const reglastmeasurehours9space = new RegExp('9 h ', 'gi');
const reglastmeasurehours0space = new RegExp('0 h ', 'gi');
const reglastmeasurehours1exclamspace = new RegExp('1 h!', 'gi');
const reglastmeasurehours2exclamspace = new RegExp('2 h!', 'gi');
const reglastmeasurehours3exclamspace = new RegExp('3 h!', 'gi');
const reglastmeasurehours4exclamspace = new RegExp('4 h!', 'gi');
const reglastmeasurehours5exclamspace = new RegExp('5 h!', 'gi');
const reglastmeasurehours6exclamspace = new RegExp('6 h!', 'gi');
const reglastmeasurehours7exclamspace = new RegExp('7 h!', 'gi');
const reglastmeasurehours8exclamspace = new RegExp('8 h!', 'gi');
const reglastmeasurehours9exclamspace = new RegExp('9 h!', 'gi');
const reglastmeasurehours0exclamspace = new RegExp('0 h!', 'gi');
const reglastmeasurehours1slashspace = new RegExp('1 h/', 'gi');
const reglastmeasurehours2slashspace = new RegExp('2 h/', 'gi');
const reglastmeasurehours3slashspace = new RegExp('3 h/', 'gi');
const reglastmeasurehours4slashspace = new RegExp('4 h/', 'gi');
const reglastmeasurehours5slashspace = new RegExp('5 h/', 'gi');
const reglastmeasurehours6slashspace = new RegExp('6 h/', 'gi');
const reglastmeasurehours7slashspace = new RegExp('7 h/', 'gi');
const reglastmeasurehours8slashspace = new RegExp('8 h/', 'gi');
const reglastmeasurehours9slashspace = new RegExp('9 h/', 'gi');
const reglastmeasurehours0slashspace = new RegExp('0 h/', 'gi');
const reglastmeasurehours1virgolaspace = new RegExp('1 h,', 'gi');
const reglastmeasurehours2virgolaspace = new RegExp('2 h,', 'gi');
const reglastmeasurehours3virgolaspace = new RegExp('3 h,', 'gi');
const reglastmeasurehours4virgolaspace = new RegExp('4 h,', 'gi');
const reglastmeasurehours5virgolaspace = new RegExp('5 h,', 'gi');
const reglastmeasurehours6virgolaspace = new RegExp('6 h,', 'gi');
const reglastmeasurehours7virgolaspace = new RegExp('7 h,', 'gi');
const reglastmeasurehours8virgolaspace = new RegExp('8 h,', 'gi');
const reglastmeasurehours9virgolaspace = new RegExp('9 h,', 'gi');
const reglastmeasurehours0virgolaspace = new RegExp('0 h,', 'gi');
const reglastmeasurehours1pointspace = new RegExp('1 h\\.', 'gi');
const reglastmeasurehours2pointspace = new RegExp('2 h\\.', 'gi');
const reglastmeasurehours3pointspace = new RegExp('3 h\\.', 'gi');
const reglastmeasurehours4pointspace = new RegExp('4 h\\.', 'gi');
const reglastmeasurehours5pointspace = new RegExp('5 h\\.', 'gi');
const reglastmeasurehours6pointspace = new RegExp('6 h\\.', 'gi');
const reglastmeasurehours7pointspace = new RegExp('7 h\\.', 'gi');
const reglastmeasurehours8pointspace = new RegExp('8 h\\.', 'gi');
const reglastmeasurehours9pointspace = new RegExp('9 h\\.', 'gi');
const reglastmeasurehours0pointspace = new RegExp('0 h\\.', 'gi');
const reglastmeasurehours1questionspace = new RegExp('1 h\\?', 'gi');
const reglastmeasurehours2questionspace = new RegExp('2 h\\?', 'gi');
const reglastmeasurehours3questionspace = new RegExp('3 h\\?', 'gi');
const reglastmeasurehours4questionspace = new RegExp('4 h\\?', 'gi');
const reglastmeasurehours5questionspace = new RegExp('5 h\\?', 'gi');
const reglastmeasurehours6questionspace = new RegExp('6 h\\?', 'gi');
const reglastmeasurehours7questionspace = new RegExp('7 h\\?', 'gi');
const reglastmeasurehours8questionspace = new RegExp('8 h\\?', 'gi');
const reglastmeasurehours9questionspace = new RegExp('9 h\\?', 'gi');
const reglastmeasurehours0questionspace = new RegExp('0 h\\?', 'gi');

const reglastmeasurehourshr1 = new RegExp('1hr ', 'gi');
const reglastmeasurehourshr2 = new RegExp('2hr ', 'gi');
const reglastmeasurehourshr3 = new RegExp('3hr ', 'gi');
const reglastmeasurehourshr4 = new RegExp('4hr ', 'gi');
const reglastmeasurehourshr5 = new RegExp('5hr ', 'gi');
const reglastmeasurehourshr6 = new RegExp('6hr ', 'gi');
const reglastmeasurehourshr7 = new RegExp('7hr ', 'gi');
const reglastmeasurehourshr8 = new RegExp('8hr ', 'gi');
const reglastmeasurehourshr9 = new RegExp('9hr ', 'gi');
const reglastmeasurehourshr0 = new RegExp('0hr ', 'gi');
const reglastmeasurehourshr1point = new RegExp('1hr\\.', 'gi');
const reglastmeasurehourshr2point = new RegExp('2hr\\.', 'gi');
const reglastmeasurehourshr3point = new RegExp('3hr\\.', 'gi');
const reglastmeasurehourshr4point = new RegExp('4hr\\.', 'gi');
const reglastmeasurehourshr5point = new RegExp('5hr\\.', 'gi');
const reglastmeasurehourshr6point = new RegExp('6hr\\.', 'gi');
const reglastmeasurehourshr7point = new RegExp('7hr\\.', 'gi');
const reglastmeasurehourshr8point = new RegExp('8hr\\.', 'gi');
const reglastmeasurehourshr9point = new RegExp('9hr\\.', 'gi');
const reglastmeasurehourshr0point = new RegExp('0hr\\.', 'gi');
const reglastmeasurehourshr1virgola = new RegExp('1hr,', 'gi');
const reglastmeasurehourshr2virgola = new RegExp('2hr,', 'gi');
const reglastmeasurehourshr3virgola = new RegExp('3hr,', 'gi');
const reglastmeasurehourshr4virgola = new RegExp('4hr,', 'gi');
const reglastmeasurehourshr5virgola = new RegExp('5hr,', 'gi');
const reglastmeasurehourshr6virgola = new RegExp('6hr,', 'gi');
const reglastmeasurehourshr7virgola = new RegExp('7hr,', 'gi');
const reglastmeasurehourshr8virgola = new RegExp('8hr,', 'gi');
const reglastmeasurehourshr9virgola = new RegExp('9hr,', 'gi');
const reglastmeasurehourshr0virgola = new RegExp('0hr,', 'gi');
const reglastmeasurehourshr1slash = new RegExp('1hr/', 'gi');
const reglastmeasurehourshr2slash = new RegExp('2hr/', 'gi');
const reglastmeasurehourshr3slash = new RegExp('3hr/', 'gi');
const reglastmeasurehourshr4slash = new RegExp('4hr/', 'gi');
const reglastmeasurehourshr5slash = new RegExp('5hr/', 'gi');
const reglastmeasurehourshr6slash = new RegExp('6hr/', 'gi');
const reglastmeasurehourshr7slash = new RegExp('7hr/', 'gi');
const reglastmeasurehourshr8slash = new RegExp('8hr/', 'gi');
const reglastmeasurehourshr9slash = new RegExp('9hr/', 'gi');
const reglastmeasurehourshr0slash = new RegExp('0hr/', 'gi');
const reglastmeasurehourshr1question = new RegExp('1hr\\?', 'gi');
const reglastmeasurehourshr2question = new RegExp('2hr\\?', 'gi');
const reglastmeasurehourshr3question = new RegExp('3hr\\?', 'gi');
const reglastmeasurehourshr4question = new RegExp('4hr\\?', 'gi');
const reglastmeasurehourshr5question = new RegExp('5hr\\?', 'gi');
const reglastmeasurehourshr6question = new RegExp('6hr\\?', 'gi');
const reglastmeasurehourshr7question = new RegExp('7hr\\?', 'gi');
const reglastmeasurehourshr8question = new RegExp('8hr\\?', 'gi');
const reglastmeasurehourshr9question = new RegExp('9hr\\?', 'gi');
const reglastmeasurehourshr0question = new RegExp('0hr\\?', 'gi');
const reglastmeasurehourshr1exclam = new RegExp('1hr!', 'gi');
const reglastmeasurehourshr2exclam = new RegExp('2hr!', 'gi');
const reglastmeasurehourshr3exclam = new RegExp('3hr!', 'gi');
const reglastmeasurehourshr4exclam = new RegExp('4hr!', 'gi');
const reglastmeasurehourshr5exclam = new RegExp('5hr!', 'gi');
const reglastmeasurehourshr6exclam = new RegExp('6hr!', 'gi');
const reglastmeasurehourshr7exclam = new RegExp('7hr!', 'gi');
const reglastmeasurehourshr8exclam = new RegExp('8hr!', 'gi');
const reglastmeasurehourshr9exclam = new RegExp('9hr!', 'gi');
const reglastmeasurehourshr0exclam = new RegExp('0hr!', 'gi');
const reglastmeasurehourshr1space = new RegExp('1 hr ', 'gi');
const reglastmeasurehourshr2space = new RegExp('2 hr ', 'gi');
const reglastmeasurehourshr3space = new RegExp('3 hr ', 'gi');
const reglastmeasurehourshr4space = new RegExp('4 hr ', 'gi');
const reglastmeasurehourshr5space = new RegExp('5 hr ', 'gi');
const reglastmeasurehourshr6space = new RegExp('6 hr ', 'gi');
const reglastmeasurehourshr7space = new RegExp('7 hr ', 'gi');
const reglastmeasurehourshr8space = new RegExp('8 hr ', 'gi');
const reglastmeasurehourshr9space = new RegExp('9 hr ', 'gi');
const reglastmeasurehourshr0space = new RegExp('0 hr ', 'gi');
const reglastmeasurehourshr1exclamspace = new RegExp('1 hr!', 'gi');
const reglastmeasurehourshr2exclamspace = new RegExp('2 hr!', 'gi');
const reglastmeasurehourshr3exclamspace = new RegExp('3 hr!', 'gi');
const reglastmeasurehourshr4exclamspace = new RegExp('4 hr!', 'gi');
const reglastmeasurehourshr5exclamspace = new RegExp('5 hr!', 'gi');
const reglastmeasurehourshr6exclamspace = new RegExp('6 hr!', 'gi');
const reglastmeasurehourshr7exclamspace = new RegExp('7 hr!', 'gi');
const reglastmeasurehourshr8exclamspace = new RegExp('8 hr!', 'gi');
const reglastmeasurehourshr9exclamspace = new RegExp('9 hr!', 'gi');
const reglastmeasurehourshr0exclamspace = new RegExp('0 hr!', 'gi');
const reglastmeasurehourshr1slashspace = new RegExp('1 hr/', 'gi');
const reglastmeasurehourshr2slashspace = new RegExp('2 hr/', 'gi');
const reglastmeasurehourshr3slashspace = new RegExp('3 hr/', 'gi');
const reglastmeasurehourshr4slashspace = new RegExp('4 hr/', 'gi');
const reglastmeasurehourshr5slashspace = new RegExp('5 hr/', 'gi');
const reglastmeasurehourshr6slashspace = new RegExp('6 hr/', 'gi');
const reglastmeasurehourshr7slashspace = new RegExp('7 hr/', 'gi');
const reglastmeasurehourshr8slashspace = new RegExp('8 hr/', 'gi');
const reglastmeasurehourshr9slashspace = new RegExp('9 hr/', 'gi');
const reglastmeasurehourshr0slashspace = new RegExp('0 hr/', 'gi');
const reglastmeasurehourshr1virgolaspace = new RegExp('1 hr,', 'gi');
const reglastmeasurehourshr2virgolaspace = new RegExp('2 hr,', 'gi');
const reglastmeasurehourshr3virgolaspace = new RegExp('3 hr,', 'gi');
const reglastmeasurehourshr4virgolaspace = new RegExp('4 hr,', 'gi');
const reglastmeasurehourshr5virgolaspace = new RegExp('5 hr,', 'gi');
const reglastmeasurehourshr6virgolaspace = new RegExp('6 hr,', 'gi');
const reglastmeasurehourshr7virgolaspace = new RegExp('7 hr,', 'gi');
const reglastmeasurehourshr8virgolaspace = new RegExp('8 hr,', 'gi');
const reglastmeasurehourshr9virgolaspace = new RegExp('9 hr,', 'gi');
const reglastmeasurehourshr0virgolaspace = new RegExp('0 hr,', 'gi');
const reglastmeasurehourshr1pointspace = new RegExp('1 hr\\.', 'gi');
const reglastmeasurehourshr2pointspace = new RegExp('2 hr\\.', 'gi');
const reglastmeasurehourshr3pointspace = new RegExp('3 hr\\.', 'gi');
const reglastmeasurehourshr4pointspace = new RegExp('4 hr\\.', 'gi');
const reglastmeasurehourshr5pointspace = new RegExp('5 hr\\.', 'gi');
const reglastmeasurehourshr6pointspace = new RegExp('6 hr\\.', 'gi');
const reglastmeasurehourshr7pointspace = new RegExp('7 hr\\.', 'gi');
const reglastmeasurehourshr8pointspace = new RegExp('8 hr\\.', 'gi');
const reglastmeasurehourshr9pointspace = new RegExp('9 hr\\.', 'gi');
const reglastmeasurehourshr0pointspace = new RegExp('0 hr\\.', 'gi');
const reglastmeasurehourshr1questionspace = new RegExp('1 hr\\?', 'gi');
const reglastmeasurehourshr2questionspace = new RegExp('2 hr\\?', 'gi');
const reglastmeasurehourshr3questionspace = new RegExp('3 hr\\?', 'gi');
const reglastmeasurehourshr4questionspace = new RegExp('4 hr\\?', 'gi');
const reglastmeasurehourshr5questionspace = new RegExp('5 hr\\?', 'gi');
const reglastmeasurehourshr6questionspace = new RegExp('6 hr\\?', 'gi');
const reglastmeasurehourshr7questionspace = new RegExp('7 hr\\?', 'gi');
const reglastmeasurehourshr8questionspace = new RegExp('8 hr\\?', 'gi');
const reglastmeasurehourshr9questionspace = new RegExp('9 hr\\?', 'gi');
const reglastmeasurehourshr0questionspace = new RegExp('0 hr\\?', 'gi');

const reglastmeasureminutes1 = new RegExp('1mins ', 'gi');
const reglastmeasureminutes2 = new RegExp('2mins ', 'gi');
const reglastmeasureminutes3 = new RegExp('3mins ', 'gi');
const reglastmeasureminutes4 = new RegExp('4mins ', 'gi');
const reglastmeasureminutes5 = new RegExp('5mins ', 'gi');
const reglastmeasureminutes6 = new RegExp('6mins ', 'gi');
const reglastmeasureminutes7 = new RegExp('7mins ', 'gi');
const reglastmeasureminutes8 = new RegExp('8mins ', 'gi');
const reglastmeasureminutes9 = new RegExp('9mins ', 'gi');
const reglastmeasureminutes0 = new RegExp('0mins ', 'gi');
const reglastmeasureminutes1point = new RegExp('1mins\\.', 'gi');
const reglastmeasureminutes2point = new RegExp('2mins\\.', 'gi');
const reglastmeasureminutes3point = new RegExp('3mins\\.', 'gi');
const reglastmeasureminutes4point = new RegExp('4mins\\.', 'gi');
const reglastmeasureminutes5point = new RegExp('5mins\\.', 'gi');
const reglastmeasureminutes6point = new RegExp('6mins\\.', 'gi');
const reglastmeasureminutes7point = new RegExp('7mins\\.', 'gi');
const reglastmeasureminutes8point = new RegExp('8mins\\.', 'gi');
const reglastmeasureminutes9point = new RegExp('9mins\\.', 'gi');
const reglastmeasureminutes0point = new RegExp('0mins\\.', 'gi');
const reglastmeasureminutes1virgola = new RegExp('1mins,', 'gi');
const reglastmeasureminutes2virgola = new RegExp('2mins,', 'gi');
const reglastmeasureminutes3virgola = new RegExp('3mins,', 'gi');
const reglastmeasureminutes4virgola = new RegExp('4mins,', 'gi');
const reglastmeasureminutes5virgola = new RegExp('5mins,', 'gi');
const reglastmeasureminutes6virgola = new RegExp('6mins,', 'gi');
const reglastmeasureminutes7virgola = new RegExp('7mins,', 'gi');
const reglastmeasureminutes8virgola = new RegExp('8mins,', 'gi');
const reglastmeasureminutes9virgola = new RegExp('9mins,', 'gi');
const reglastmeasureminutes0virgola = new RegExp('0mins,', 'gi');
const reglastmeasureminutes1slash = new RegExp('1mins/', 'gi');
const reglastmeasureminutes2slash = new RegExp('2mins/', 'gi');
const reglastmeasureminutes3slash = new RegExp('3mins/', 'gi');
const reglastmeasureminutes4slash = new RegExp('4mins/', 'gi');
const reglastmeasureminutes5slash = new RegExp('5mins/', 'gi');
const reglastmeasureminutes6slash = new RegExp('6mins/', 'gi');
const reglastmeasureminutes7slash = new RegExp('7mins/', 'gi');
const reglastmeasureminutes8slash = new RegExp('8mins/', 'gi');
const reglastmeasureminutes9slash = new RegExp('9mins/', 'gi');
const reglastmeasureminutes0slash = new RegExp('0mins/', 'gi');
const reglastmeasureminutes1question = new RegExp('1mins\\?', 'gi');
const reglastmeasureminutes2question = new RegExp('2mins\\?', 'gi');
const reglastmeasureminutes3question = new RegExp('3mins\\?', 'gi');
const reglastmeasureminutes4question = new RegExp('4mins\\?', 'gi');
const reglastmeasureminutes5question = new RegExp('5mins\\?', 'gi');
const reglastmeasureminutes6question = new RegExp('6mins\\?', 'gi');
const reglastmeasureminutes7question = new RegExp('7mins\\?', 'gi');
const reglastmeasureminutes8question = new RegExp('8mins\\?', 'gi');
const reglastmeasureminutes9question = new RegExp('9mins\\?', 'gi');
const reglastmeasureminutes0question = new RegExp('0mins\\?', 'gi');
const reglastmeasureminutes1exclam = new RegExp('1mins!', 'gi');
const reglastmeasureminutes2exclam = new RegExp('2mins!', 'gi');
const reglastmeasureminutes3exclam = new RegExp('3mins!', 'gi');
const reglastmeasureminutes4exclam = new RegExp('4mins!', 'gi');
const reglastmeasureminutes5exclam = new RegExp('5mins!', 'gi');
const reglastmeasureminutes6exclam = new RegExp('6mins!', 'gi');
const reglastmeasureminutes7exclam = new RegExp('7mins!', 'gi');
const reglastmeasureminutes8exclam = new RegExp('8mins!', 'gi');
const reglastmeasureminutes9exclam = new RegExp('9mins!', 'gi');
const reglastmeasureminutes0exclam = new RegExp('0mins!', 'gi');
const reglastmeasureminutes1space = new RegExp('1 mins ', 'gi');
const reglastmeasureminutes2space = new RegExp('2 mins ', 'gi');
const reglastmeasureminutes3space = new RegExp('3 mins ', 'gi');
const reglastmeasureminutes4space = new RegExp('4 mins ', 'gi');
const reglastmeasureminutes5space = new RegExp('5 mins ', 'gi');
const reglastmeasureminutes6space = new RegExp('6 mins ', 'gi');
const reglastmeasureminutes7space = new RegExp('7 mins ', 'gi');
const reglastmeasureminutes8space = new RegExp('8 mins ', 'gi');
const reglastmeasureminutes9space = new RegExp('9 mins ', 'gi');
const reglastmeasureminutes0space = new RegExp('0 mins ', 'gi');
const reglastmeasureminutes1exclamspace = new RegExp('1 mins!', 'gi');
const reglastmeasureminutes2exclamspace = new RegExp('2 mins!', 'gi');
const reglastmeasureminutes3exclamspace = new RegExp('3 mins!', 'gi');
const reglastmeasureminutes4exclamspace = new RegExp('4 mins!', 'gi');
const reglastmeasureminutes5exclamspace = new RegExp('5 mins!', 'gi');
const reglastmeasureminutes6exclamspace = new RegExp('6 mins!', 'gi');
const reglastmeasureminutes7exclamspace = new RegExp('7 mins!', 'gi');
const reglastmeasureminutes8exclamspace = new RegExp('8 mins!', 'gi');
const reglastmeasureminutes9exclamspace = new RegExp('9 mins!', 'gi');
const reglastmeasureminutes0exclamspace = new RegExp('0 mins!', 'gi');
const reglastmeasureminutes1slashspace = new RegExp('1 mins/', 'gi');
const reglastmeasureminutes2slashspace = new RegExp('2 mins/', 'gi');
const reglastmeasureminutes3slashspace = new RegExp('3 mins/', 'gi');
const reglastmeasureminutes4slashspace = new RegExp('4 mins/', 'gi');
const reglastmeasureminutes5slashspace = new RegExp('5 mins/', 'gi');
const reglastmeasureminutes6slashspace = new RegExp('6 mins/', 'gi');
const reglastmeasureminutes7slashspace = new RegExp('7 mins/', 'gi');
const reglastmeasureminutes8slashspace = new RegExp('8 mins/', 'gi');
const reglastmeasureminutes9slashspace = new RegExp('9 mins/', 'gi');
const reglastmeasureminutes0slashspace = new RegExp('0 mins/', 'gi');
const reglastmeasureminutes1virgolaspace = new RegExp('1 mins,', 'gi');
const reglastmeasureminutes2virgolaspace = new RegExp('2 mins,', 'gi');
const reglastmeasureminutes3virgolaspace = new RegExp('3 mins,', 'gi');
const reglastmeasureminutes4virgolaspace = new RegExp('4 mins,', 'gi');
const reglastmeasureminutes5virgolaspace = new RegExp('5 mins,', 'gi');
const reglastmeasureminutes6virgolaspace = new RegExp('6 mins,', 'gi');
const reglastmeasureminutes7virgolaspace = new RegExp('7 mins,', 'gi');
const reglastmeasureminutes8virgolaspace = new RegExp('8 mins,', 'gi');
const reglastmeasureminutes9virgolaspace = new RegExp('9 mins,', 'gi');
const reglastmeasureminutes0virgolaspace = new RegExp('0 mins,', 'gi');
const reglastmeasureminutes1pointspace = new RegExp('1 mins\\.', 'gi');
const reglastmeasureminutes2pointspace = new RegExp('2 mins\\.', 'gi');
const reglastmeasureminutes3pointspace = new RegExp('3 mins\\.', 'gi');
const reglastmeasureminutes4pointspace = new RegExp('4 mins\\.', 'gi');
const reglastmeasureminutes5pointspace = new RegExp('5 mins\\.', 'gi');
const reglastmeasureminutes6pointspace = new RegExp('6 mins\\.', 'gi');
const reglastmeasureminutes7pointspace = new RegExp('7 mins\\.', 'gi');
const reglastmeasureminutes8pointspace = new RegExp('8 mins\\.', 'gi');
const reglastmeasureminutes9pointspace = new RegExp('9 mins\\.', 'gi');
const reglastmeasureminutes0pointspace = new RegExp('0 mins\\.', 'gi');
const reglastmeasureminutes1questionspace = new RegExp('1 mins\\?', 'gi');
const reglastmeasureminutes2questionspace = new RegExp('2 mins\\?', 'gi');
const reglastmeasureminutes3questionspace = new RegExp('3 mins\\?', 'gi');
const reglastmeasureminutes4questionspace = new RegExp('4 mins\\?', 'gi');
const reglastmeasureminutes5questionspace = new RegExp('5 mins\\?', 'gi');
const reglastmeasureminutes6questionspace = new RegExp('6 mins\\?', 'gi');
const reglastmeasureminutes7questionspace = new RegExp('7 mins\\?', 'gi');
const reglastmeasureminutes8questionspace = new RegExp('8 mins\\?', 'gi');
const reglastmeasureminutes9questionspace = new RegExp('9 mins\\?', 'gi');
const reglastmeasureminutes0questionspace = new RegExp('0 mins\\?', 'gi');

const reglastmeasureymmv1 = new RegExp(',ymmv ', 'gi');
const reglastmeasureymmvslashfirst = new RegExp('/ymmv ', 'gi');
const reglastmeasureymmv2 = new RegExp('!ymmv ', 'gi');
const reglastmeasureymmv3 = new RegExp('\\?ymmv ', 'gi');
const reglastmeasureymmv4 = new RegExp('\\.ymmv ', 'gi');
const reglastmeasureymmv5 = new RegExp(' ymmv ', 'gi');
const reglastmeasureymmv6 = new RegExp(' ymmv\\.', 'gi');
const reglastmeasureymmv7 = new RegExp(' ymmv,', 'gi');
const reglastmeasureymmv8 = new RegExp(' ymmv!', 'gi');
const reglastmeasureymmv9 = new RegExp(' ymmv\\?', 'gi');
const reglastmeasureymmvslashafter = new RegExp(' ymmv/', 'gi');

const reglastmeasurenyc1 = new RegExp(',nyc ', 'gi');
const reglastmeasurenycslashfirst = new RegExp('/nyc ', 'gi');
const reglastmeasurenyc2 = new RegExp('!nyc ', 'gi');
const reglastmeasurenyc3 = new RegExp('\\?nyc ', 'gi');
const reglastmeasurenyc4 = new RegExp('\\.nyc ', 'gi');
const reglastmeasurenyc5 = new RegExp(' nyc ', 'gi');
const reglastmeasurenyc6 = new RegExp(' nyc\\.', 'gi');
const reglastmeasurenyc7 = new RegExp(' nyc,', 'gi');
const reglastmeasurenyc8 = new RegExp(' nyc!', 'gi');
const reglastmeasurenyc9 = new RegExp(' nyc\\?', 'gi');
const reglastmeasurenycslashafter = new RegExp(' nyc/', 'gi');

const reglastmeasurebttf1 = new RegExp(',bttf ', 'gi');
const reglastmeasurebttfslashfirst = new RegExp('/bttf ', 'gi');
const reglastmeasurebttf2 = new RegExp('!bttf ', 'gi');
const reglastmeasurebttf3 = new RegExp('\\?bttf ', 'gi');
const reglastmeasurebttf4 = new RegExp('\\.bttf ', 'gi');
const reglastmeasurebttf5 = new RegExp(' bttf ', 'gi');
const reglastmeasurebttf6 = new RegExp(' bttf\\.', 'gi');
const reglastmeasurebttf7 = new RegExp(' bttf,', 'gi');
const reglastmeasurebttf8 = new RegExp(' bttf!', 'gi');
const reglastmeasurebttf9 = new RegExp(' bttf\\?', 'gi');
const reglastmeasurebttfslashafter = new RegExp(' bttf/', 'gi');

const reglastmeasureusdollars1 = new RegExp('1us ', 'gi');
const reglastmeasureusdollars2 = new RegExp('2us ', 'gi');
const reglastmeasureusdollars3 = new RegExp('3us ', 'gi');
const reglastmeasureusdollars4 = new RegExp('4us ', 'gi');
const reglastmeasureusdollars5 = new RegExp('5us ', 'gi');
const reglastmeasureusdollars6 = new RegExp('6us ', 'gi');
const reglastmeasureusdollars7 = new RegExp('7us ', 'gi');
const reglastmeasureusdollars8 = new RegExp('8us ', 'gi');
const reglastmeasureusdollars9 = new RegExp('9us ', 'gi');
const reglastmeasureusdollars0 = new RegExp('0us ', 'gi');
const reglastmeasureusdollars1point = new RegExp('1us\\.', 'gi');
const reglastmeasureusdollars2point = new RegExp('2us\\.', 'gi');
const reglastmeasureusdollars3point = new RegExp('3us\\.', 'gi');
const reglastmeasureusdollars4point = new RegExp('4us\\.', 'gi');
const reglastmeasureusdollars5point = new RegExp('5us\\.', 'gi');
const reglastmeasureusdollars6point = new RegExp('6us\\.', 'gi');
const reglastmeasureusdollars7point = new RegExp('7us\\.', 'gi');
const reglastmeasureusdollars8point = new RegExp('8us\\.', 'gi');
const reglastmeasureusdollars9point = new RegExp('9us\\.', 'gi');
const reglastmeasureusdollars0point = new RegExp('0us\\.', 'gi');
const reglastmeasureusdollars1virgola = new RegExp('1us,', 'gi');
const reglastmeasureusdollars2virgola = new RegExp('2us,', 'gi');
const reglastmeasureusdollars3virgola = new RegExp('3us,', 'gi');
const reglastmeasureusdollars4virgola = new RegExp('4us,', 'gi');
const reglastmeasureusdollars5virgola = new RegExp('5us,', 'gi');
const reglastmeasureusdollars6virgola = new RegExp('6us,', 'gi');
const reglastmeasureusdollars7virgola = new RegExp('7us,', 'gi');
const reglastmeasureusdollars8virgola = new RegExp('8us,', 'gi');
const reglastmeasureusdollars9virgola = new RegExp('9us,', 'gi');
const reglastmeasureusdollars0virgola = new RegExp('0us,', 'gi');
const reglastmeasureusdollars1slash = new RegExp('1us/', 'gi');
const reglastmeasureusdollars2slash = new RegExp('2us/', 'gi');
const reglastmeasureusdollars3slash = new RegExp('3us/', 'gi');
const reglastmeasureusdollars4slash = new RegExp('4us/', 'gi');
const reglastmeasureusdollars5slash = new RegExp('5us/', 'gi');
const reglastmeasureusdollars6slash = new RegExp('6us/', 'gi');
const reglastmeasureusdollars7slash = new RegExp('7us/', 'gi');
const reglastmeasureusdollars8slash = new RegExp('8us/', 'gi');
const reglastmeasureusdollars9slash = new RegExp('9us/', 'gi');
const reglastmeasureusdollars0slash = new RegExp('0us/', 'gi');
const reglastmeasureusdollars1question = new RegExp('1us\\?', 'gi');
const reglastmeasureusdollars2question = new RegExp('2us\\?', 'gi');
const reglastmeasureusdollars3question = new RegExp('3us\\?', 'gi');
const reglastmeasureusdollars4question = new RegExp('4us\\?', 'gi');
const reglastmeasureusdollars5question = new RegExp('5us\\?', 'gi');
const reglastmeasureusdollars6question = new RegExp('6us\\?', 'gi');
const reglastmeasureusdollars7question = new RegExp('7us\\?', 'gi');
const reglastmeasureusdollars8question = new RegExp('8us\\?', 'gi');
const reglastmeasureusdollars9question = new RegExp('9us\\?', 'gi');
const reglastmeasureusdollars0question = new RegExp('0us\\?', 'gi');
const reglastmeasureusdollars1exclam = new RegExp('1us!', 'gi');
const reglastmeasureusdollars2exclam = new RegExp('2us!', 'gi');
const reglastmeasureusdollars3exclam = new RegExp('3us!', 'gi');
const reglastmeasureusdollars4exclam = new RegExp('4us!', 'gi');
const reglastmeasureusdollars5exclam = new RegExp('5us!', 'gi');
const reglastmeasureusdollars6exclam = new RegExp('6us!', 'gi');
const reglastmeasureusdollars7exclam = new RegExp('7us!', 'gi');
const reglastmeasureusdollars8exclam = new RegExp('8us!', 'gi');
const reglastmeasureusdollars9exclam = new RegExp('9us!', 'gi');
const reglastmeasureusdollars0exclam = new RegExp('0us!', 'gi');
const reglastmeasureusdollars1space = new RegExp('1 us ', 'gi');
const reglastmeasureusdollars2space = new RegExp('2 us ', 'gi');
const reglastmeasureusdollars3space = new RegExp('3 us ', 'gi');
const reglastmeasureusdollars4space = new RegExp('4 us ', 'gi');
const reglastmeasureusdollars5space = new RegExp('5 us ', 'gi');
const reglastmeasureusdollars6space = new RegExp('6 us ', 'gi');
const reglastmeasureusdollars7space = new RegExp('7 us ', 'gi');
const reglastmeasureusdollars8space = new RegExp('8 us ', 'gi');
const reglastmeasureusdollars9space = new RegExp('9 us ', 'gi');
const reglastmeasureusdollars0space = new RegExp('0 us ', 'gi');
const reglastmeasureusdollars1exclamspace = new RegExp('1 us!', 'gi');
const reglastmeasureusdollars2exclamspace = new RegExp('2 us!', 'gi');
const reglastmeasureusdollars3exclamspace = new RegExp('3 us!', 'gi');
const reglastmeasureusdollars4exclamspace = new RegExp('4 us!', 'gi');
const reglastmeasureusdollars5exclamspace = new RegExp('5 us!', 'gi');
const reglastmeasureusdollars6exclamspace = new RegExp('6 us!', 'gi');
const reglastmeasureusdollars7exclamspace = new RegExp('7 us!', 'gi');
const reglastmeasureusdollars8exclamspace = new RegExp('8 us!', 'gi');
const reglastmeasureusdollars9exclamspace = new RegExp('9 us!', 'gi');
const reglastmeasureusdollars0exclamspace = new RegExp('0 us!', 'gi');
const reglastmeasureusdollars1slashspace = new RegExp('1 us/', 'gi');
const reglastmeasureusdollars2slashspace = new RegExp('2 us/', 'gi');
const reglastmeasureusdollars3slashspace = new RegExp('3 us/', 'gi');
const reglastmeasureusdollars4slashspace = new RegExp('4 us/', 'gi');
const reglastmeasureusdollars5slashspace = new RegExp('5 us/', 'gi');
const reglastmeasureusdollars6slashspace = new RegExp('6 us/', 'gi');
const reglastmeasureusdollars7slashspace = new RegExp('7 us/', 'gi');
const reglastmeasureusdollars8slashspace = new RegExp('8 us/', 'gi');
const reglastmeasureusdollars9slashspace = new RegExp('9 us/', 'gi');
const reglastmeasureusdollars0slashspace = new RegExp('0 us/', 'gi');
const reglastmeasureusdollars1virgolaspace = new RegExp('1 us,', 'gi');
const reglastmeasureusdollars2virgolaspace = new RegExp('2 us,', 'gi');
const reglastmeasureusdollars3virgolaspace = new RegExp('3 us,', 'gi');
const reglastmeasureusdollars4virgolaspace = new RegExp('4 us,', 'gi');
const reglastmeasureusdollars5virgolaspace = new RegExp('5 us,', 'gi');
const reglastmeasureusdollars6virgolaspace = new RegExp('6 us,', 'gi');
const reglastmeasureusdollars7virgolaspace = new RegExp('7 us,', 'gi');
const reglastmeasureusdollars8virgolaspace = new RegExp('8 us,', 'gi');
const reglastmeasureusdollars9virgolaspace = new RegExp('9 us,', 'gi');
const reglastmeasureusdollars0virgolaspace = new RegExp('0 us,', 'gi');
const reglastmeasureusdollars1pointspace = new RegExp('1 us\\.', 'gi');
const reglastmeasureusdollars2pointspace = new RegExp('2 us\\.', 'gi');
const reglastmeasureusdollars3pointspace = new RegExp('3 us\\.', 'gi');
const reglastmeasureusdollars4pointspace = new RegExp('4 us\\.', 'gi');
const reglastmeasureusdollars5pointspace = new RegExp('5 us\\.', 'gi');
const reglastmeasureusdollars6pointspace = new RegExp('6 us\\.', 'gi');
const reglastmeasureusdollars7pointspace = new RegExp('7 us\\.', 'gi');
const reglastmeasureusdollars8pointspace = new RegExp('8 us\\.', 'gi');
const reglastmeasureusdollars9pointspace = new RegExp('9 us\\.', 'gi');
const reglastmeasureusdollars0pointspace = new RegExp('0 us\\.', 'gi');
const reglastmeasureusdollars1questionspace = new RegExp('1 us\\?', 'gi');
const reglastmeasureusdollars2questionspace = new RegExp('2 us\\?', 'gi');
const reglastmeasureusdollars3questionspace = new RegExp('3 us\\?', 'gi');
const reglastmeasureusdollars4questionspace = new RegExp('4 us\\?', 'gi');
const reglastmeasureusdollars5questionspace = new RegExp('5 us\\?', 'gi');
const reglastmeasureusdollars6questionspace = new RegExp('6 us\\?', 'gi');
const reglastmeasureusdollars7questionspace = new RegExp('7 us\\?', 'gi');
const reglastmeasureusdollars8questionspace = new RegExp('8 us\\?', 'gi');
const reglastmeasureusdollars9questionspace = new RegExp('9 us\\?', 'gi');
const reglastmeasureusdollars0questionspace = new RegExp('0 us\\?', 'gi');

const reglastmeasurebmr1 = new RegExp(',bmr ', 'gi');
const reglastmeasurebmrslashfirst = new RegExp('/bmr ', 'gi');
const reglastmeasurebmr2 = new RegExp('!bmr ', 'gi');
const reglastmeasurebmr3 = new RegExp('\\?bmr ', 'gi');
const reglastmeasurebmr4 = new RegExp('\\.bmr ', 'gi');
const reglastmeasurebmr5 = new RegExp(' bmr ', 'gi');
const reglastmeasurebmr6 = new RegExp(' bmr\\.', 'gi');
const reglastmeasurebmr7 = new RegExp(' bmr,', 'gi');
const reglastmeasurebmr8 = new RegExp(' bmr!', 'gi');
const reglastmeasurebmr9 = new RegExp(' bmr\\?', 'gi');
const reglastmeasurebmrslashafter = new RegExp(' bmr/', 'gi');

const reglastmeasurefwiw1 = new RegExp(',fwiw ', 'gi');
const reglastmeasurefwiwslashfirst = new RegExp('/fwiw ', 'gi');
const reglastmeasurefwiw2 = new RegExp('!fwiw ', 'gi');
const reglastmeasurefwiw3 = new RegExp('\\?fwiw ', 'gi');
const reglastmeasurefwiw4 = new RegExp('\\.fwiw ', 'gi');
const reglastmeasurefwiw5 = new RegExp(' fwiw ', 'gi');
const reglastmeasurefwiw6 = new RegExp(' fwiw\\.', 'gi');
const reglastmeasurefwiw7 = new RegExp(' fwiw,', 'gi');
const reglastmeasurefwiw8 = new RegExp(' fwiw!', 'gi');
const reglastmeasurefwiw9 = new RegExp(' fwiw\\?', 'gi');
const reglastmeasurefwiwslashafter = new RegExp(' fwiw/', 'gi');

const reglastmeasureyearsold1 = new RegExp('1yo ', 'gi');
const reglastmeasureyearsold2 = new RegExp('2yo ', 'gi');
const reglastmeasureyearsold3 = new RegExp('3yo ', 'gi');
const reglastmeasureyearsold4 = new RegExp('4yo ', 'gi');
const reglastmeasureyearsold5 = new RegExp('5yo ', 'gi');
const reglastmeasureyearsold6 = new RegExp('6yo ', 'gi');
const reglastmeasureyearsold7 = new RegExp('7yo ', 'gi');
const reglastmeasureyearsold8 = new RegExp('8yo ', 'gi');
const reglastmeasureyearsold9 = new RegExp('9yo ', 'gi');
const reglastmeasureyearsold0 = new RegExp('0yo ', 'gi');
const reglastmeasureyearsold1point = new RegExp('1yo\\.', 'gi');
const reglastmeasureyearsold2point = new RegExp('2yo\\.', 'gi');
const reglastmeasureyearsold3point = new RegExp('3yo\\.', 'gi');
const reglastmeasureyearsold4point = new RegExp('4yo\\.', 'gi');
const reglastmeasureyearsold5point = new RegExp('5yo\\.', 'gi');
const reglastmeasureyearsold6point = new RegExp('6yo\\.', 'gi');
const reglastmeasureyearsold7point = new RegExp('7yo\\.', 'gi');
const reglastmeasureyearsold8point = new RegExp('8yo\\.', 'gi');
const reglastmeasureyearsold9point = new RegExp('9yo\\.', 'gi');
const reglastmeasureyearsold0point = new RegExp('0yo\\.', 'gi');
const reglastmeasureyearsold1virgola = new RegExp('1yo,', 'gi');
const reglastmeasureyearsold2virgola = new RegExp('2yo,', 'gi');
const reglastmeasureyearsold3virgola = new RegExp('3yo,', 'gi');
const reglastmeasureyearsold4virgola = new RegExp('4yo,', 'gi');
const reglastmeasureyearsold5virgola = new RegExp('5yo,', 'gi');
const reglastmeasureyearsold6virgola = new RegExp('6yo,', 'gi');
const reglastmeasureyearsold7virgola = new RegExp('7yo,', 'gi');
const reglastmeasureyearsold8virgola = new RegExp('8yo,', 'gi');
const reglastmeasureyearsold9virgola = new RegExp('9yo,', 'gi');
const reglastmeasureyearsold0virgola = new RegExp('0yo,', 'gi');
const reglastmeasureyearsold1slash = new RegExp('1yo/', 'gi');
const reglastmeasureyearsold2slash = new RegExp('2yo/', 'gi');
const reglastmeasureyearsold3slash = new RegExp('3yo/', 'gi');
const reglastmeasureyearsold4slash = new RegExp('4yo/', 'gi');
const reglastmeasureyearsold5slash = new RegExp('5yo/', 'gi');
const reglastmeasureyearsold6slash = new RegExp('6yo/', 'gi');
const reglastmeasureyearsold7slash = new RegExp('7yo/', 'gi');
const reglastmeasureyearsold8slash = new RegExp('8yo/', 'gi');
const reglastmeasureyearsold9slash = new RegExp('9yo/', 'gi');
const reglastmeasureyearsold0slash = new RegExp('0yo/', 'gi');
const reglastmeasureyearsold1question = new RegExp('1yo\\?', 'gi');
const reglastmeasureyearsold2question = new RegExp('2yo\\?', 'gi');
const reglastmeasureyearsold3question = new RegExp('3yo\\?', 'gi');
const reglastmeasureyearsold4question = new RegExp('4yo\\?', 'gi');
const reglastmeasureyearsold5question = new RegExp('5yo\\?', 'gi');
const reglastmeasureyearsold6question = new RegExp('6yo\\?', 'gi');
const reglastmeasureyearsold7question = new RegExp('7yo\\?', 'gi');
const reglastmeasureyearsold8question = new RegExp('8yo\\?', 'gi');
const reglastmeasureyearsold9question = new RegExp('9yo\\?', 'gi');
const reglastmeasureyearsold0question = new RegExp('0yo\\?', 'gi');
const reglastmeasureyearsold1exclam = new RegExp('1yo!', 'gi');
const reglastmeasureyearsold2exclam = new RegExp('2yo!', 'gi');
const reglastmeasureyearsold3exclam = new RegExp('3yo!', 'gi');
const reglastmeasureyearsold4exclam = new RegExp('4yo!', 'gi');
const reglastmeasureyearsold5exclam = new RegExp('5yo!', 'gi');
const reglastmeasureyearsold6exclam = new RegExp('6yo!', 'gi');
const reglastmeasureyearsold7exclam = new RegExp('7yo!', 'gi');
const reglastmeasureyearsold8exclam = new RegExp('8yo!', 'gi');
const reglastmeasureyearsold9exclam = new RegExp('9yo!', 'gi');
const reglastmeasureyearsold0exclam = new RegExp('0yo!', 'gi');
const reglastmeasureyearsold1space = new RegExp('1 yo ', 'gi');
const reglastmeasureyearsold2space = new RegExp('2 yo ', 'gi');
const reglastmeasureyearsold3space = new RegExp('3 yo ', 'gi');
const reglastmeasureyearsold4space = new RegExp('4 yo ', 'gi');
const reglastmeasureyearsold5space = new RegExp('5 yo ', 'gi');
const reglastmeasureyearsold6space = new RegExp('6 yo ', 'gi');
const reglastmeasureyearsold7space = new RegExp('7 yo ', 'gi');
const reglastmeasureyearsold8space = new RegExp('8 yo ', 'gi');
const reglastmeasureyearsold9space = new RegExp('9 yo ', 'gi');
const reglastmeasureyearsold0space = new RegExp('0 yo ', 'gi');
const reglastmeasureyearsold1exclamspace = new RegExp('1 yo!', 'gi');
const reglastmeasureyearsold2exclamspace = new RegExp('2 yo!', 'gi');
const reglastmeasureyearsold3exclamspace = new RegExp('3 yo!', 'gi');
const reglastmeasureyearsold4exclamspace = new RegExp('4 yo!', 'gi');
const reglastmeasureyearsold5exclamspace = new RegExp('5 yo!', 'gi');
const reglastmeasureyearsold6exclamspace = new RegExp('6 yo!', 'gi');
const reglastmeasureyearsold7exclamspace = new RegExp('7 yo!', 'gi');
const reglastmeasureyearsold8exclamspace = new RegExp('8 yo!', 'gi');
const reglastmeasureyearsold9exclamspace = new RegExp('9 yo!', 'gi');
const reglastmeasureyearsold0exclamspace = new RegExp('0 yo!', 'gi');
const reglastmeasureyearsold1slashspace = new RegExp('1 yo/', 'gi');
const reglastmeasureyearsold2slashspace = new RegExp('2 yo/', 'gi');
const reglastmeasureyearsold3slashspace = new RegExp('3 yo/', 'gi');
const reglastmeasureyearsold4slashspace = new RegExp('4 yo/', 'gi');
const reglastmeasureyearsold5slashspace = new RegExp('5 yo/', 'gi');
const reglastmeasureyearsold6slashspace = new RegExp('6 yo/', 'gi');
const reglastmeasureyearsold7slashspace = new RegExp('7 yo/', 'gi');
const reglastmeasureyearsold8slashspace = new RegExp('8 yo/', 'gi');
const reglastmeasureyearsold9slashspace = new RegExp('9 yo/', 'gi');
const reglastmeasureyearsold0slashspace = new RegExp('0 yo/', 'gi');
const reglastmeasureyearsold1virgolaspace = new RegExp('1 yo,', 'gi');
const reglastmeasureyearsold2virgolaspace = new RegExp('2 yo,', 'gi');
const reglastmeasureyearsold3virgolaspace = new RegExp('3 yo,', 'gi');
const reglastmeasureyearsold4virgolaspace = new RegExp('4 yo,', 'gi');
const reglastmeasureyearsold5virgolaspace = new RegExp('5 yo,', 'gi');
const reglastmeasureyearsold6virgolaspace = new RegExp('6 yo,', 'gi');
const reglastmeasureyearsold7virgolaspace = new RegExp('7 yo,', 'gi');
const reglastmeasureyearsold8virgolaspace = new RegExp('8 yo,', 'gi');
const reglastmeasureyearsold9virgolaspace = new RegExp('9 yo,', 'gi');
const reglastmeasureyearsold0virgolaspace = new RegExp('0 yo,', 'gi');
const reglastmeasureyearsold1pointspace = new RegExp('1 yo\\.', 'gi');
const reglastmeasureyearsold2pointspace = new RegExp('2 yo\\.', 'gi');
const reglastmeasureyearsold3pointspace = new RegExp('3 yo\\.', 'gi');
const reglastmeasureyearsold4pointspace = new RegExp('4 yo\\.', 'gi');
const reglastmeasureyearsold5pointspace = new RegExp('5 yo\\.', 'gi');
const reglastmeasureyearsold6pointspace = new RegExp('6 yo\\.', 'gi');
const reglastmeasureyearsold7pointspace = new RegExp('7 yo\\.', 'gi');
const reglastmeasureyearsold8pointspace = new RegExp('8 yo\\.', 'gi');
const reglastmeasureyearsold9pointspace = new RegExp('9 yo\\.', 'gi');
const reglastmeasureyearsold0pointspace = new RegExp('0 yo\\.', 'gi');
const reglastmeasureyearsold1questionspace = new RegExp('1 yo\\?', 'gi');
const reglastmeasureyearsold2questionspace = new RegExp('2 yo\\?', 'gi');
const reglastmeasureyearsold3questionspace = new RegExp('3 yo\\?', 'gi');
const reglastmeasureyearsold4questionspace = new RegExp('4 yo\\?', 'gi');
const reglastmeasureyearsold5questionspace = new RegExp('5 yo\\?', 'gi');
const reglastmeasureyearsold6questionspace = new RegExp('6 yo\\?', 'gi');
const reglastmeasureyearsold7questionspace = new RegExp('7 yo\\?', 'gi');
const reglastmeasureyearsold8questionspace = new RegExp('8 yo\\?', 'gi');
const reglastmeasureyearsold9questionspace = new RegExp('9 yo\\?', 'gi');
const reglastmeasureyearsold0questionspace = new RegExp('0 yo\\?', 'gi');

const reglastmeasureyears1 = new RegExp('1yr ', 'gi');
const reglastmeasureyears2 = new RegExp('2yr ', 'gi');
const reglastmeasureyears3 = new RegExp('3yr ', 'gi');
const reglastmeasureyears4 = new RegExp('4yr ', 'gi');
const reglastmeasureyears5 = new RegExp('5yr ', 'gi');
const reglastmeasureyears6 = new RegExp('6yr ', 'gi');
const reglastmeasureyears7 = new RegExp('7yr ', 'gi');
const reglastmeasureyears8 = new RegExp('8yr ', 'gi');
const reglastmeasureyears9 = new RegExp('9yr ', 'gi');
const reglastmeasureyears0 = new RegExp('0yr ', 'gi');
const reglastmeasureyears1point = new RegExp('1yr\\.', 'gi');
const reglastmeasureyears2point = new RegExp('2yr\\.', 'gi');
const reglastmeasureyears3point = new RegExp('3yr\\.', 'gi');
const reglastmeasureyears4point = new RegExp('4yr\\.', 'gi');
const reglastmeasureyears5point = new RegExp('5yr\\.', 'gi');
const reglastmeasureyears6point = new RegExp('6yr\\.', 'gi');
const reglastmeasureyears7point = new RegExp('7yr\\.', 'gi');
const reglastmeasureyears8point = new RegExp('8yr\\.', 'gi');
const reglastmeasureyears9point = new RegExp('9yr\\.', 'gi');
const reglastmeasureyears0point = new RegExp('0yr\\.', 'gi');
const reglastmeasureyears1virgola = new RegExp('1yr,', 'gi');
const reglastmeasureyears2virgola = new RegExp('2yr,', 'gi');
const reglastmeasureyears3virgola = new RegExp('3yr,', 'gi');
const reglastmeasureyears4virgola = new RegExp('4yr,', 'gi');
const reglastmeasureyears5virgola = new RegExp('5yr,', 'gi');
const reglastmeasureyears6virgola = new RegExp('6yr,', 'gi');
const reglastmeasureyears7virgola = new RegExp('7yr,', 'gi');
const reglastmeasureyears8virgola = new RegExp('8yr,', 'gi');
const reglastmeasureyears9virgola = new RegExp('9yr,', 'gi');
const reglastmeasureyears0virgola = new RegExp('0yr,', 'gi');
const reglastmeasureyears1slash = new RegExp('1yr/', 'gi');
const reglastmeasureyears2slash = new RegExp('2yr/', 'gi');
const reglastmeasureyears3slash = new RegExp('3yr/', 'gi');
const reglastmeasureyears4slash = new RegExp('4yr/', 'gi');
const reglastmeasureyears5slash = new RegExp('5yr/', 'gi');
const reglastmeasureyears6slash = new RegExp('6yr/', 'gi');
const reglastmeasureyears7slash = new RegExp('7yr/', 'gi');
const reglastmeasureyears8slash = new RegExp('8yr/', 'gi');
const reglastmeasureyears9slash = new RegExp('9yr/', 'gi');
const reglastmeasureyears0slash = new RegExp('0yr/', 'gi');
const reglastmeasureyears1question = new RegExp('1yr\\?', 'gi');
const reglastmeasureyears2question = new RegExp('2yr\\?', 'gi');
const reglastmeasureyears3question = new RegExp('3yr\\?', 'gi');
const reglastmeasureyears4question = new RegExp('4yr\\?', 'gi');
const reglastmeasureyears5question = new RegExp('5yr\\?', 'gi');
const reglastmeasureyears6question = new RegExp('6yr\\?', 'gi');
const reglastmeasureyears7question = new RegExp('7yr\\?', 'gi');
const reglastmeasureyears8question = new RegExp('8yr\\?', 'gi');
const reglastmeasureyears9question = new RegExp('9yr\\?', 'gi');
const reglastmeasureyears0question = new RegExp('0yr\\?', 'gi');
const reglastmeasureyears1exclam = new RegExp('1yr!', 'gi');
const reglastmeasureyears2exclam = new RegExp('2yr!', 'gi');
const reglastmeasureyears3exclam = new RegExp('3yr!', 'gi');
const reglastmeasureyears4exclam = new RegExp('4yr!', 'gi');
const reglastmeasureyears5exclam = new RegExp('5yr!', 'gi');
const reglastmeasureyears6exclam = new RegExp('6yr!', 'gi');
const reglastmeasureyears7exclam = new RegExp('7yr!', 'gi');
const reglastmeasureyears8exclam = new RegExp('8yr!', 'gi');
const reglastmeasureyears9exclam = new RegExp('9yr!', 'gi');
const reglastmeasureyears0exclam = new RegExp('0yr!', 'gi');
const reglastmeasureyears1space = new RegExp('1 yr ', 'gi');
const reglastmeasureyears2space = new RegExp('2 yr ', 'gi');
const reglastmeasureyears3space = new RegExp('3 yr ', 'gi');
const reglastmeasureyears4space = new RegExp('4 yr ', 'gi');
const reglastmeasureyears5space = new RegExp('5 yr ', 'gi');
const reglastmeasureyears6space = new RegExp('6 yr ', 'gi');
const reglastmeasureyears7space = new RegExp('7 yr ', 'gi');
const reglastmeasureyears8space = new RegExp('8 yr ', 'gi');
const reglastmeasureyears9space = new RegExp('9 yr ', 'gi');
const reglastmeasureyears0space = new RegExp('0 yr ', 'gi');
const reglastmeasureyears1exclamspace = new RegExp('1 yr!', 'gi');
const reglastmeasureyears2exclamspace = new RegExp('2 yr!', 'gi');
const reglastmeasureyears3exclamspace = new RegExp('3 yr!', 'gi');
const reglastmeasureyears4exclamspace = new RegExp('4 yr!', 'gi');
const reglastmeasureyears5exclamspace = new RegExp('5 yr!', 'gi');
const reglastmeasureyears6exclamspace = new RegExp('6 yr!', 'gi');
const reglastmeasureyears7exclamspace = new RegExp('7 yr!', 'gi');
const reglastmeasureyears8exclamspace = new RegExp('8 yr!', 'gi');
const reglastmeasureyears9exclamspace = new RegExp('9 yr!', 'gi');
const reglastmeasureyears0exclamspace = new RegExp('0 yr!', 'gi');
const reglastmeasureyears1slashspace = new RegExp('1 yr/', 'gi');
const reglastmeasureyears2slashspace = new RegExp('2 yr/', 'gi');
const reglastmeasureyears3slashspace = new RegExp('3 yr/', 'gi');
const reglastmeasureyears4slashspace = new RegExp('4 yr/', 'gi');
const reglastmeasureyears5slashspace = new RegExp('5 yr/', 'gi');
const reglastmeasureyears6slashspace = new RegExp('6 yr/', 'gi');
const reglastmeasureyears7slashspace = new RegExp('7 yr/', 'gi');
const reglastmeasureyears8slashspace = new RegExp('8 yr/', 'gi');
const reglastmeasureyears9slashspace = new RegExp('9 yr/', 'gi');
const reglastmeasureyears0slashspace = new RegExp('0 yr/', 'gi');
const reglastmeasureyears1virgolaspace = new RegExp('1 yr,', 'gi');
const reglastmeasureyears2virgolaspace = new RegExp('2 yr,', 'gi');
const reglastmeasureyears3virgolaspace = new RegExp('3 yr,', 'gi');
const reglastmeasureyears4virgolaspace = new RegExp('4 yr,', 'gi');
const reglastmeasureyears5virgolaspace = new RegExp('5 yr,', 'gi');
const reglastmeasureyears6virgolaspace = new RegExp('6 yr,', 'gi');
const reglastmeasureyears7virgolaspace = new RegExp('7 yr,', 'gi');
const reglastmeasureyears8virgolaspace = new RegExp('8 yr,', 'gi');
const reglastmeasureyears9virgolaspace = new RegExp('9 yr,', 'gi');
const reglastmeasureyears0virgolaspace = new RegExp('0 yr,', 'gi');
const reglastmeasureyears1pointspace = new RegExp('1 yr\\.', 'gi');
const reglastmeasureyears2pointspace = new RegExp('2 yr\\.', 'gi');
const reglastmeasureyears3pointspace = new RegExp('3 yr\\.', 'gi');
const reglastmeasureyears4pointspace = new RegExp('4 yr\\.', 'gi');
const reglastmeasureyears5pointspace = new RegExp('5 yr\\.', 'gi');
const reglastmeasureyears6pointspace = new RegExp('6 yr\\.', 'gi');
const reglastmeasureyears7pointspace = new RegExp('7 yr\\.', 'gi');
const reglastmeasureyears8pointspace = new RegExp('8 yr\\.', 'gi');
const reglastmeasureyears9pointspace = new RegExp('9 yr\\.', 'gi');
const reglastmeasureyears0pointspace = new RegExp('0 yr\\.', 'gi');
const reglastmeasureyears1questionspace = new RegExp('1 yr\\?', 'gi');
const reglastmeasureyears2questionspace = new RegExp('2 yr\\?', 'gi');
const reglastmeasureyears3questionspace = new RegExp('3 yr\\?', 'gi');
const reglastmeasureyears4questionspace = new RegExp('4 yr\\?', 'gi');
const reglastmeasureyears5questionspace = new RegExp('5 yr\\?', 'gi');
const reglastmeasureyears6questionspace = new RegExp('6 yr\\?', 'gi');
const reglastmeasureyears7questionspace = new RegExp('7 yr\\?', 'gi');
const reglastmeasureyears8questionspace = new RegExp('8 yr\\?', 'gi');
const reglastmeasureyears9questionspace = new RegExp('9 yr\\?', 'gi');
const reglastmeasureyears0questionspace = new RegExp('0 yr\\?', 'gi');

const reglastmeasuregigahertz1 = new RegExp('1ghz ', 'gi');
const reglastmeasuregigahertz2 = new RegExp('2ghz ', 'gi');
const reglastmeasuregigahertz3 = new RegExp('3ghz ', 'gi');
const reglastmeasuregigahertz4 = new RegExp('4ghz ', 'gi');
const reglastmeasuregigahertz5 = new RegExp('5ghz ', 'gi');
const reglastmeasuregigahertz6 = new RegExp('6ghz ', 'gi');
const reglastmeasuregigahertz7 = new RegExp('7ghz ', 'gi');
const reglastmeasuregigahertz8 = new RegExp('8ghz ', 'gi');
const reglastmeasuregigahertz9 = new RegExp('9ghz ', 'gi');
const reglastmeasuregigahertz0 = new RegExp('0ghz ', 'gi');
const reglastmeasuregigahertz1point = new RegExp('1ghz\\.', 'gi');
const reglastmeasuregigahertz2point = new RegExp('2ghz\\.', 'gi');
const reglastmeasuregigahertz3point = new RegExp('3ghz\\.', 'gi');
const reglastmeasuregigahertz4point = new RegExp('4ghz\\.', 'gi');
const reglastmeasuregigahertz5point = new RegExp('5ghz\\.', 'gi');
const reglastmeasuregigahertz6point = new RegExp('6ghz\\.', 'gi');
const reglastmeasuregigahertz7point = new RegExp('7ghz\\.', 'gi');
const reglastmeasuregigahertz8point = new RegExp('8ghz\\.', 'gi');
const reglastmeasuregigahertz9point = new RegExp('9ghz\\.', 'gi');
const reglastmeasuregigahertz0point = new RegExp('0ghz\\.', 'gi');
const reglastmeasuregigahertz1virgola = new RegExp('1ghz,', 'gi');
const reglastmeasuregigahertz2virgola = new RegExp('2ghz,', 'gi');
const reglastmeasuregigahertz3virgola = new RegExp('3ghz,', 'gi');
const reglastmeasuregigahertz4virgola = new RegExp('4ghz,', 'gi');
const reglastmeasuregigahertz5virgola = new RegExp('5ghz,', 'gi');
const reglastmeasuregigahertz6virgola = new RegExp('6ghz,', 'gi');
const reglastmeasuregigahertz7virgola = new RegExp('7ghz,', 'gi');
const reglastmeasuregigahertz8virgola = new RegExp('8ghz,', 'gi');
const reglastmeasuregigahertz9virgola = new RegExp('9ghz,', 'gi');
const reglastmeasuregigahertz0virgola = new RegExp('0ghz,', 'gi');
const reglastmeasuregigahertz1slash = new RegExp('1ghz/', 'gi');
const reglastmeasuregigahertz2slash = new RegExp('2ghz/', 'gi');
const reglastmeasuregigahertz3slash = new RegExp('3ghz/', 'gi');
const reglastmeasuregigahertz4slash = new RegExp('4ghz/', 'gi');
const reglastmeasuregigahertz5slash = new RegExp('5ghz/', 'gi');
const reglastmeasuregigahertz6slash = new RegExp('6ghz/', 'gi');
const reglastmeasuregigahertz7slash = new RegExp('7ghz/', 'gi');
const reglastmeasuregigahertz8slash = new RegExp('8ghz/', 'gi');
const reglastmeasuregigahertz9slash = new RegExp('9ghz/', 'gi');
const reglastmeasuregigahertz0slash = new RegExp('0ghz/', 'gi');
const reglastmeasuregigahertz1question = new RegExp('1ghz\\?', 'gi');
const reglastmeasuregigahertz2question = new RegExp('2ghz\\?', 'gi');
const reglastmeasuregigahertz3question = new RegExp('3ghz\\?', 'gi');
const reglastmeasuregigahertz4question = new RegExp('4ghz\\?', 'gi');
const reglastmeasuregigahertz5question = new RegExp('5ghz\\?', 'gi');
const reglastmeasuregigahertz6question = new RegExp('6ghz\\?', 'gi');
const reglastmeasuregigahertz7question = new RegExp('7ghz\\?', 'gi');
const reglastmeasuregigahertz8question = new RegExp('8ghz\\?', 'gi');
const reglastmeasuregigahertz9question = new RegExp('9ghz\\?', 'gi');
const reglastmeasuregigahertz0question = new RegExp('0ghz\\?', 'gi');
const reglastmeasuregigahertz1exclam = new RegExp('1ghz!', 'gi');
const reglastmeasuregigahertz2exclam = new RegExp('2ghz!', 'gi');
const reglastmeasuregigahertz3exclam = new RegExp('3ghz!', 'gi');
const reglastmeasuregigahertz4exclam = new RegExp('4ghz!', 'gi');
const reglastmeasuregigahertz5exclam = new RegExp('5ghz!', 'gi');
const reglastmeasuregigahertz6exclam = new RegExp('6ghz!', 'gi');
const reglastmeasuregigahertz7exclam = new RegExp('7ghz!', 'gi');
const reglastmeasuregigahertz8exclam = new RegExp('8ghz!', 'gi');
const reglastmeasuregigahertz9exclam = new RegExp('9ghz!', 'gi');
const reglastmeasuregigahertz0exclam = new RegExp('0ghz!', 'gi');
const reglastmeasuregigahertz1space = new RegExp('1 ghz ', 'gi');
const reglastmeasuregigahertz2space = new RegExp('2 ghz ', 'gi');
const reglastmeasuregigahertz3space = new RegExp('3 ghz ', 'gi');
const reglastmeasuregigahertz4space = new RegExp('4 ghz ', 'gi');
const reglastmeasuregigahertz5space = new RegExp('5 ghz ', 'gi');
const reglastmeasuregigahertz6space = new RegExp('6 ghz ', 'gi');
const reglastmeasuregigahertz7space = new RegExp('7 ghz ', 'gi');
const reglastmeasuregigahertz8space = new RegExp('8 ghz ', 'gi');
const reglastmeasuregigahertz9space = new RegExp('9 ghz ', 'gi');
const reglastmeasuregigahertz0space = new RegExp('0 ghz ', 'gi');
const reglastmeasuregigahertz1exclamspace = new RegExp('1 ghz!', 'gi');
const reglastmeasuregigahertz2exclamspace = new RegExp('2 ghz!', 'gi');
const reglastmeasuregigahertz3exclamspace = new RegExp('3 ghz!', 'gi');
const reglastmeasuregigahertz4exclamspace = new RegExp('4 ghz!', 'gi');
const reglastmeasuregigahertz5exclamspace = new RegExp('5 ghz!', 'gi');
const reglastmeasuregigahertz6exclamspace = new RegExp('6 ghz!', 'gi');
const reglastmeasuregigahertz7exclamspace = new RegExp('7 ghz!', 'gi');
const reglastmeasuregigahertz8exclamspace = new RegExp('8 ghz!', 'gi');
const reglastmeasuregigahertz9exclamspace = new RegExp('9 ghz!', 'gi');
const reglastmeasuregigahertz0exclamspace = new RegExp('0 ghz!', 'gi');
const reglastmeasuregigahertz1slashspace = new RegExp('1 ghz/', 'gi');
const reglastmeasuregigahertz2slashspace = new RegExp('2 ghz/', 'gi');
const reglastmeasuregigahertz3slashspace = new RegExp('3 ghz/', 'gi');
const reglastmeasuregigahertz4slashspace = new RegExp('4 ghz/', 'gi');
const reglastmeasuregigahertz5slashspace = new RegExp('5 ghz/', 'gi');
const reglastmeasuregigahertz6slashspace = new RegExp('6 ghz/', 'gi');
const reglastmeasuregigahertz7slashspace = new RegExp('7 ghz/', 'gi');
const reglastmeasuregigahertz8slashspace = new RegExp('8 ghz/', 'gi');
const reglastmeasuregigahertz9slashspace = new RegExp('9 ghz/', 'gi');
const reglastmeasuregigahertz0slashspace = new RegExp('0 ghz/', 'gi');
const reglastmeasuregigahertz1virgolaspace = new RegExp('1 ghz,', 'gi');
const reglastmeasuregigahertz2virgolaspace = new RegExp('2 ghz,', 'gi');
const reglastmeasuregigahertz3virgolaspace = new RegExp('3 ghz,', 'gi');
const reglastmeasuregigahertz4virgolaspace = new RegExp('4 ghz,', 'gi');
const reglastmeasuregigahertz5virgolaspace = new RegExp('5 ghz,', 'gi');
const reglastmeasuregigahertz6virgolaspace = new RegExp('6 ghz,', 'gi');
const reglastmeasuregigahertz7virgolaspace = new RegExp('7 ghz,', 'gi');
const reglastmeasuregigahertz8virgolaspace = new RegExp('8 ghz,', 'gi');
const reglastmeasuregigahertz9virgolaspace = new RegExp('9 ghz,', 'gi');
const reglastmeasuregigahertz0virgolaspace = new RegExp('0 ghz,', 'gi');
const reglastmeasuregigahertz1pointspace = new RegExp('1 ghz\\.', 'gi');
const reglastmeasuregigahertz2pointspace = new RegExp('2 ghz\\.', 'gi');
const reglastmeasuregigahertz3pointspace = new RegExp('3 ghz\\.', 'gi');
const reglastmeasuregigahertz4pointspace = new RegExp('4 ghz\\.', 'gi');
const reglastmeasuregigahertz5pointspace = new RegExp('5 ghz\\.', 'gi');
const reglastmeasuregigahertz6pointspace = new RegExp('6 ghz\\.', 'gi');
const reglastmeasuregigahertz7pointspace = new RegExp('7 ghz\\.', 'gi');
const reglastmeasuregigahertz8pointspace = new RegExp('8 ghz\\.', 'gi');
const reglastmeasuregigahertz9pointspace = new RegExp('9 ghz\\.', 'gi');
const reglastmeasuregigahertz0pointspace = new RegExp('0 ghz\\.', 'gi');
const reglastmeasuregigahertz1questionspace = new RegExp('1 ghz\\?', 'gi');
const reglastmeasuregigahertz2questionspace = new RegExp('2 ghz\\?', 'gi');
const reglastmeasuregigahertz3questionspace = new RegExp('3 ghz\\?', 'gi');
const reglastmeasuregigahertz4questionspace = new RegExp('4 ghz\\?', 'gi');
const reglastmeasuregigahertz5questionspace = new RegExp('5 ghz\\?', 'gi');
const reglastmeasuregigahertz6questionspace = new RegExp('6 ghz\\?', 'gi');
const reglastmeasuregigahertz7questionspace = new RegExp('7 ghz\\?', 'gi');
const reglastmeasuregigahertz8questionspace = new RegExp('8 ghz\\?', 'gi');
const reglastmeasuregigahertz9questionspace = new RegExp('9 ghz\\?', 'gi');
const reglastmeasuregigahertz0questionspace = new RegExp('0 ghz\\?', 'gi');

const reglastmeasureCentimeters1 = new RegExp('1cm ', 'gi');
const reglastmeasureCentimeters2 = new RegExp('2cm ', 'gi');
const reglastmeasureCentimeters3 = new RegExp('3cm ', 'gi');
const reglastmeasureCentimeters4 = new RegExp('4cm ', 'gi');
const reglastmeasureCentimeters5 = new RegExp('5cm ', 'gi');
const reglastmeasureCentimeters6 = new RegExp('6cm ', 'gi');
const reglastmeasureCentimeters7 = new RegExp('7cm ', 'gi');
const reglastmeasureCentimeters8 = new RegExp('8cm ', 'gi');
const reglastmeasureCentimeters9 = new RegExp('9cm ', 'gi');
const reglastmeasureCentimeters0 = new RegExp('0cm ', 'gi');
const reglastmeasureCentimeters1point = new RegExp('1cm\\.', 'gi');
const reglastmeasureCentimeters2point = new RegExp('2cm\\.', 'gi');
const reglastmeasureCentimeters3point = new RegExp('3cm\\.', 'gi');
const reglastmeasureCentimeters4point = new RegExp('4cm\\.', 'gi');
const reglastmeasureCentimeters5point = new RegExp('5cm\\.', 'gi');
const reglastmeasureCentimeters6point = new RegExp('6cm\\.', 'gi');
const reglastmeasureCentimeters7point = new RegExp('7cm\\.', 'gi');
const reglastmeasureCentimeters8point = new RegExp('8cm\\.', 'gi');
const reglastmeasureCentimeters9point = new RegExp('9cm\\.', 'gi');
const reglastmeasureCentimeters0point = new RegExp('0cm\\.', 'gi');
const reglastmeasureCentimeters1virgola = new RegExp('1cm,', 'gi');
const reglastmeasureCentimeters2virgola = new RegExp('2cm,', 'gi');
const reglastmeasureCentimeters3virgola = new RegExp('3cm,', 'gi');
const reglastmeasureCentimeters4virgola = new RegExp('4cm,', 'gi');
const reglastmeasureCentimeters5virgola = new RegExp('5cm,', 'gi');
const reglastmeasureCentimeters6virgola = new RegExp('6cm,', 'gi');
const reglastmeasureCentimeters7virgola = new RegExp('7cm,', 'gi');
const reglastmeasureCentimeters8virgola = new RegExp('8cm,', 'gi');
const reglastmeasureCentimeters9virgola = new RegExp('9cm,', 'gi');
const reglastmeasureCentimeters0virgola = new RegExp('0cm,', 'gi');
const reglastmeasureCentimeters1slash = new RegExp('1cm/', 'gi');
const reglastmeasureCentimeters2slash = new RegExp('2cm/', 'gi');
const reglastmeasureCentimeters3slash = new RegExp('3cm/', 'gi');
const reglastmeasureCentimeters4slash = new RegExp('4cm/', 'gi');
const reglastmeasureCentimeters5slash = new RegExp('5cm/', 'gi');
const reglastmeasureCentimeters6slash = new RegExp('6cm/', 'gi');
const reglastmeasureCentimeters7slash = new RegExp('7cm/', 'gi');
const reglastmeasureCentimeters8slash = new RegExp('8cm/', 'gi');
const reglastmeasureCentimeters9slash = new RegExp('9cm/', 'gi');
const reglastmeasureCentimeters0slash = new RegExp('0cm/', 'gi');
const reglastmeasureCentimeters1question = new RegExp('1cm\\?', 'gi');
const reglastmeasureCentimeters2question = new RegExp('2cm\\?', 'gi');
const reglastmeasureCentimeters3question = new RegExp('3cm\\?', 'gi');
const reglastmeasureCentimeters4question = new RegExp('4cm\\?', 'gi');
const reglastmeasureCentimeters5question = new RegExp('5cm\\?', 'gi');
const reglastmeasureCentimeters6question = new RegExp('6cm\\?', 'gi');
const reglastmeasureCentimeters7question = new RegExp('7cm\\?', 'gi');
const reglastmeasureCentimeters8question = new RegExp('8cm\\?', 'gi');
const reglastmeasureCentimeters9question = new RegExp('9cm\\?', 'gi');
const reglastmeasureCentimeters0question = new RegExp('0cm\\?', 'gi');
const reglastmeasureCentimeters1exclam = new RegExp('1cm!', 'gi');
const reglastmeasureCentimeters2exclam = new RegExp('2cm!', 'gi');
const reglastmeasureCentimeters3exclam = new RegExp('3cm!', 'gi');
const reglastmeasureCentimeters4exclam = new RegExp('4cm!', 'gi');
const reglastmeasureCentimeters5exclam = new RegExp('5cm!', 'gi');
const reglastmeasureCentimeters6exclam = new RegExp('6cm!', 'gi');
const reglastmeasureCentimeters7exclam = new RegExp('7cm!', 'gi');
const reglastmeasureCentimeters8exclam = new RegExp('8cm!', 'gi');
const reglastmeasureCentimeters9exclam = new RegExp('9cm!', 'gi');
const reglastmeasureCentimeters0exclam = new RegExp('0cm!', 'gi');
const reglastmeasureCentimeters1space = new RegExp('1 cm ', 'gi');
const reglastmeasureCentimeters2space = new RegExp('2 cm ', 'gi');
const reglastmeasureCentimeters3space = new RegExp('3 cm ', 'gi');
const reglastmeasureCentimeters4space = new RegExp('4 cm ', 'gi');
const reglastmeasureCentimeters5space = new RegExp('5 cm ', 'gi');
const reglastmeasureCentimeters6space = new RegExp('6 cm ', 'gi');
const reglastmeasureCentimeters7space = new RegExp('7 cm ', 'gi');
const reglastmeasureCentimeters8space = new RegExp('8 cm ', 'gi');
const reglastmeasureCentimeters9space = new RegExp('9 cm ', 'gi');
const reglastmeasureCentimeters0space = new RegExp('0 cm ', 'gi');
const reglastmeasureCentimeters1exclamspace = new RegExp('1 cm!', 'gi');
const reglastmeasureCentimeters2exclamspace = new RegExp('2 cm!', 'gi');
const reglastmeasureCentimeters3exclamspace = new RegExp('3 cm!', 'gi');
const reglastmeasureCentimeters4exclamspace = new RegExp('4 cm!', 'gi');
const reglastmeasureCentimeters5exclamspace = new RegExp('5 cm!', 'gi');
const reglastmeasureCentimeters6exclamspace = new RegExp('6 cm!', 'gi');
const reglastmeasureCentimeters7exclamspace = new RegExp('7 cm!', 'gi');
const reglastmeasureCentimeters8exclamspace = new RegExp('8 cm!', 'gi');
const reglastmeasureCentimeters9exclamspace = new RegExp('9 cm!', 'gi');
const reglastmeasureCentimeters0exclamspace = new RegExp('0 cm!', 'gi');
const reglastmeasureCentimeters1slashspace = new RegExp('1 cm/', 'gi');
const reglastmeasureCentimeters2slashspace = new RegExp('2 cm/', 'gi');
const reglastmeasureCentimeters3slashspace = new RegExp('3 cm/', 'gi');
const reglastmeasureCentimeters4slashspace = new RegExp('4 cm/', 'gi');
const reglastmeasureCentimeters5slashspace = new RegExp('5 cm/', 'gi');
const reglastmeasureCentimeters6slashspace = new RegExp('6 cm/', 'gi');
const reglastmeasureCentimeters7slashspace = new RegExp('7 cm/', 'gi');
const reglastmeasureCentimeters8slashspace = new RegExp('8 cm/', 'gi');
const reglastmeasureCentimeters9slashspace = new RegExp('9 cm/', 'gi');
const reglastmeasureCentimeters0slashspace = new RegExp('0 cm/', 'gi');
const reglastmeasureCentimeters1virgolaspace = new RegExp('1 cm,', 'gi');
const reglastmeasureCentimeters2virgolaspace = new RegExp('2 cm,', 'gi');
const reglastmeasureCentimeters3virgolaspace = new RegExp('3 cm,', 'gi');
const reglastmeasureCentimeters4virgolaspace = new RegExp('4 cm,', 'gi');
const reglastmeasureCentimeters5virgolaspace = new RegExp('5 cm,', 'gi');
const reglastmeasureCentimeters6virgolaspace = new RegExp('6 cm,', 'gi');
const reglastmeasureCentimeters7virgolaspace = new RegExp('7 cm,', 'gi');
const reglastmeasureCentimeters8virgolaspace = new RegExp('8 cm,', 'gi');
const reglastmeasureCentimeters9virgolaspace = new RegExp('9 cm,', 'gi');
const reglastmeasureCentimeters0virgolaspace = new RegExp('0 cm,', 'gi');
const reglastmeasureCentimeters1pointspace = new RegExp('1 cm\\.', 'gi');
const reglastmeasureCentimeters2pointspace = new RegExp('2 cm\\.', 'gi');
const reglastmeasureCentimeters3pointspace = new RegExp('3 cm\\.', 'gi');
const reglastmeasureCentimeters4pointspace = new RegExp('4 cm\\.', 'gi');
const reglastmeasureCentimeters5pointspace = new RegExp('5 cm\\.', 'gi');
const reglastmeasureCentimeters6pointspace = new RegExp('6 cm\\.', 'gi');
const reglastmeasureCentimeters7pointspace = new RegExp('7 cm\\.', 'gi');
const reglastmeasureCentimeters8pointspace = new RegExp('8 cm\\.', 'gi');
const reglastmeasureCentimeters9pointspace = new RegExp('9 cm\\.', 'gi');
const reglastmeasureCentimeters0pointspace = new RegExp('0 cm\\.', 'gi');
const reglastmeasureCentimeters1questionspace = new RegExp('1 cm\\?', 'gi');
const reglastmeasureCentimeters2questionspace = new RegExp('2 cm\\?', 'gi');
const reglastmeasureCentimeters3questionspace = new RegExp('3 cm\\?', 'gi');
const reglastmeasureCentimeters4questionspace = new RegExp('4 cm\\?', 'gi');
const reglastmeasureCentimeters5questionspace = new RegExp('5 cm\\?', 'gi');
const reglastmeasureCentimeters6questionspace = new RegExp('6 cm\\?', 'gi');
const reglastmeasureCentimeters7questionspace = new RegExp('7 cm\\?', 'gi');
const reglastmeasureCentimeters8questionspace = new RegExp('8 cm\\?', 'gi');
const reglastmeasureCentimeters9questionspace = new RegExp('9 cm\\?', 'gi');
const reglastmeasureCentimeters0questionspace = new RegExp('0 cm\\?', 'gi');

const reglastmeasureounces1 = new RegExp('1oz ', 'gi');
const reglastmeasureounces2 = new RegExp('2oz ', 'gi');
const reglastmeasureounces3 = new RegExp('3oz ', 'gi');
const reglastmeasureounces4 = new RegExp('4oz ', 'gi');
const reglastmeasureounces5 = new RegExp('5oz ', 'gi');
const reglastmeasureounces6 = new RegExp('6oz ', 'gi');
const reglastmeasureounces7 = new RegExp('7oz ', 'gi');
const reglastmeasureounces8 = new RegExp('8oz ', 'gi');
const reglastmeasureounces9 = new RegExp('9oz ', 'gi');
const reglastmeasureounces0 = new RegExp('0oz ', 'gi');
const reglastmeasureounces1point = new RegExp('1oz\\.', 'gi');
const reglastmeasureounces2point = new RegExp('2oz\\.', 'gi');
const reglastmeasureounces3point = new RegExp('3oz\\.', 'gi');
const reglastmeasureounces4point = new RegExp('4oz\\.', 'gi');
const reglastmeasureounces5point = new RegExp('5oz\\.', 'gi');
const reglastmeasureounces6point = new RegExp('6oz\\.', 'gi');
const reglastmeasureounces7point = new RegExp('7oz\\.', 'gi');
const reglastmeasureounces8point = new RegExp('8oz\\.', 'gi');
const reglastmeasureounces9point = new RegExp('9oz\\.', 'gi');
const reglastmeasureounces0point = new RegExp('0oz\\.', 'gi');
const reglastmeasureounces1virgola = new RegExp('1oz,', 'gi');
const reglastmeasureounces2virgola = new RegExp('2oz,', 'gi');
const reglastmeasureounces3virgola = new RegExp('3oz,', 'gi');
const reglastmeasureounces4virgola = new RegExp('4oz,', 'gi');
const reglastmeasureounces5virgola = new RegExp('5oz,', 'gi');
const reglastmeasureounces6virgola = new RegExp('6oz,', 'gi');
const reglastmeasureounces7virgola = new RegExp('7oz,', 'gi');
const reglastmeasureounces8virgola = new RegExp('8oz,', 'gi');
const reglastmeasureounces9virgola = new RegExp('9oz,', 'gi');
const reglastmeasureounces0virgola = new RegExp('0oz,', 'gi');
const reglastmeasureounces1slash = new RegExp('1oz/', 'gi');
const reglastmeasureounces2slash = new RegExp('2oz/', 'gi');
const reglastmeasureounces3slash = new RegExp('3oz/', 'gi');
const reglastmeasureounces4slash = new RegExp('4oz/', 'gi');
const reglastmeasureounces5slash = new RegExp('5oz/', 'gi');
const reglastmeasureounces6slash = new RegExp('6oz/', 'gi');
const reglastmeasureounces7slash = new RegExp('7oz/', 'gi');
const reglastmeasureounces8slash = new RegExp('8oz/', 'gi');
const reglastmeasureounces9slash = new RegExp('9oz/', 'gi');
const reglastmeasureounces0slash = new RegExp('0oz/', 'gi');
const reglastmeasureounces1question = new RegExp('1oz\\?', 'gi');
const reglastmeasureounces2question = new RegExp('2oz\\?', 'gi');
const reglastmeasureounces3question = new RegExp('3oz\\?', 'gi');
const reglastmeasureounces4question = new RegExp('4oz\\?', 'gi');
const reglastmeasureounces5question = new RegExp('5oz\\?', 'gi');
const reglastmeasureounces6question = new RegExp('6oz\\?', 'gi');
const reglastmeasureounces7question = new RegExp('7oz\\?', 'gi');
const reglastmeasureounces8question = new RegExp('8oz\\?', 'gi');
const reglastmeasureounces9question = new RegExp('9oz\\?', 'gi');
const reglastmeasureounces0question = new RegExp('0oz\\?', 'gi');
const reglastmeasureounces1exclam = new RegExp('1oz!', 'gi');
const reglastmeasureounces2exclam = new RegExp('2oz!', 'gi');
const reglastmeasureounces3exclam = new RegExp('3oz!', 'gi');
const reglastmeasureounces4exclam = new RegExp('4oz!', 'gi');
const reglastmeasureounces5exclam = new RegExp('5oz!', 'gi');
const reglastmeasureounces6exclam = new RegExp('6oz!', 'gi');
const reglastmeasureounces7exclam = new RegExp('7oz!', 'gi');
const reglastmeasureounces8exclam = new RegExp('8oz!', 'gi');
const reglastmeasureounces9exclam = new RegExp('9oz!', 'gi');
const reglastmeasureounces0exclam = new RegExp('0oz!', 'gi');
const reglastmeasureounces1space = new RegExp('1 oz ', 'gi');
const reglastmeasureounces2space = new RegExp('2 oz ', 'gi');
const reglastmeasureounces3space = new RegExp('3 oz ', 'gi');
const reglastmeasureounces4space = new RegExp('4 oz ', 'gi');
const reglastmeasureounces5space = new RegExp('5 oz ', 'gi');
const reglastmeasureounces6space = new RegExp('6 oz ', 'gi');
const reglastmeasureounces7space = new RegExp('7 oz ', 'gi');
const reglastmeasureounces8space = new RegExp('8 oz ', 'gi');
const reglastmeasureounces9space = new RegExp('9 oz ', 'gi');
const reglastmeasureounces0space = new RegExp('0 oz ', 'gi');
const reglastmeasureounces1exclamspace = new RegExp('1 oz!', 'gi');
const reglastmeasureounces2exclamspace = new RegExp('2 oz!', 'gi');
const reglastmeasureounces3exclamspace = new RegExp('3 oz!', 'gi');
const reglastmeasureounces4exclamspace = new RegExp('4 oz!', 'gi');
const reglastmeasureounces5exclamspace = new RegExp('5 oz!', 'gi');
const reglastmeasureounces6exclamspace = new RegExp('6 oz!', 'gi');
const reglastmeasureounces7exclamspace = new RegExp('7 oz!', 'gi');
const reglastmeasureounces8exclamspace = new RegExp('8 oz!', 'gi');
const reglastmeasureounces9exclamspace = new RegExp('9 oz!', 'gi');
const reglastmeasureounces0exclamspace = new RegExp('0 oz!', 'gi');
const reglastmeasureounces1slashspace = new RegExp('1 oz/', 'gi');
const reglastmeasureounces2slashspace = new RegExp('2 oz/', 'gi');
const reglastmeasureounces3slashspace = new RegExp('3 oz/', 'gi');
const reglastmeasureounces4slashspace = new RegExp('4 oz/', 'gi');
const reglastmeasureounces5slashspace = new RegExp('5 oz/', 'gi');
const reglastmeasureounces6slashspace = new RegExp('6 oz/', 'gi');
const reglastmeasureounces7slashspace = new RegExp('7 oz/', 'gi');
const reglastmeasureounces8slashspace = new RegExp('8 oz/', 'gi');
const reglastmeasureounces9slashspace = new RegExp('9 oz/', 'gi');
const reglastmeasureounces0slashspace = new RegExp('0 oz/', 'gi');
const reglastmeasureounces1virgolaspace = new RegExp('1 oz,', 'gi');
const reglastmeasureounces2virgolaspace = new RegExp('2 oz,', 'gi');
const reglastmeasureounces3virgolaspace = new RegExp('3 oz,', 'gi');
const reglastmeasureounces4virgolaspace = new RegExp('4 oz,', 'gi');
const reglastmeasureounces5virgolaspace = new RegExp('5 oz,', 'gi');
const reglastmeasureounces6virgolaspace = new RegExp('6 oz,', 'gi');
const reglastmeasureounces7virgolaspace = new RegExp('7 oz,', 'gi');
const reglastmeasureounces8virgolaspace = new RegExp('8 oz,', 'gi');
const reglastmeasureounces9virgolaspace = new RegExp('9 oz,', 'gi');
const reglastmeasureounces0virgolaspace = new RegExp('0 oz,', 'gi');
const reglastmeasureounces1pointspace = new RegExp('1 oz\\.', 'gi');
const reglastmeasureounces2pointspace = new RegExp('2 oz\\.', 'gi');
const reglastmeasureounces3pointspace = new RegExp('3 oz\\.', 'gi');
const reglastmeasureounces4pointspace = new RegExp('4 oz\\.', 'gi');
const reglastmeasureounces5pointspace = new RegExp('5 oz\\.', 'gi');
const reglastmeasureounces6pointspace = new RegExp('6 oz\\.', 'gi');
const reglastmeasureounces7pointspace = new RegExp('7 oz\\.', 'gi');
const reglastmeasureounces8pointspace = new RegExp('8 oz\\.', 'gi');
const reglastmeasureounces9pointspace = new RegExp('9 oz\\.', 'gi');
const reglastmeasureounces0pointspace = new RegExp('0 oz\\.', 'gi');
const reglastmeasureounces1questionspace = new RegExp('1 oz\\?', 'gi');
const reglastmeasureounces2questionspace = new RegExp('2 oz\\?', 'gi');
const reglastmeasureounces3questionspace = new RegExp('3 oz\\?', 'gi');
const reglastmeasureounces4questionspace = new RegExp('4 oz\\?', 'gi');
const reglastmeasureounces5questionspace = new RegExp('5 oz\\?', 'gi');
const reglastmeasureounces6questionspace = new RegExp('6 oz\\?', 'gi');
const reglastmeasureounces7questionspace = new RegExp('7 oz\\?', 'gi');
const reglastmeasureounces8questionspace = new RegExp('8 oz\\?', 'gi');
const reglastmeasureounces9questionspace = new RegExp('9 oz\\?', 'gi');
const reglastmeasureounces0questionspace = new RegExp('0 oz\\?', 'gi');

const reglastmeasureliters1 = new RegExp('1l ', 'gi');
const reglastmeasureliters2 = new RegExp('2l ', 'gi');
const reglastmeasureliters3 = new RegExp('3l ', 'gi');
const reglastmeasureliters4 = new RegExp('4l ', 'gi');
const reglastmeasureliters5 = new RegExp('5l ', 'gi');
const reglastmeasureliters6 = new RegExp('6l ', 'gi');
const reglastmeasureliters7 = new RegExp('7l ', 'gi');
const reglastmeasureliters8 = new RegExp('8l ', 'gi');
const reglastmeasureliters9 = new RegExp('9l ', 'gi');
const reglastmeasureliters0 = new RegExp('0l ', 'gi');
const reglastmeasureliters1point = new RegExp('1l\\.', 'gi');
const reglastmeasureliters2point = new RegExp('2l\\.', 'gi');
const reglastmeasureliters3point = new RegExp('3l\\.', 'gi');
const reglastmeasureliters4point = new RegExp('4l\\.', 'gi');
const reglastmeasureliters5point = new RegExp('5l\\.', 'gi');
const reglastmeasureliters6point = new RegExp('6l\\.', 'gi');
const reglastmeasureliters7point = new RegExp('7l\\.', 'gi');
const reglastmeasureliters8point = new RegExp('8l\\.', 'gi');
const reglastmeasureliters9point = new RegExp('9l\\.', 'gi');
const reglastmeasureliters0point = new RegExp('0l\\.', 'gi');
const reglastmeasureliters1virgola = new RegExp('1l,', 'gi');
const reglastmeasureliters2virgola = new RegExp('2l,', 'gi');
const reglastmeasureliters3virgola = new RegExp('3l,', 'gi');
const reglastmeasureliters4virgola = new RegExp('4l,', 'gi');
const reglastmeasureliters5virgola = new RegExp('5l,', 'gi');
const reglastmeasureliters6virgola = new RegExp('6l,', 'gi');
const reglastmeasureliters7virgola = new RegExp('7l,', 'gi');
const reglastmeasureliters8virgola = new RegExp('8l,', 'gi');
const reglastmeasureliters9virgola = new RegExp('9l,', 'gi');
const reglastmeasureliters0virgola = new RegExp('0l,', 'gi');
const reglastmeasureliters1slash = new RegExp('1l/', 'gi');
const reglastmeasureliters2slash = new RegExp('2l/', 'gi');
const reglastmeasureliters3slash = new RegExp('3l/', 'gi');
const reglastmeasureliters4slash = new RegExp('4l/', 'gi');
const reglastmeasureliters5slash = new RegExp('5l/', 'gi');
const reglastmeasureliters6slash = new RegExp('6l/', 'gi');
const reglastmeasureliters7slash = new RegExp('7l/', 'gi');
const reglastmeasureliters8slash = new RegExp('8l/', 'gi');
const reglastmeasureliters9slash = new RegExp('9l/', 'gi');
const reglastmeasureliters0slash = new RegExp('0l/', 'gi');
const reglastmeasureliters1question = new RegExp('1l\\?', 'gi');
const reglastmeasureliters2question = new RegExp('2l\\?', 'gi');
const reglastmeasureliters3question = new RegExp('3l\\?', 'gi');
const reglastmeasureliters4question = new RegExp('4l\\?', 'gi');
const reglastmeasureliters5question = new RegExp('5l\\?', 'gi');
const reglastmeasureliters6question = new RegExp('6l\\?', 'gi');
const reglastmeasureliters7question = new RegExp('7l\\?', 'gi');
const reglastmeasureliters8question = new RegExp('8l\\?', 'gi');
const reglastmeasureliters9question = new RegExp('9l\\?', 'gi');
const reglastmeasureliters0question = new RegExp('0l\\?', 'gi');
const reglastmeasureliters1exclam = new RegExp('1l!', 'gi');
const reglastmeasureliters2exclam = new RegExp('2l!', 'gi');
const reglastmeasureliters3exclam = new RegExp('3l!', 'gi');
const reglastmeasureliters4exclam = new RegExp('4l!', 'gi');
const reglastmeasureliters5exclam = new RegExp('5l!', 'gi');
const reglastmeasureliters6exclam = new RegExp('6l!', 'gi');
const reglastmeasureliters7exclam = new RegExp('7l!', 'gi');
const reglastmeasureliters8exclam = new RegExp('8l!', 'gi');
const reglastmeasureliters9exclam = new RegExp('9l!', 'gi');
const reglastmeasureliters0exclam = new RegExp('0l!', 'gi');
const reglastmeasureliters1space = new RegExp('1 l ', 'gi');
const reglastmeasureliters2space = new RegExp('2 l ', 'gi');
const reglastmeasureliters3space = new RegExp('3 l ', 'gi');
const reglastmeasureliters4space = new RegExp('4 l ', 'gi');
const reglastmeasureliters5space = new RegExp('5 l ', 'gi');
const reglastmeasureliters6space = new RegExp('6 l ', 'gi');
const reglastmeasureliters7space = new RegExp('7 l ', 'gi');
const reglastmeasureliters8space = new RegExp('8 l ', 'gi');
const reglastmeasureliters9space = new RegExp('9 l ', 'gi');
const reglastmeasureliters0space = new RegExp('0 l ', 'gi');
const reglastmeasureliters1exclamspace = new RegExp('1 l!', 'gi');
const reglastmeasureliters2exclamspace = new RegExp('2 l!', 'gi');
const reglastmeasureliters3exclamspace = new RegExp('3 l!', 'gi');
const reglastmeasureliters4exclamspace = new RegExp('4 l!', 'gi');
const reglastmeasureliters5exclamspace = new RegExp('5 l!', 'gi');
const reglastmeasureliters6exclamspace = new RegExp('6 l!', 'gi');
const reglastmeasureliters7exclamspace = new RegExp('7 l!', 'gi');
const reglastmeasureliters8exclamspace = new RegExp('8 l!', 'gi');
const reglastmeasureliters9exclamspace = new RegExp('9 l!', 'gi');
const reglastmeasureliters0exclamspace = new RegExp('0 l!', 'gi');
const reglastmeasureliters1slashspace = new RegExp('1 l/', 'gi');
const reglastmeasureliters2slashspace = new RegExp('2 l/', 'gi');
const reglastmeasureliters3slashspace = new RegExp('3 l/', 'gi');
const reglastmeasureliters4slashspace = new RegExp('4 l/', 'gi');
const reglastmeasureliters5slashspace = new RegExp('5 l/', 'gi');
const reglastmeasureliters6slashspace = new RegExp('6 l/', 'gi');
const reglastmeasureliters7slashspace = new RegExp('7 l/', 'gi');
const reglastmeasureliters8slashspace = new RegExp('8 l/', 'gi');
const reglastmeasureliters9slashspace = new RegExp('9 l/', 'gi');
const reglastmeasureliters0slashspace = new RegExp('0 l/', 'gi');
const reglastmeasureliters1virgolaspace = new RegExp('1 l,', 'gi');
const reglastmeasureliters2virgolaspace = new RegExp('2 l,', 'gi');
const reglastmeasureliters3virgolaspace = new RegExp('3 l,', 'gi');
const reglastmeasureliters4virgolaspace = new RegExp('4 l,', 'gi');
const reglastmeasureliters5virgolaspace = new RegExp('5 l,', 'gi');
const reglastmeasureliters6virgolaspace = new RegExp('6 l,', 'gi');
const reglastmeasureliters7virgolaspace = new RegExp('7 l,', 'gi');
const reglastmeasureliters8virgolaspace = new RegExp('8 l,', 'gi');
const reglastmeasureliters9virgolaspace = new RegExp('9 l,', 'gi');
const reglastmeasureliters0virgolaspace = new RegExp('0 l,', 'gi');
const reglastmeasureliters1pointspace = new RegExp('1 l\\.', 'gi');
const reglastmeasureliters2pointspace = new RegExp('2 l\\.', 'gi');
const reglastmeasureliters3pointspace = new RegExp('3 l\\.', 'gi');
const reglastmeasureliters4pointspace = new RegExp('4 l\\.', 'gi');
const reglastmeasureliters5pointspace = new RegExp('5 l\\.', 'gi');
const reglastmeasureliters6pointspace = new RegExp('6 l\\.', 'gi');
const reglastmeasureliters7pointspace = new RegExp('7 l\\.', 'gi');
const reglastmeasureliters8pointspace = new RegExp('8 l\\.', 'gi');
const reglastmeasureliters9pointspace = new RegExp('9 l\\.', 'gi');
const reglastmeasureliters0pointspace = new RegExp('0 l\\.', 'gi');
const reglastmeasureliters1questionspace = new RegExp('1 l\\?', 'gi');
const reglastmeasureliters2questionspace = new RegExp('2 l\\?', 'gi');
const reglastmeasureliters3questionspace = new RegExp('3 l\\?', 'gi');
const reglastmeasureliters4questionspace = new RegExp('4 l\\?', 'gi');
const reglastmeasureliters5questionspace = new RegExp('5 l\\?', 'gi');
const reglastmeasureliters6questionspace = new RegExp('6 l\\?', 'gi');
const reglastmeasureliters7questionspace = new RegExp('7 l\\?', 'gi');
const reglastmeasureliters8questionspace = new RegExp('8 l\\?', 'gi');
const reglastmeasureliters9questionspace = new RegExp('9 l\\?', 'gi');
const reglastmeasureliters0questionspace = new RegExp('0 l\\?', 'gi');

const reglastmeasurepints1 = new RegExp('1pt ', 'gi');
const reglastmeasurepints2 = new RegExp('2pt ', 'gi');
const reglastmeasurepints3 = new RegExp('3pt ', 'gi');
const reglastmeasurepints4 = new RegExp('4pt ', 'gi');
const reglastmeasurepints5 = new RegExp('5pt ', 'gi');
const reglastmeasurepints6 = new RegExp('6pt ', 'gi');
const reglastmeasurepints7 = new RegExp('7pt ', 'gi');
const reglastmeasurepints8 = new RegExp('8pt ', 'gi');
const reglastmeasurepints9 = new RegExp('9pt ', 'gi');
const reglastmeasurepints0 = new RegExp('0pt ', 'gi');
const reglastmeasurepints1point = new RegExp('1pt\\.', 'gi');
const reglastmeasurepints2point = new RegExp('2pt\\.', 'gi');
const reglastmeasurepints3point = new RegExp('3pt\\.', 'gi');
const reglastmeasurepints4point = new RegExp('4pt\\.', 'gi');
const reglastmeasurepints5point = new RegExp('5pt\\.', 'gi');
const reglastmeasurepints6point = new RegExp('6pt\\.', 'gi');
const reglastmeasurepints7point = new RegExp('7pt\\.', 'gi');
const reglastmeasurepints8point = new RegExp('8pt\\.', 'gi');
const reglastmeasurepints9point = new RegExp('9pt\\.', 'gi');
const reglastmeasurepints0point = new RegExp('0pt\\.', 'gi');
const reglastmeasurepints1virgola = new RegExp('1pt,', 'gi');
const reglastmeasurepints2virgola = new RegExp('2pt,', 'gi');
const reglastmeasurepints3virgola = new RegExp('3pt,', 'gi');
const reglastmeasurepints4virgola = new RegExp('4pt,', 'gi');
const reglastmeasurepints5virgola = new RegExp('5pt,', 'gi');
const reglastmeasurepints6virgola = new RegExp('6pt,', 'gi');
const reglastmeasurepints7virgola = new RegExp('7pt,', 'gi');
const reglastmeasurepints8virgola = new RegExp('8pt,', 'gi');
const reglastmeasurepints9virgola = new RegExp('9pt,', 'gi');
const reglastmeasurepints0virgola = new RegExp('0pt,', 'gi');
const reglastmeasurepints1slash = new RegExp('1pt/', 'gi');
const reglastmeasurepints2slash = new RegExp('2pt/', 'gi');
const reglastmeasurepints3slash = new RegExp('3pt/', 'gi');
const reglastmeasurepints4slash = new RegExp('4pt/', 'gi');
const reglastmeasurepints5slash = new RegExp('5pt/', 'gi');
const reglastmeasurepints6slash = new RegExp('6pt/', 'gi');
const reglastmeasurepints7slash = new RegExp('7pt/', 'gi');
const reglastmeasurepints8slash = new RegExp('8pt/', 'gi');
const reglastmeasurepints9slash = new RegExp('9pt/', 'gi');
const reglastmeasurepints0slash = new RegExp('0pt/', 'gi');
const reglastmeasurepints1question = new RegExp('1pt\\?', 'gi');
const reglastmeasurepints2question = new RegExp('2pt\\?', 'gi');
const reglastmeasurepints3question = new RegExp('3pt\\?', 'gi');
const reglastmeasurepints4question = new RegExp('4pt\\?', 'gi');
const reglastmeasurepints5question = new RegExp('5pt\\?', 'gi');
const reglastmeasurepints6question = new RegExp('6pt\\?', 'gi');
const reglastmeasurepints7question = new RegExp('7pt\\?', 'gi');
const reglastmeasurepints8question = new RegExp('8pt\\?', 'gi');
const reglastmeasurepints9question = new RegExp('9pt\\?', 'gi');
const reglastmeasurepints0question = new RegExp('0pt\\?', 'gi');
const reglastmeasurepints1exclam = new RegExp('1pt!', 'gi');
const reglastmeasurepints2exclam = new RegExp('2pt!', 'gi');
const reglastmeasurepints3exclam = new RegExp('3pt!', 'gi');
const reglastmeasurepints4exclam = new RegExp('4pt!', 'gi');
const reglastmeasurepints5exclam = new RegExp('5pt!', 'gi');
const reglastmeasurepints6exclam = new RegExp('6pt!', 'gi');
const reglastmeasurepints7exclam = new RegExp('7pt!', 'gi');
const reglastmeasurepints8exclam = new RegExp('8pt!', 'gi');
const reglastmeasurepints9exclam = new RegExp('9pt!', 'gi');
const reglastmeasurepints0exclam = new RegExp('0pt!', 'gi');
const reglastmeasurepints1space = new RegExp('1 pt ', 'gi');
const reglastmeasurepints2space = new RegExp('2 pt ', 'gi');
const reglastmeasurepints3space = new RegExp('3 pt ', 'gi');
const reglastmeasurepints4space = new RegExp('4 pt ', 'gi');
const reglastmeasurepints5space = new RegExp('5 pt ', 'gi');
const reglastmeasurepints6space = new RegExp('6 pt ', 'gi');
const reglastmeasurepints7space = new RegExp('7 pt ', 'gi');
const reglastmeasurepints8space = new RegExp('8 pt ', 'gi');
const reglastmeasurepints9space = new RegExp('9 pt ', 'gi');
const reglastmeasurepints0space = new RegExp('0 pt ', 'gi');
const reglastmeasurepints1exclamspace = new RegExp('1 pt!', 'gi');
const reglastmeasurepints2exclamspace = new RegExp('2 pt!', 'gi');
const reglastmeasurepints3exclamspace = new RegExp('3 pt!', 'gi');
const reglastmeasurepints4exclamspace = new RegExp('4 pt!', 'gi');
const reglastmeasurepints5exclamspace = new RegExp('5 pt!', 'gi');
const reglastmeasurepints6exclamspace = new RegExp('6 pt!', 'gi');
const reglastmeasurepints7exclamspace = new RegExp('7 pt!', 'gi');
const reglastmeasurepints8exclamspace = new RegExp('8 pt!', 'gi');
const reglastmeasurepints9exclamspace = new RegExp('9 pt!', 'gi');
const reglastmeasurepints0exclamspace = new RegExp('0 pt!', 'gi');
const reglastmeasurepints1slashspace = new RegExp('1 pt/', 'gi');
const reglastmeasurepints2slashspace = new RegExp('2 pt/', 'gi');
const reglastmeasurepints3slashspace = new RegExp('3 pt/', 'gi');
const reglastmeasurepints4slashspace = new RegExp('4 pt/', 'gi');
const reglastmeasurepints5slashspace = new RegExp('5 pt/', 'gi');
const reglastmeasurepints6slashspace = new RegExp('6 pt/', 'gi');
const reglastmeasurepints7slashspace = new RegExp('7 pt/', 'gi');
const reglastmeasurepints8slashspace = new RegExp('8 pt/', 'gi');
const reglastmeasurepints9slashspace = new RegExp('9 pt/', 'gi');
const reglastmeasurepints0slashspace = new RegExp('0 pt/', 'gi');
const reglastmeasurepints1virgolaspace = new RegExp('1 pt,', 'gi');
const reglastmeasurepints2virgolaspace = new RegExp('2 pt,', 'gi');
const reglastmeasurepints3virgolaspace = new RegExp('3 pt,', 'gi');
const reglastmeasurepints4virgolaspace = new RegExp('4 pt,', 'gi');
const reglastmeasurepints5virgolaspace = new RegExp('5 pt,', 'gi');
const reglastmeasurepints6virgolaspace = new RegExp('6 pt,', 'gi');
const reglastmeasurepints7virgolaspace = new RegExp('7 pt,', 'gi');
const reglastmeasurepints8virgolaspace = new RegExp('8 pt,', 'gi');
const reglastmeasurepints9virgolaspace = new RegExp('9 pt,', 'gi');
const reglastmeasurepints0virgolaspace = new RegExp('0 pt,', 'gi');
const reglastmeasurepints1pointspace = new RegExp('1 pt\\.', 'gi');
const reglastmeasurepints2pointspace = new RegExp('2 pt\\.', 'gi');
const reglastmeasurepints3pointspace = new RegExp('3 pt\\.', 'gi');
const reglastmeasurepints4pointspace = new RegExp('4 pt\\.', 'gi');
const reglastmeasurepints5pointspace = new RegExp('5 pt\\.', 'gi');
const reglastmeasurepints6pointspace = new RegExp('6 pt\\.', 'gi');
const reglastmeasurepints7pointspace = new RegExp('7 pt\\.', 'gi');
const reglastmeasurepints8pointspace = new RegExp('8 pt\\.', 'gi');
const reglastmeasurepints9pointspace = new RegExp('9 pt\\.', 'gi');
const reglastmeasurepints0pointspace = new RegExp('0 pt\\.', 'gi');
const reglastmeasurepints1questionspace = new RegExp('1 pt\\?', 'gi');
const reglastmeasurepints2questionspace = new RegExp('2 pt\\?', 'gi');
const reglastmeasurepints3questionspace = new RegExp('3 pt\\?', 'gi');
const reglastmeasurepints4questionspace = new RegExp('4 pt\\?', 'gi');
const reglastmeasurepints5questionspace = new RegExp('5 pt\\?', 'gi');
const reglastmeasurepints6questionspace = new RegExp('6 pt\\?', 'gi');
const reglastmeasurepints7questionspace = new RegExp('7 pt\\?', 'gi');
const reglastmeasurepints8questionspace = new RegExp('8 pt\\?', 'gi');
const reglastmeasurepints9questionspace = new RegExp('9 pt\\?', 'gi');
const reglastmeasurepints0questionspace = new RegExp('0 pt\\?', 'gi');

const reglastmeasuregrams1 = new RegExp('1g ', 'gi');
const reglastmeasuregrams2 = new RegExp('2g ', 'gi');
const reglastmeasuregrams3 = new RegExp('3g ', 'gi');
const reglastmeasuregrams4 = new RegExp('4g ', 'gi');
const reglastmeasuregrams5 = new RegExp('5g ', 'gi');
const reglastmeasuregrams6 = new RegExp('6g ', 'gi');
const reglastmeasuregrams7 = new RegExp('7g ', 'gi');
const reglastmeasuregrams8 = new RegExp('8g ', 'gi');
const reglastmeasuregrams9 = new RegExp('9g ', 'gi');
const reglastmeasuregrams0 = new RegExp('0g ', 'gi');
const reglastmeasuregrams1point = new RegExp('1g\\.', 'gi');
const reglastmeasuregrams2point = new RegExp('2g\\.', 'gi');
const reglastmeasuregrams3point = new RegExp('3g\\.', 'gi');
const reglastmeasuregrams4point = new RegExp('4g\\.', 'gi');
const reglastmeasuregrams5point = new RegExp('5g\\.', 'gi');
const reglastmeasuregrams6point = new RegExp('6g\\.', 'gi');
const reglastmeasuregrams7point = new RegExp('7g\\.', 'gi');
const reglastmeasuregrams8point = new RegExp('8g\\.', 'gi');
const reglastmeasuregrams9point = new RegExp('9g\\.', 'gi');
const reglastmeasuregrams0point = new RegExp('0g\\.', 'gi');
const reglastmeasuregrams1virgola = new RegExp('1g,', 'gi');
const reglastmeasuregrams2virgola = new RegExp('2g,', 'gi');
const reglastmeasuregrams3virgola = new RegExp('3g,', 'gi');
const reglastmeasuregrams4virgola = new RegExp('4g,', 'gi');
const reglastmeasuregrams5virgola = new RegExp('5g,', 'gi');
const reglastmeasuregrams6virgola = new RegExp('6g,', 'gi');
const reglastmeasuregrams7virgola = new RegExp('7g,', 'gi');
const reglastmeasuregrams8virgola = new RegExp('8g,', 'gi');
const reglastmeasuregrams9virgola = new RegExp('9g,', 'gi');
const reglastmeasuregrams0virgola = new RegExp('0g,', 'gi');
const reglastmeasuregrams1slash = new RegExp('1g/', 'gi');
const reglastmeasuregrams2slash = new RegExp('2g/', 'gi');
const reglastmeasuregrams3slash = new RegExp('3g/', 'gi');
const reglastmeasuregrams4slash = new RegExp('4g/', 'gi');
const reglastmeasuregrams5slash = new RegExp('5g/', 'gi');
const reglastmeasuregrams6slash = new RegExp('6g/', 'gi');
const reglastmeasuregrams7slash = new RegExp('7g/', 'gi');
const reglastmeasuregrams8slash = new RegExp('8g/', 'gi');
const reglastmeasuregrams9slash = new RegExp('9g/', 'gi');
const reglastmeasuregrams0slash = new RegExp('0g/', 'gi');
const reglastmeasuregrams1question = new RegExp('1g\\?', 'gi');
const reglastmeasuregrams2question = new RegExp('2g\\?', 'gi');
const reglastmeasuregrams3question = new RegExp('3g\\?', 'gi');
const reglastmeasuregrams4question = new RegExp('4g\\?', 'gi');
const reglastmeasuregrams5question = new RegExp('5g\\?', 'gi');
const reglastmeasuregrams6question = new RegExp('6g\\?', 'gi');
const reglastmeasuregrams7question = new RegExp('7g\\?', 'gi');
const reglastmeasuregrams8question = new RegExp('8g\\?', 'gi');
const reglastmeasuregrams9question = new RegExp('9g\\?', 'gi');
const reglastmeasuregrams0question = new RegExp('0g\\?', 'gi');
const reglastmeasuregrams1exclam = new RegExp('1g!', 'gi');
const reglastmeasuregrams2exclam = new RegExp('2g!', 'gi');
const reglastmeasuregrams3exclam = new RegExp('3g!', 'gi');
const reglastmeasuregrams4exclam = new RegExp('4g!', 'gi');
const reglastmeasuregrams5exclam = new RegExp('5g!', 'gi');
const reglastmeasuregrams6exclam = new RegExp('6g!', 'gi');
const reglastmeasuregrams7exclam = new RegExp('7g!', 'gi');
const reglastmeasuregrams8exclam = new RegExp('8g!', 'gi');
const reglastmeasuregrams9exclam = new RegExp('9g!', 'gi');
const reglastmeasuregrams0exclam = new RegExp('0g!', 'gi');
const reglastmeasuregrams1space = new RegExp('1 g ', 'gi');
const reglastmeasuregrams2space = new RegExp('2 g ', 'gi');
const reglastmeasuregrams3space = new RegExp('3 g ', 'gi');
const reglastmeasuregrams4space = new RegExp('4 g ', 'gi');
const reglastmeasuregrams5space = new RegExp('5 g ', 'gi');
const reglastmeasuregrams6space = new RegExp('6 g ', 'gi');
const reglastmeasuregrams7space = new RegExp('7 g ', 'gi');
const reglastmeasuregrams8space = new RegExp('8 g ', 'gi');
const reglastmeasuregrams9space = new RegExp('9 g ', 'gi');
const reglastmeasuregrams0space = new RegExp('0 g ', 'gi');
const reglastmeasuregrams1exclamspace = new RegExp('1 g!', 'gi');
const reglastmeasuregrams2exclamspace = new RegExp('2 g!', 'gi');
const reglastmeasuregrams3exclamspace = new RegExp('3 g!', 'gi');
const reglastmeasuregrams4exclamspace = new RegExp('4 g!', 'gi');
const reglastmeasuregrams5exclamspace = new RegExp('5 g!', 'gi');
const reglastmeasuregrams6exclamspace = new RegExp('6 g!', 'gi');
const reglastmeasuregrams7exclamspace = new RegExp('7 g!', 'gi');
const reglastmeasuregrams8exclamspace = new RegExp('8 g!', 'gi');
const reglastmeasuregrams9exclamspace = new RegExp('9 g!', 'gi');
const reglastmeasuregrams0exclamspace = new RegExp('0 g!', 'gi');
const reglastmeasuregrams1slashspace = new RegExp('1 g/', 'gi');
const reglastmeasuregrams2slashspace = new RegExp('2 g/', 'gi');
const reglastmeasuregrams3slashspace = new RegExp('3 g/', 'gi');
const reglastmeasuregrams4slashspace = new RegExp('4 g/', 'gi');
const reglastmeasuregrams5slashspace = new RegExp('5 g/', 'gi');
const reglastmeasuregrams6slashspace = new RegExp('6 g/', 'gi');
const reglastmeasuregrams7slashspace = new RegExp('7 g/', 'gi');
const reglastmeasuregrams8slashspace = new RegExp('8 g/', 'gi');
const reglastmeasuregrams9slashspace = new RegExp('9 g/', 'gi');
const reglastmeasuregrams0slashspace = new RegExp('0 g/', 'gi');
const reglastmeasuregrams1virgolaspace = new RegExp('1 g,', 'gi');
const reglastmeasuregrams2virgolaspace = new RegExp('2 g,', 'gi');
const reglastmeasuregrams3virgolaspace = new RegExp('3 g,', 'gi');
const reglastmeasuregrams4virgolaspace = new RegExp('4 g,', 'gi');
const reglastmeasuregrams5virgolaspace = new RegExp('5 g,', 'gi');
const reglastmeasuregrams6virgolaspace = new RegExp('6 g,', 'gi');
const reglastmeasuregrams7virgolaspace = new RegExp('7 g,', 'gi');
const reglastmeasuregrams8virgolaspace = new RegExp('8 g,', 'gi');
const reglastmeasuregrams9virgolaspace = new RegExp('9 g,', 'gi');
const reglastmeasuregrams0virgolaspace = new RegExp('0 g,', 'gi');
const reglastmeasuregrams1pointspace = new RegExp('1 g\\.', 'gi');
const reglastmeasuregrams2pointspace = new RegExp('2 g\\.', 'gi');
const reglastmeasuregrams3pointspace = new RegExp('3 g\\.', 'gi');
const reglastmeasuregrams4pointspace = new RegExp('4 g\\.', 'gi');
const reglastmeasuregrams5pointspace = new RegExp('5 g\\.', 'gi');
const reglastmeasuregrams6pointspace = new RegExp('6 g\\.', 'gi');
const reglastmeasuregrams7pointspace = new RegExp('7 g\\.', 'gi');
const reglastmeasuregrams8pointspace = new RegExp('8 g\\.', 'gi');
const reglastmeasuregrams9pointspace = new RegExp('9 g\\.', 'gi');
const reglastmeasuregrams0pointspace = new RegExp('0 g\\.', 'gi');
const reglastmeasuregrams1questionspace = new RegExp('1 g\\?', 'gi');
const reglastmeasuregrams2questionspace = new RegExp('2 g\\?', 'gi');
const reglastmeasuregrams3questionspace = new RegExp('3 g\\?', 'gi');
const reglastmeasuregrams4questionspace = new RegExp('4 g\\?', 'gi');
const reglastmeasuregrams5questionspace = new RegExp('5 g\\?', 'gi');
const reglastmeasuregrams6questionspace = new RegExp('6 g\\?', 'gi');
const reglastmeasuregrams7questionspace = new RegExp('7 g\\?', 'gi');
const reglastmeasuregrams8questionspace = new RegExp('8 g\\?', 'gi');
const reglastmeasuregrams9questionspace = new RegExp('9 g\\?', 'gi');
const reglastmeasuregrams0questionspace = new RegExp('0 g\\?', 'gi');

const reglastmeasuremetrexx1 = new RegExp('1m ', 'gi');
const reglastmeasuremetrexx2 = new RegExp('2m ', 'gi');
const reglastmeasuremetrexx3 = new RegExp('3m ', 'gi');
const reglastmeasuremetrexx4 = new RegExp('4m ', 'gi');
const reglastmeasuremetrexx5 = new RegExp('5m ', 'gi');
const reglastmeasuremetrexx6 = new RegExp('6m ', 'gi');
const reglastmeasuremetrexx7 = new RegExp('7m ', 'gi');
const reglastmeasuremetrexx8 = new RegExp('8m ', 'gi');
const reglastmeasuremetrexx9 = new RegExp('9m ', 'gi');
const reglastmeasuremetrexx0 = new RegExp('0m ', 'gi');
const reglastmeasuremetrexx1point = new RegExp('1m\\.', 'gi');
const reglastmeasuremetrexx2point = new RegExp('2m\\.', 'gi');
const reglastmeasuremetrexx3point = new RegExp('3m\\.', 'gi');
const reglastmeasuremetrexx4point = new RegExp('4m\\.', 'gi');
const reglastmeasuremetrexx5point = new RegExp('5m\\.', 'gi');
const reglastmeasuremetrexx6point = new RegExp('6m\\.', 'gi');
const reglastmeasuremetrexx7point = new RegExp('7m\\.', 'gi');
const reglastmeasuremetrexx8point = new RegExp('8m\\.', 'gi');
const reglastmeasuremetrexx9point = new RegExp('9m\\.', 'gi');
const reglastmeasuremetrexx0point = new RegExp('0m\\.', 'gi');
const reglastmeasuremetrexx1virgola = new RegExp('1m,', 'gi');
const reglastmeasuremetrexx2virgola = new RegExp('2m,', 'gi');
const reglastmeasuremetrexx3virgola = new RegExp('3m,', 'gi');
const reglastmeasuremetrexx4virgola = new RegExp('4m,', 'gi');
const reglastmeasuremetrexx5virgola = new RegExp('5m,', 'gi');
const reglastmeasuremetrexx6virgola = new RegExp('6m,', 'gi');
const reglastmeasuremetrexx7virgola = new RegExp('7m,', 'gi');
const reglastmeasuremetrexx8virgola = new RegExp('8m,', 'gi');
const reglastmeasuremetrexx9virgola = new RegExp('9m,', 'gi');
const reglastmeasuremetrexx0virgola = new RegExp('0m,', 'gi');
const reglastmeasuremetrexx1slash = new RegExp('1m/', 'gi');
const reglastmeasuremetrexx2slash = new RegExp('2m/', 'gi');
const reglastmeasuremetrexx3slash = new RegExp('3m/', 'gi');
const reglastmeasuremetrexx4slash = new RegExp('4m/', 'gi');
const reglastmeasuremetrexx5slash = new RegExp('5m/', 'gi');
const reglastmeasuremetrexx6slash = new RegExp('6m/', 'gi');
const reglastmeasuremetrexx7slash = new RegExp('7m/', 'gi');
const reglastmeasuremetrexx8slash = new RegExp('8m/', 'gi');
const reglastmeasuremetrexx9slash = new RegExp('9m/', 'gi');
const reglastmeasuremetrexx0slash = new RegExp('0m/', 'gi');
const reglastmeasuremetrexx1question = new RegExp('1m\\?', 'gi');
const reglastmeasuremetrexx2question = new RegExp('2m\\?', 'gi');
const reglastmeasuremetrexx3question = new RegExp('3m\\?', 'gi');
const reglastmeasuremetrexx4question = new RegExp('4m\\?', 'gi');
const reglastmeasuremetrexx5question = new RegExp('5m\\?', 'gi');
const reglastmeasuremetrexx6question = new RegExp('6m\\?', 'gi');
const reglastmeasuremetrexx7question = new RegExp('7m\\?', 'gi');
const reglastmeasuremetrexx8question = new RegExp('8m\\?', 'gi');
const reglastmeasuremetrexx9question = new RegExp('9m\\?', 'gi');
const reglastmeasuremetrexx0question = new RegExp('0m\\?', 'gi');
const reglastmeasuremetrexx1exclam = new RegExp('1m!', 'gi');
const reglastmeasuremetrexx2exclam = new RegExp('2m!', 'gi');
const reglastmeasuremetrexx3exclam = new RegExp('3m!', 'gi');
const reglastmeasuremetrexx4exclam = new RegExp('4m!', 'gi');
const reglastmeasuremetrexx5exclam = new RegExp('5m!', 'gi');
const reglastmeasuremetrexx6exclam = new RegExp('6m!', 'gi');
const reglastmeasuremetrexx7exclam = new RegExp('7m!', 'gi');
const reglastmeasuremetrexx8exclam = new RegExp('8m!', 'gi');
const reglastmeasuremetrexx9exclam = new RegExp('9m!', 'gi');
const reglastmeasuremetrexx0exclam = new RegExp('0m!', 'gi');
const reglastmeasuremetrexx1space = new RegExp('1 m ', 'gi');
const reglastmeasuremetrexx2space = new RegExp('2 m ', 'gi');
const reglastmeasuremetrexx3space = new RegExp('3 m ', 'gi');
const reglastmeasuremetrexx4space = new RegExp('4 m ', 'gi');
const reglastmeasuremetrexx5space = new RegExp('5 m ', 'gi');
const reglastmeasuremetrexx6space = new RegExp('6 m ', 'gi');
const reglastmeasuremetrexx7space = new RegExp('7 m ', 'gi');
const reglastmeasuremetrexx8space = new RegExp('8 m ', 'gi');
const reglastmeasuremetrexx9space = new RegExp('9 m ', 'gi');
const reglastmeasuremetrexx0space = new RegExp('0 m ', 'gi');
const reglastmeasuremetrexx1exclamspace = new RegExp('1 m!', 'gi');
const reglastmeasuremetrexx2exclamspace = new RegExp('2 m!', 'gi');
const reglastmeasuremetrexx3exclamspace = new RegExp('3 m!', 'gi');
const reglastmeasuremetrexx4exclamspace = new RegExp('4 m!', 'gi');
const reglastmeasuremetrexx5exclamspace = new RegExp('5 m!', 'gi');
const reglastmeasuremetrexx6exclamspace = new RegExp('6 m!', 'gi');
const reglastmeasuremetrexx7exclamspace = new RegExp('7 m!', 'gi');
const reglastmeasuremetrexx8exclamspace = new RegExp('8 m!', 'gi');
const reglastmeasuremetrexx9exclamspace = new RegExp('9 m!', 'gi');
const reglastmeasuremetrexx0exclamspace = new RegExp('0 m!', 'gi');
const reglastmeasuremetrexx1slashspace = new RegExp('1 m/', 'gi');
const reglastmeasuremetrexx2slashspace = new RegExp('2 m/', 'gi');
const reglastmeasuremetrexx3slashspace = new RegExp('3 m/', 'gi');
const reglastmeasuremetrexx4slashspace = new RegExp('4 m/', 'gi');
const reglastmeasuremetrexx5slashspace = new RegExp('5 m/', 'gi');
const reglastmeasuremetrexx6slashspace = new RegExp('6 m/', 'gi');
const reglastmeasuremetrexx7slashspace = new RegExp('7 m/', 'gi');
const reglastmeasuremetrexx8slashspace = new RegExp('8 m/', 'gi');
const reglastmeasuremetrexx9slashspace = new RegExp('9 m/', 'gi');
const reglastmeasuremetrexx0slashspace = new RegExp('0 m/', 'gi');
const reglastmeasuremetrexx1virgolaspace = new RegExp('1 m,', 'gi');
const reglastmeasuremetrexx2virgolaspace = new RegExp('2 m,', 'gi');
const reglastmeasuremetrexx3virgolaspace = new RegExp('3 m,', 'gi');
const reglastmeasuremetrexx4virgolaspace = new RegExp('4 m,', 'gi');
const reglastmeasuremetrexx5virgolaspace = new RegExp('5 m,', 'gi');
const reglastmeasuremetrexx6virgolaspace = new RegExp('6 m,', 'gi');
const reglastmeasuremetrexx7virgolaspace = new RegExp('7 m,', 'gi');
const reglastmeasuremetrexx8virgolaspace = new RegExp('8 m,', 'gi');
const reglastmeasuremetrexx9virgolaspace = new RegExp('9 m,', 'gi');
const reglastmeasuremetrexx0virgolaspace = new RegExp('0 m,', 'gi');
const reglastmeasuremetrexx1pointspace = new RegExp('1 m\\.', 'gi');
const reglastmeasuremetrexx2pointspace = new RegExp('2 m\\.', 'gi');
const reglastmeasuremetrexx3pointspace = new RegExp('3 m\\.', 'gi');
const reglastmeasuremetrexx4pointspace = new RegExp('4 m\\.', 'gi');
const reglastmeasuremetrexx5pointspace = new RegExp('5 m\\.', 'gi');
const reglastmeasuremetrexx6pointspace = new RegExp('6 m\\.', 'gi');
const reglastmeasuremetrexx7pointspace = new RegExp('7 m\\.', 'gi');
const reglastmeasuremetrexx8pointspace = new RegExp('8 m\\.', 'gi');
const reglastmeasuremetrexx9pointspace = new RegExp('9 m\\.', 'gi');
const reglastmeasuremetrexx0pointspace = new RegExp('0 m\\.', 'gi');
const reglastmeasuremetrexx1questionspace = new RegExp('1 m\\?', 'gi');
const reglastmeasuremetrexx2questionspace = new RegExp('2 m\\?', 'gi');
const reglastmeasuremetrexx3questionspace = new RegExp('3 m\\?', 'gi');
const reglastmeasuremetrexx4questionspace = new RegExp('4 m\\?', 'gi');
const reglastmeasuremetrexx5questionspace = new RegExp('5 m\\?', 'gi');
const reglastmeasuremetrexx6questionspace = new RegExp('6 m\\?', 'gi');
const reglastmeasuremetrexx7questionspace = new RegExp('7 m\\?', 'gi');
const reglastmeasuremetrexx8questionspace = new RegExp('8 m\\?', 'gi');
const reglastmeasuremetrexx9questionspace = new RegExp('9 m\\?', 'gi');
const reglastmeasuremetrexx0questionspace = new RegExp('0 m\\?', 'gi');

const reglastmeasuremiles1 = new RegExp('1mi ', 'gi');
const reglastmeasuremiles2 = new RegExp('2mi ', 'gi');
const reglastmeasuremiles3 = new RegExp('3mi ', 'gi');
const reglastmeasuremiles4 = new RegExp('4mi ', 'gi');
const reglastmeasuremiles5 = new RegExp('5mi ', 'gi');
const reglastmeasuremiles6 = new RegExp('6mi ', 'gi');
const reglastmeasuremiles7 = new RegExp('7mi ', 'gi');
const reglastmeasuremiles8 = new RegExp('8mi ', 'gi');
const reglastmeasuremiles9 = new RegExp('9mi ', 'gi');
const reglastmeasuremiles0 = new RegExp('0mi ', 'gi');
const reglastmeasuremiles1point = new RegExp('1mi\\.', 'gi');
const reglastmeasuremiles2point = new RegExp('2mi\\.', 'gi');
const reglastmeasuremiles3point = new RegExp('3mi\\.', 'gi');
const reglastmeasuremiles4point = new RegExp('4mi\\.', 'gi');
const reglastmeasuremiles5point = new RegExp('5mi\\.', 'gi');
const reglastmeasuremiles6point = new RegExp('6mi\\.', 'gi');
const reglastmeasuremiles7point = new RegExp('7mi\\.', 'gi');
const reglastmeasuremiles8point = new RegExp('8mi\\.', 'gi');
const reglastmeasuremiles9point = new RegExp('9mi\\.', 'gi');
const reglastmeasuremiles0point = new RegExp('0mi\\.', 'gi');
const reglastmeasuremiles1virgola = new RegExp('1mi,', 'gi');
const reglastmeasuremiles2virgola = new RegExp('2mi,', 'gi');
const reglastmeasuremiles3virgola = new RegExp('3mi,', 'gi');
const reglastmeasuremiles4virgola = new RegExp('4mi,', 'gi');
const reglastmeasuremiles5virgola = new RegExp('5mi,', 'gi');
const reglastmeasuremiles6virgola = new RegExp('6mi,', 'gi');
const reglastmeasuremiles7virgola = new RegExp('7mi,', 'gi');
const reglastmeasuremiles8virgola = new RegExp('8mi,', 'gi');
const reglastmeasuremiles9virgola = new RegExp('9mi,', 'gi');
const reglastmeasuremiles0virgola = new RegExp('0mi,', 'gi');
const reglastmeasuremiles1slash = new RegExp('1mi/', 'gi');
const reglastmeasuremiles2slash = new RegExp('2mi/', 'gi');
const reglastmeasuremiles3slash = new RegExp('3mi/', 'gi');
const reglastmeasuremiles4slash = new RegExp('4mi/', 'gi');
const reglastmeasuremiles5slash = new RegExp('5mi/', 'gi');
const reglastmeasuremiles6slash = new RegExp('6mi/', 'gi');
const reglastmeasuremiles7slash = new RegExp('7mi/', 'gi');
const reglastmeasuremiles8slash = new RegExp('8mi/', 'gi');
const reglastmeasuremiles9slash = new RegExp('9mi/', 'gi');
const reglastmeasuremiles0slash = new RegExp('0mi/', 'gi');
const reglastmeasuremiles1question = new RegExp('1mi\\?', 'gi');
const reglastmeasuremiles2question = new RegExp('2mi\\?', 'gi');
const reglastmeasuremiles3question = new RegExp('3mi\\?', 'gi');
const reglastmeasuremiles4question = new RegExp('4mi\\?', 'gi');
const reglastmeasuremiles5question = new RegExp('5mi\\?', 'gi');
const reglastmeasuremiles6question = new RegExp('6mi\\?', 'gi');
const reglastmeasuremiles7question = new RegExp('7mi\\?', 'gi');
const reglastmeasuremiles8question = new RegExp('8mi\\?', 'gi');
const reglastmeasuremiles9question = new RegExp('9mi\\?', 'gi');
const reglastmeasuremiles0question = new RegExp('0mi\\?', 'gi');
const reglastmeasuremiles1exclam = new RegExp('1mi!', 'gi');
const reglastmeasuremiles2exclam = new RegExp('2mi!', 'gi');
const reglastmeasuremiles3exclam = new RegExp('3mi!', 'gi');
const reglastmeasuremiles4exclam = new RegExp('4mi!', 'gi');
const reglastmeasuremiles5exclam = new RegExp('5mi!', 'gi');
const reglastmeasuremiles6exclam = new RegExp('6mi!', 'gi');
const reglastmeasuremiles7exclam = new RegExp('7mi!', 'gi');
const reglastmeasuremiles8exclam = new RegExp('8mi!', 'gi');
const reglastmeasuremiles9exclam = new RegExp('9mi!', 'gi');
const reglastmeasuremiles0exclam = new RegExp('0mi!', 'gi');
const reglastmeasuremiles1space = new RegExp('1 mi ', 'gi');
const reglastmeasuremiles2space = new RegExp('2 mi ', 'gi');
const reglastmeasuremiles3space = new RegExp('3 mi ', 'gi');
const reglastmeasuremiles4space = new RegExp('4 mi ', 'gi');
const reglastmeasuremiles5space = new RegExp('5 mi ', 'gi');
const reglastmeasuremiles6space = new RegExp('6 mi ', 'gi');
const reglastmeasuremiles7space = new RegExp('7 mi ', 'gi');
const reglastmeasuremiles8space = new RegExp('8 mi ', 'gi');
const reglastmeasuremiles9space = new RegExp('9 mi ', 'gi');
const reglastmeasuremiles0space = new RegExp('0 mi ', 'gi');
const reglastmeasuremiles1exclamspace = new RegExp('1 mi!', 'gi');
const reglastmeasuremiles2exclamspace = new RegExp('2 mi!', 'gi');
const reglastmeasuremiles3exclamspace = new RegExp('3 mi!', 'gi');
const reglastmeasuremiles4exclamspace = new RegExp('4 mi!', 'gi');
const reglastmeasuremiles5exclamspace = new RegExp('5 mi!', 'gi');
const reglastmeasuremiles6exclamspace = new RegExp('6 mi!', 'gi');
const reglastmeasuremiles7exclamspace = new RegExp('7 mi!', 'gi');
const reglastmeasuremiles8exclamspace = new RegExp('8 mi!', 'gi');
const reglastmeasuremiles9exclamspace = new RegExp('9 mi!', 'gi');
const reglastmeasuremiles0exclamspace = new RegExp('0 mi!', 'gi');
const reglastmeasuremiles1slashspace = new RegExp('1 mi/', 'gi');
const reglastmeasuremiles2slashspace = new RegExp('2 mi/', 'gi');
const reglastmeasuremiles3slashspace = new RegExp('3 mi/', 'gi');
const reglastmeasuremiles4slashspace = new RegExp('4 mi/', 'gi');
const reglastmeasuremiles5slashspace = new RegExp('5 mi/', 'gi');
const reglastmeasuremiles6slashspace = new RegExp('6 mi/', 'gi');
const reglastmeasuremiles7slashspace = new RegExp('7 mi/', 'gi');
const reglastmeasuremiles8slashspace = new RegExp('8 mi/', 'gi');
const reglastmeasuremiles9slashspace = new RegExp('9 mi/', 'gi');
const reglastmeasuremiles0slashspace = new RegExp('0 mi/', 'gi');
const reglastmeasuremiles1virgolaspace = new RegExp('1 mi,', 'gi');
const reglastmeasuremiles2virgolaspace = new RegExp('2 mi,', 'gi');
const reglastmeasuremiles3virgolaspace = new RegExp('3 mi,', 'gi');
const reglastmeasuremiles4virgolaspace = new RegExp('4 mi,', 'gi');
const reglastmeasuremiles5virgolaspace = new RegExp('5 mi,', 'gi');
const reglastmeasuremiles6virgolaspace = new RegExp('6 mi,', 'gi');
const reglastmeasuremiles7virgolaspace = new RegExp('7 mi,', 'gi');
const reglastmeasuremiles8virgolaspace = new RegExp('8 mi,', 'gi');
const reglastmeasuremiles9virgolaspace = new RegExp('9 mi,', 'gi');
const reglastmeasuremiles0virgolaspace = new RegExp('0 mi,', 'gi');
const reglastmeasuremiles1pointspace = new RegExp('1 mi\\.', 'gi');
const reglastmeasuremiles2pointspace = new RegExp('2 mi\\.', 'gi');
const reglastmeasuremiles3pointspace = new RegExp('3 mi\\.', 'gi');
const reglastmeasuremiles4pointspace = new RegExp('4 mi\\.', 'gi');
const reglastmeasuremiles5pointspace = new RegExp('5 mi\\.', 'gi');
const reglastmeasuremiles6pointspace = new RegExp('6 mi\\.', 'gi');
const reglastmeasuremiles7pointspace = new RegExp('7 mi\\.', 'gi');
const reglastmeasuremiles8pointspace = new RegExp('8 mi\\.', 'gi');
const reglastmeasuremiles9pointspace = new RegExp('9 mi\\.', 'gi');
const reglastmeasuremiles0pointspace = new RegExp('0 mi\\.', 'gi');
const reglastmeasuremiles1questionspace = new RegExp('1 mi\\?', 'gi');
const reglastmeasuremiles2questionspace = new RegExp('2 mi\\?', 'gi');
const reglastmeasuremiles3questionspace = new RegExp('3 mi\\?', 'gi');
const reglastmeasuremiles4questionspace = new RegExp('4 mi\\?', 'gi');
const reglastmeasuremiles5questionspace = new RegExp('5 mi\\?', 'gi');
const reglastmeasuremiles6questionspace = new RegExp('6 mi\\?', 'gi');
const reglastmeasuremiles7questionspace = new RegExp('7 mi\\?', 'gi');
const reglastmeasuremiles8questionspace = new RegExp('8 mi\\?', 'gi');
const reglastmeasuremiles9questionspace = new RegExp('9 mi\\?', 'gi');
const reglastmeasuremiles0questionspace = new RegExp('0 mi\\?', 'gi');

const reglastmeasurepounds1 = new RegExp('1lbs ', 'gi');
const reglastmeasurepounds2 = new RegExp('2lbs ', 'gi');
const reglastmeasurepounds3 = new RegExp('3lbs ', 'gi');
const reglastmeasurepounds4 = new RegExp('4lbs ', 'gi');
const reglastmeasurepounds5 = new RegExp('5lbs ', 'gi');
const reglastmeasurepounds6 = new RegExp('6lbs ', 'gi');
const reglastmeasurepounds7 = new RegExp('7lbs ', 'gi');
const reglastmeasurepounds8 = new RegExp('8lbs ', 'gi');
const reglastmeasurepounds9 = new RegExp('9lbs ', 'gi');
const reglastmeasurepounds0 = new RegExp('0lbs ', 'gi');
const reglastmeasurepounds1point = new RegExp('1lbs\\.', 'gi');
const reglastmeasurepounds2point = new RegExp('2lbs\\.', 'gi');
const reglastmeasurepounds3point = new RegExp('3lbs\\.', 'gi');
const reglastmeasurepounds4point = new RegExp('4lbs\\.', 'gi');
const reglastmeasurepounds5point = new RegExp('5lbs\\.', 'gi');
const reglastmeasurepounds6point = new RegExp('6lbs\\.', 'gi');
const reglastmeasurepounds7point = new RegExp('7lbs\\.', 'gi');
const reglastmeasurepounds8point = new RegExp('8lbs\\.', 'gi');
const reglastmeasurepounds9point = new RegExp('9lbs\\.', 'gi');
const reglastmeasurepounds0point = new RegExp('0lbs\\.', 'gi');
const reglastmeasurepounds1virgola = new RegExp('1lbs,', 'gi');
const reglastmeasurepounds2virgola = new RegExp('2lbs,', 'gi');
const reglastmeasurepounds3virgola = new RegExp('3lbs,', 'gi');
const reglastmeasurepounds4virgola = new RegExp('4lbs,', 'gi');
const reglastmeasurepounds5virgola = new RegExp('5lbs,', 'gi');
const reglastmeasurepounds6virgola = new RegExp('6lbs,', 'gi');
const reglastmeasurepounds7virgola = new RegExp('7lbs,', 'gi');
const reglastmeasurepounds8virgola = new RegExp('8lbs,', 'gi');
const reglastmeasurepounds9virgola = new RegExp('9lbs,', 'gi');
const reglastmeasurepounds0virgola = new RegExp('0lbs,', 'gi');
const reglastmeasurepounds1slash = new RegExp('1lbs/', 'gi');
const reglastmeasurepounds2slash = new RegExp('2lbs/', 'gi');
const reglastmeasurepounds3slash = new RegExp('3lbs/', 'gi');
const reglastmeasurepounds4slash = new RegExp('4lbs/', 'gi');
const reglastmeasurepounds5slash = new RegExp('5lbs/', 'gi');
const reglastmeasurepounds6slash = new RegExp('6lbs/', 'gi');
const reglastmeasurepounds7slash = new RegExp('7lbs/', 'gi');
const reglastmeasurepounds8slash = new RegExp('8lbs/', 'gi');
const reglastmeasurepounds9slash = new RegExp('9lbs/', 'gi');
const reglastmeasurepounds0slash = new RegExp('0lbs/', 'gi');
const reglastmeasurepounds1question = new RegExp('1lbs\\?', 'gi');
const reglastmeasurepounds2question = new RegExp('2lbs\\?', 'gi');
const reglastmeasurepounds3question = new RegExp('3lbs\\?', 'gi');
const reglastmeasurepounds4question = new RegExp('4lbs\\?', 'gi');
const reglastmeasurepounds5question = new RegExp('5lbs\\?', 'gi');
const reglastmeasurepounds6question = new RegExp('6lbs\\?', 'gi');
const reglastmeasurepounds7question = new RegExp('7lbs\\?', 'gi');
const reglastmeasurepounds8question = new RegExp('8lbs\\?', 'gi');
const reglastmeasurepounds9question = new RegExp('9lbs\\?', 'gi');
const reglastmeasurepounds0question = new RegExp('0lbs\\?', 'gi');
const reglastmeasurepounds1exclam = new RegExp('1lbs!', 'gi');
const reglastmeasurepounds2exclam = new RegExp('2lbs!', 'gi');
const reglastmeasurepounds3exclam = new RegExp('3lbs!', 'gi');
const reglastmeasurepounds4exclam = new RegExp('4lbs!', 'gi');
const reglastmeasurepounds5exclam = new RegExp('5lbs!', 'gi');
const reglastmeasurepounds6exclam = new RegExp('6lbs!', 'gi');
const reglastmeasurepounds7exclam = new RegExp('7lbs!', 'gi');
const reglastmeasurepounds8exclam = new RegExp('8lbs!', 'gi');
const reglastmeasurepounds9exclam = new RegExp('9lbs!', 'gi');
const reglastmeasurepounds0exclam = new RegExp('0lbs!', 'gi');
const reglastmeasurepounds1space = new RegExp('1 lbs ', 'gi');
const reglastmeasurepounds2space = new RegExp('2 lbs ', 'gi');
const reglastmeasurepounds3space = new RegExp('3 lbs ', 'gi');
const reglastmeasurepounds4space = new RegExp('4 lbs ', 'gi');
const reglastmeasurepounds5space = new RegExp('5 lbs ', 'gi');
const reglastmeasurepounds6space = new RegExp('6 lbs ', 'gi');
const reglastmeasurepounds7space = new RegExp('7 lbs ', 'gi');
const reglastmeasurepounds8space = new RegExp('8 lbs ', 'gi');
const reglastmeasurepounds9space = new RegExp('9 lbs ', 'gi');
const reglastmeasurepounds0space = new RegExp('0 lbs ', 'gi');
const reglastmeasurepounds1exclamspace = new RegExp('1 lbs!', 'gi');
const reglastmeasurepounds2exclamspace = new RegExp('2 lbs!', 'gi');
const reglastmeasurepounds3exclamspace = new RegExp('3 lbs!', 'gi');
const reglastmeasurepounds4exclamspace = new RegExp('4 lbs!', 'gi');
const reglastmeasurepounds5exclamspace = new RegExp('5 lbs!', 'gi');
const reglastmeasurepounds6exclamspace = new RegExp('6 lbs!', 'gi');
const reglastmeasurepounds7exclamspace = new RegExp('7 lbs!', 'gi');
const reglastmeasurepounds8exclamspace = new RegExp('8 lbs!', 'gi');
const reglastmeasurepounds9exclamspace = new RegExp('9 lbs!', 'gi');
const reglastmeasurepounds0exclamspace = new RegExp('0 lbs!', 'gi');
const reglastmeasurepounds1slashspace = new RegExp('1 lbs/', 'gi');
const reglastmeasurepounds2slashspace = new RegExp('2 lbs/', 'gi');
const reglastmeasurepounds3slashspace = new RegExp('3 lbs/', 'gi');
const reglastmeasurepounds4slashspace = new RegExp('4 lbs/', 'gi');
const reglastmeasurepounds5slashspace = new RegExp('5 lbs/', 'gi');
const reglastmeasurepounds6slashspace = new RegExp('6 lbs/', 'gi');
const reglastmeasurepounds7slashspace = new RegExp('7 lbs/', 'gi');
const reglastmeasurepounds8slashspace = new RegExp('8 lbs/', 'gi');
const reglastmeasurepounds9slashspace = new RegExp('9 lbs/', 'gi');
const reglastmeasurepounds0slashspace = new RegExp('0 lbs/', 'gi');
const reglastmeasurepounds1virgolaspace = new RegExp('1 lbs,', 'gi');
const reglastmeasurepounds2virgolaspace = new RegExp('2 lbs,', 'gi');
const reglastmeasurepounds3virgolaspace = new RegExp('3 lbs,', 'gi');
const reglastmeasurepounds4virgolaspace = new RegExp('4 lbs,', 'gi');
const reglastmeasurepounds5virgolaspace = new RegExp('5 lbs,', 'gi');
const reglastmeasurepounds6virgolaspace = new RegExp('6 lbs,', 'gi');
const reglastmeasurepounds7virgolaspace = new RegExp('7 lbs,', 'gi');
const reglastmeasurepounds8virgolaspace = new RegExp('8 lbs,', 'gi');
const reglastmeasurepounds9virgolaspace = new RegExp('9 lbs,', 'gi');
const reglastmeasurepounds0virgolaspace = new RegExp('0 lbs,', 'gi');
const reglastmeasurepounds1pointspace = new RegExp('1 lbs\\.', 'gi');
const reglastmeasurepounds2pointspace = new RegExp('2 lbs\\.', 'gi');
const reglastmeasurepounds3pointspace = new RegExp('3 lbs\\.', 'gi');
const reglastmeasurepounds4pointspace = new RegExp('4 lbs\\.', 'gi');
const reglastmeasurepounds5pointspace = new RegExp('5 lbs\\.', 'gi');
const reglastmeasurepounds6pointspace = new RegExp('6 lbs\\.', 'gi');
const reglastmeasurepounds7pointspace = new RegExp('7 lbs\\.', 'gi');
const reglastmeasurepounds8pointspace = new RegExp('8 lbs\\.', 'gi');
const reglastmeasurepounds9pointspace = new RegExp('9 lbs\\.', 'gi');
const reglastmeasurepounds0pointspace = new RegExp('0 lbs\\.', 'gi');
const reglastmeasurepounds1questionspace = new RegExp('1 lbs\\?', 'gi');
const reglastmeasurepounds2questionspace = new RegExp('2 lbs\\?', 'gi');
const reglastmeasurepounds3questionspace = new RegExp('3 lbs\\?', 'gi');
const reglastmeasurepounds4questionspace = new RegExp('4 lbs\\?', 'gi');
const reglastmeasurepounds5questionspace = new RegExp('5 lbs\\?', 'gi');
const reglastmeasurepounds6questionspace = new RegExp('6 lbs\\?', 'gi');
const reglastmeasurepounds7questionspace = new RegExp('7 lbs\\?', 'gi');
const reglastmeasurepounds8questionspace = new RegExp('8 lbs\\?', 'gi');
const reglastmeasurepounds9questionspace = new RegExp('9 lbs\\?', 'gi');
const reglastmeasurepounds0questionspace = new RegExp('0 lbs\\?', 'gi');

const reglastmeasurevolt1 = new RegExp('1v ', 'gi');
const reglastmeasurevolt2 = new RegExp('2v ', 'gi');
const reglastmeasurevolt3 = new RegExp('3v ', 'gi');
const reglastmeasurevolt4 = new RegExp('4v ', 'gi');
const reglastmeasurevolt5 = new RegExp('5v ', 'gi');
const reglastmeasurevolt6 = new RegExp('6v ', 'gi');
const reglastmeasurevolt7 = new RegExp('7v ', 'gi');
const reglastmeasurevolt8 = new RegExp('8v ', 'gi');
const reglastmeasurevolt9 = new RegExp('9v ', 'gi');
const reglastmeasurevolt0 = new RegExp('0v ', 'gi');
const reglastmeasurevolt1point = new RegExp('1v\\.', 'gi');
const reglastmeasurevolt2point = new RegExp('2v\\.', 'gi');
const reglastmeasurevolt3point = new RegExp('3v\\.', 'gi');
const reglastmeasurevolt4point = new RegExp('4v\\.', 'gi');
const reglastmeasurevolt5point = new RegExp('5v\\.', 'gi');
const reglastmeasurevolt6point = new RegExp('6v\\.', 'gi');
const reglastmeasurevolt7point = new RegExp('7v\\.', 'gi');
const reglastmeasurevolt8point = new RegExp('8v\\.', 'gi');
const reglastmeasurevolt9point = new RegExp('9v\\.', 'gi');
const reglastmeasurevolt0point = new RegExp('0v\\.', 'gi');
const reglastmeasurevolt1virgola = new RegExp('1v,', 'gi');
const reglastmeasurevolt2virgola = new RegExp('2v,', 'gi');
const reglastmeasurevolt3virgola = new RegExp('3v,', 'gi');
const reglastmeasurevolt4virgola = new RegExp('4v,', 'gi');
const reglastmeasurevolt5virgola = new RegExp('5v,', 'gi');
const reglastmeasurevolt6virgola = new RegExp('6v,', 'gi');
const reglastmeasurevolt7virgola = new RegExp('7v,', 'gi');
const reglastmeasurevolt8virgola = new RegExp('8v,', 'gi');
const reglastmeasurevolt9virgola = new RegExp('9v,', 'gi');
const reglastmeasurevolt0virgola = new RegExp('0v,', 'gi');
const reglastmeasurevolt1slash = new RegExp('1v/', 'gi');
const reglastmeasurevolt2slash = new RegExp('2v/', 'gi');
const reglastmeasurevolt3slash = new RegExp('3v/', 'gi');
const reglastmeasurevolt4slash = new RegExp('4v/', 'gi');
const reglastmeasurevolt5slash = new RegExp('5v/', 'gi');
const reglastmeasurevolt6slash = new RegExp('6v/', 'gi');
const reglastmeasurevolt7slash = new RegExp('7v/', 'gi');
const reglastmeasurevolt8slash = new RegExp('8v/', 'gi');
const reglastmeasurevolt9slash = new RegExp('9v/', 'gi');
const reglastmeasurevolt0slash = new RegExp('0v/', 'gi');
const reglastmeasurevolt1question = new RegExp('1v\\?', 'gi');
const reglastmeasurevolt2question = new RegExp('2v\\?', 'gi');
const reglastmeasurevolt3question = new RegExp('3v\\?', 'gi');
const reglastmeasurevolt4question = new RegExp('4v\\?', 'gi');
const reglastmeasurevolt5question = new RegExp('5v\\?', 'gi');
const reglastmeasurevolt6question = new RegExp('6v\\?', 'gi');
const reglastmeasurevolt7question = new RegExp('7v\\?', 'gi');
const reglastmeasurevolt8question = new RegExp('8v\\?', 'gi');
const reglastmeasurevolt9question = new RegExp('9v\\?', 'gi');
const reglastmeasurevolt0question = new RegExp('0v\\?', 'gi');
const reglastmeasurevolt1exclam = new RegExp('1v!', 'gi');
const reglastmeasurevolt2exclam = new RegExp('2v!', 'gi');
const reglastmeasurevolt3exclam = new RegExp('3v!', 'gi');
const reglastmeasurevolt4exclam = new RegExp('4v!', 'gi');
const reglastmeasurevolt5exclam = new RegExp('5v!', 'gi');
const reglastmeasurevolt6exclam = new RegExp('6v!', 'gi');
const reglastmeasurevolt7exclam = new RegExp('7v!', 'gi');
const reglastmeasurevolt8exclam = new RegExp('8v!', 'gi');
const reglastmeasurevolt9exclam = new RegExp('9v!', 'gi');
const reglastmeasurevolt0exclam = new RegExp('0v!', 'gi');
const reglastmeasurevolt1space = new RegExp('1 v ', 'gi');
const reglastmeasurevolt2space = new RegExp('2 v ', 'gi');
const reglastmeasurevolt3space = new RegExp('3 v ', 'gi');
const reglastmeasurevolt4space = new RegExp('4 v ', 'gi');
const reglastmeasurevolt5space = new RegExp('5 v ', 'gi');
const reglastmeasurevolt6space = new RegExp('6 v ', 'gi');
const reglastmeasurevolt7space = new RegExp('7 v ', 'gi');
const reglastmeasurevolt8space = new RegExp('8 v ', 'gi');
const reglastmeasurevolt9space = new RegExp('9 v ', 'gi');
const reglastmeasurevolt0space = new RegExp('0 v ', 'gi');
const reglastmeasurevolt1exclamspace = new RegExp('1 v!', 'gi');
const reglastmeasurevolt2exclamspace = new RegExp('2 v!', 'gi');
const reglastmeasurevolt3exclamspace = new RegExp('3 v!', 'gi');
const reglastmeasurevolt4exclamspace = new RegExp('4 v!', 'gi');
const reglastmeasurevolt5exclamspace = new RegExp('5 v!', 'gi');
const reglastmeasurevolt6exclamspace = new RegExp('6 v!', 'gi');
const reglastmeasurevolt7exclamspace = new RegExp('7 v!', 'gi');
const reglastmeasurevolt8exclamspace = new RegExp('8 v!', 'gi');
const reglastmeasurevolt9exclamspace = new RegExp('9 v!', 'gi');
const reglastmeasurevolt0exclamspace = new RegExp('0 v!', 'gi');
const reglastmeasurevolt1slashspace = new RegExp('1 v/', 'gi');
const reglastmeasurevolt2slashspace = new RegExp('2 v/', 'gi');
const reglastmeasurevolt3slashspace = new RegExp('3 v/', 'gi');
const reglastmeasurevolt4slashspace = new RegExp('4 v/', 'gi');
const reglastmeasurevolt5slashspace = new RegExp('5 v/', 'gi');
const reglastmeasurevolt6slashspace = new RegExp('6 v/', 'gi');
const reglastmeasurevolt7slashspace = new RegExp('7 v/', 'gi');
const reglastmeasurevolt8slashspace = new RegExp('8 v/', 'gi');
const reglastmeasurevolt9slashspace = new RegExp('9 v/', 'gi');
const reglastmeasurevolt0slashspace = new RegExp('0 v/', 'gi');
const reglastmeasurevolt1virgolaspace = new RegExp('1 v,', 'gi');
const reglastmeasurevolt2virgolaspace = new RegExp('2 v,', 'gi');
const reglastmeasurevolt3virgolaspace = new RegExp('3 v,', 'gi');
const reglastmeasurevolt4virgolaspace = new RegExp('4 v,', 'gi');
const reglastmeasurevolt5virgolaspace = new RegExp('5 v,', 'gi');
const reglastmeasurevolt6virgolaspace = new RegExp('6 v,', 'gi');
const reglastmeasurevolt7virgolaspace = new RegExp('7 v,', 'gi');
const reglastmeasurevolt8virgolaspace = new RegExp('8 v,', 'gi');
const reglastmeasurevolt9virgolaspace = new RegExp('9 v,', 'gi');
const reglastmeasurevolt0virgolaspace = new RegExp('0 v,', 'gi');
const reglastmeasurevolt1pointspace = new RegExp('1 v\\.', 'gi');
const reglastmeasurevolt2pointspace = new RegExp('2 v\\.', 'gi');
const reglastmeasurevolt3pointspace = new RegExp('3 v\\.', 'gi');
const reglastmeasurevolt4pointspace = new RegExp('4 v\\.', 'gi');
const reglastmeasurevolt5pointspace = new RegExp('5 v\\.', 'gi');
const reglastmeasurevolt6pointspace = new RegExp('6 v\\.', 'gi');
const reglastmeasurevolt7pointspace = new RegExp('7 v\\.', 'gi');
const reglastmeasurevolt8pointspace = new RegExp('8 v\\.', 'gi');
const reglastmeasurevolt9pointspace = new RegExp('9 v\\.', 'gi');
const reglastmeasurevolt0pointspace = new RegExp('0 v\\.', 'gi');
const reglastmeasurevolt1questionspace = new RegExp('1 v\\?', 'gi');
const reglastmeasurevolt2questionspace = new RegExp('2 v\\?', 'gi');
const reglastmeasurevolt3questionspace = new RegExp('3 v\\?', 'gi');
const reglastmeasurevolt4questionspace = new RegExp('4 v\\?', 'gi');
const reglastmeasurevolt5questionspace = new RegExp('5 v\\?', 'gi');
const reglastmeasurevolt6questionspace = new RegExp('6 v\\?', 'gi');
const reglastmeasurevolt7questionspace = new RegExp('7 v\\?', 'gi');
const reglastmeasurevolt8questionspace = new RegExp('8 v\\?', 'gi');
const reglastmeasurevolt9questionspace = new RegExp('9 v\\?', 'gi');
const reglastmeasurevolt0questionspace = new RegExp('0 v\\?', 'gi');

const reglastmeasurewatts1 = new RegExp('1w ', 'gi');
const reglastmeasurewatts2 = new RegExp('2w ', 'gi');
const reglastmeasurewatts3 = new RegExp('3w ', 'gi');
const reglastmeasurewatts4 = new RegExp('4w ', 'gi');
const reglastmeasurewatts5 = new RegExp('5w ', 'gi');
const reglastmeasurewatts6 = new RegExp('6w ', 'gi');
const reglastmeasurewatts7 = new RegExp('7w ', 'gi');
const reglastmeasurewatts8 = new RegExp('8w ', 'gi');
const reglastmeasurewatts9 = new RegExp('9w ', 'gi');
const reglastmeasurewatts0 = new RegExp('0w ', 'gi');
const reglastmeasurewatts1point = new RegExp('1w\\.', 'gi');
const reglastmeasurewatts2point = new RegExp('2w\\.', 'gi');
const reglastmeasurewatts3point = new RegExp('3w\\.', 'gi');
const reglastmeasurewatts4point = new RegExp('4w\\.', 'gi');
const reglastmeasurewatts5point = new RegExp('5w\\.', 'gi');
const reglastmeasurewatts6point = new RegExp('6w\\.', 'gi');
const reglastmeasurewatts7point = new RegExp('7w\\.', 'gi');
const reglastmeasurewatts8point = new RegExp('8w\\.', 'gi');
const reglastmeasurewatts9point = new RegExp('9w\\.', 'gi');
const reglastmeasurewatts0point = new RegExp('0w\\.', 'gi');
const reglastmeasurewatts1virgola = new RegExp('1w,', 'gi');
const reglastmeasurewatts2virgola = new RegExp('2w,', 'gi');
const reglastmeasurewatts3virgola = new RegExp('3w,', 'gi');
const reglastmeasurewatts4virgola = new RegExp('4w,', 'gi');
const reglastmeasurewatts5virgola = new RegExp('5w,', 'gi');
const reglastmeasurewatts6virgola = new RegExp('6w,', 'gi');
const reglastmeasurewatts7virgola = new RegExp('7w,', 'gi');
const reglastmeasurewatts8virgola = new RegExp('8w,', 'gi');
const reglastmeasurewatts9virgola = new RegExp('9w,', 'gi');
const reglastmeasurewatts0virgola = new RegExp('0w,', 'gi');
const reglastmeasurewatts1slash = new RegExp('1w/', 'gi');
const reglastmeasurewatts2slash = new RegExp('2w/', 'gi');
const reglastmeasurewatts3slash = new RegExp('3w/', 'gi');
const reglastmeasurewatts4slash = new RegExp('4w/', 'gi');
const reglastmeasurewatts5slash = new RegExp('5w/', 'gi');
const reglastmeasurewatts6slash = new RegExp('6w/', 'gi');
const reglastmeasurewatts7slash = new RegExp('7w/', 'gi');
const reglastmeasurewatts8slash = new RegExp('8w/', 'gi');
const reglastmeasurewatts9slash = new RegExp('9w/', 'gi');
const reglastmeasurewatts0slash = new RegExp('0w/', 'gi');
const reglastmeasurewatts1question = new RegExp('1w\\?', 'gi');
const reglastmeasurewatts2question = new RegExp('2w\\?', 'gi');
const reglastmeasurewatts3question = new RegExp('3w\\?', 'gi');
const reglastmeasurewatts4question = new RegExp('4w\\?', 'gi');
const reglastmeasurewatts5question = new RegExp('5w\\?', 'gi');
const reglastmeasurewatts6question = new RegExp('6w\\?', 'gi');
const reglastmeasurewatts7question = new RegExp('7w\\?', 'gi');
const reglastmeasurewatts8question = new RegExp('8w\\?', 'gi');
const reglastmeasurewatts9question = new RegExp('9w\\?', 'gi');
const reglastmeasurewatts0question = new RegExp('0w\\?', 'gi');
const reglastmeasurewatts1exclam = new RegExp('1w!', 'gi');
const reglastmeasurewatts2exclam = new RegExp('2w!', 'gi');
const reglastmeasurewatts3exclam = new RegExp('3w!', 'gi');
const reglastmeasurewatts4exclam = new RegExp('4w!', 'gi');
const reglastmeasurewatts5exclam = new RegExp('5w!', 'gi');
const reglastmeasurewatts6exclam = new RegExp('6w!', 'gi');
const reglastmeasurewatts7exclam = new RegExp('7w!', 'gi');
const reglastmeasurewatts8exclam = new RegExp('8w!', 'gi');
const reglastmeasurewatts9exclam = new RegExp('9w!', 'gi');
const reglastmeasurewatts0exclam = new RegExp('0w!', 'gi');
const reglastmeasurewatts1space = new RegExp('1 w ', 'gi');
const reglastmeasurewatts2space = new RegExp('2 w ', 'gi');
const reglastmeasurewatts3space = new RegExp('3 w ', 'gi');
const reglastmeasurewatts4space = new RegExp('4 w ', 'gi');
const reglastmeasurewatts5space = new RegExp('5 w ', 'gi');
const reglastmeasurewatts6space = new RegExp('6 w ', 'gi');
const reglastmeasurewatts7space = new RegExp('7 w ', 'gi');
const reglastmeasurewatts8space = new RegExp('8 w ', 'gi');
const reglastmeasurewatts9space = new RegExp('9 w ', 'gi');
const reglastmeasurewatts0space = new RegExp('0 w ', 'gi');
const reglastmeasurewatts1exclamspace = new RegExp('1 w!', 'gi');
const reglastmeasurewatts2exclamspace = new RegExp('2 w!', 'gi');
const reglastmeasurewatts3exclamspace = new RegExp('3 w!', 'gi');
const reglastmeasurewatts4exclamspace = new RegExp('4 w!', 'gi');
const reglastmeasurewatts5exclamspace = new RegExp('5 w!', 'gi');
const reglastmeasurewatts6exclamspace = new RegExp('6 w!', 'gi');
const reglastmeasurewatts7exclamspace = new RegExp('7 w!', 'gi');
const reglastmeasurewatts8exclamspace = new RegExp('8 w!', 'gi');
const reglastmeasurewatts9exclamspace = new RegExp('9 w!', 'gi');
const reglastmeasurewatts0exclamspace = new RegExp('0 w!', 'gi');
const reglastmeasurewatts1slashspace = new RegExp('1 w/', 'gi');
const reglastmeasurewatts2slashspace = new RegExp('2 w/', 'gi');
const reglastmeasurewatts3slashspace = new RegExp('3 w/', 'gi');
const reglastmeasurewatts4slashspace = new RegExp('4 w/', 'gi');
const reglastmeasurewatts5slashspace = new RegExp('5 w/', 'gi');
const reglastmeasurewatts6slashspace = new RegExp('6 w/', 'gi');
const reglastmeasurewatts7slashspace = new RegExp('7 w/', 'gi');
const reglastmeasurewatts8slashspace = new RegExp('8 w/', 'gi');
const reglastmeasurewatts9slashspace = new RegExp('9 w/', 'gi');
const reglastmeasurewatts0slashspace = new RegExp('0 w/', 'gi');
const reglastmeasurewatts1virgolaspace = new RegExp('1 w,', 'gi');
const reglastmeasurewatts2virgolaspace = new RegExp('2 w,', 'gi');
const reglastmeasurewatts3virgolaspace = new RegExp('3 w,', 'gi');
const reglastmeasurewatts4virgolaspace = new RegExp('4 w,', 'gi');
const reglastmeasurewatts5virgolaspace = new RegExp('5 w,', 'gi');
const reglastmeasurewatts6virgolaspace = new RegExp('6 w,', 'gi');
const reglastmeasurewatts7virgolaspace = new RegExp('7 w,', 'gi');
const reglastmeasurewatts8virgolaspace = new RegExp('8 w,', 'gi');
const reglastmeasurewatts9virgolaspace = new RegExp('9 w,', 'gi');
const reglastmeasurewatts0virgolaspace = new RegExp('0 w,', 'gi');
const reglastmeasurewatts1pointspace = new RegExp('1 w\\.', 'gi');
const reglastmeasurewatts2pointspace = new RegExp('2 w\\.', 'gi');
const reglastmeasurewatts3pointspace = new RegExp('3 w\\.', 'gi');
const reglastmeasurewatts4pointspace = new RegExp('4 w\\.', 'gi');
const reglastmeasurewatts5pointspace = new RegExp('5 w\\.', 'gi');
const reglastmeasurewatts6pointspace = new RegExp('6 w\\.', 'gi');
const reglastmeasurewatts7pointspace = new RegExp('7 w\\.', 'gi');
const reglastmeasurewatts8pointspace = new RegExp('8 w\\.', 'gi');
const reglastmeasurewatts9pointspace = new RegExp('9 w\\.', 'gi');
const reglastmeasurewatts0pointspace = new RegExp('0 w\\.', 'gi');
const reglastmeasurewatts1questionspace = new RegExp('1 w\\?', 'gi');
const reglastmeasurewatts2questionspace = new RegExp('2 w\\?', 'gi');
const reglastmeasurewatts3questionspace = new RegExp('3 w\\?', 'gi');
const reglastmeasurewatts4questionspace = new RegExp('4 w\\?', 'gi');
const reglastmeasurewatts5questionspace = new RegExp('5 w\\?', 'gi');
const reglastmeasurewatts6questionspace = new RegExp('6 w\\?', 'gi');
const reglastmeasurewatts7questionspace = new RegExp('7 w\\?', 'gi');
const reglastmeasurewatts8questionspace = new RegExp('8 w\\?', 'gi');
const reglastmeasurewatts9questionspace = new RegExp('9 w\\?', 'gi');
const reglastmeasurewatts0questionspace = new RegExp('0 w\\?', 'gi');

const reglastmeasuregallons1 = new RegExp('1gal ', 'gi');
const reglastmeasuregallons2 = new RegExp('2gal ', 'gi');
const reglastmeasuregallons3 = new RegExp('3gal ', 'gi');
const reglastmeasuregallons4 = new RegExp('4gal ', 'gi');
const reglastmeasuregallons5 = new RegExp('5gal ', 'gi');
const reglastmeasuregallons6 = new RegExp('6gal ', 'gi');
const reglastmeasuregallons7 = new RegExp('7gal ', 'gi');
const reglastmeasuregallons8 = new RegExp('8gal ', 'gi');
const reglastmeasuregallons9 = new RegExp('9gal ', 'gi');
const reglastmeasuregallons0 = new RegExp('0gal ', 'gi');
const reglastmeasuregallons1point = new RegExp('1gal\\.', 'gi');
const reglastmeasuregallons2point = new RegExp('2gal\\.', 'gi');
const reglastmeasuregallons3point = new RegExp('3gal\\.', 'gi');
const reglastmeasuregallons4point = new RegExp('4gal\\.', 'gi');
const reglastmeasuregallons5point = new RegExp('5gal\\.', 'gi');
const reglastmeasuregallons6point = new RegExp('6gal\\.', 'gi');
const reglastmeasuregallons7point = new RegExp('7gal\\.', 'gi');
const reglastmeasuregallons8point = new RegExp('8gal\\.', 'gi');
const reglastmeasuregallons9point = new RegExp('9gal\\.', 'gi');
const reglastmeasuregallons0point = new RegExp('0gal\\.', 'gi');
const reglastmeasuregallons1virgola = new RegExp('1gal,', 'gi');
const reglastmeasuregallons2virgola = new RegExp('2gal,', 'gi');
const reglastmeasuregallons3virgola = new RegExp('3gal,', 'gi');
const reglastmeasuregallons4virgola = new RegExp('4gal,', 'gi');
const reglastmeasuregallons5virgola = new RegExp('5gal,', 'gi');
const reglastmeasuregallons6virgola = new RegExp('6gal,', 'gi');
const reglastmeasuregallons7virgola = new RegExp('7gal,', 'gi');
const reglastmeasuregallons8virgola = new RegExp('8gal,', 'gi');
const reglastmeasuregallons9virgola = new RegExp('9gal,', 'gi');
const reglastmeasuregallons0virgola = new RegExp('0gal,', 'gi');
const reglastmeasuregallons1slash = new RegExp('1gal/', 'gi');
const reglastmeasuregallons2slash = new RegExp('2gal/', 'gi');
const reglastmeasuregallons3slash = new RegExp('3gal/', 'gi');
const reglastmeasuregallons4slash = new RegExp('4gal/', 'gi');
const reglastmeasuregallons5slash = new RegExp('5gal/', 'gi');
const reglastmeasuregallons6slash = new RegExp('6gal/', 'gi');
const reglastmeasuregallons7slash = new RegExp('7gal/', 'gi');
const reglastmeasuregallons8slash = new RegExp('8gal/', 'gi');
const reglastmeasuregallons9slash = new RegExp('9gal/', 'gi');
const reglastmeasuregallons0slash = new RegExp('0gal/', 'gi');
const reglastmeasuregallons1question = new RegExp('1gal\\?', 'gi');
const reglastmeasuregallons2question = new RegExp('2gal\\?', 'gi');
const reglastmeasuregallons3question = new RegExp('3gal\\?', 'gi');
const reglastmeasuregallons4question = new RegExp('4gal\\?', 'gi');
const reglastmeasuregallons5question = new RegExp('5gal\\?', 'gi');
const reglastmeasuregallons6question = new RegExp('6gal\\?', 'gi');
const reglastmeasuregallons7question = new RegExp('7gal\\?', 'gi');
const reglastmeasuregallons8question = new RegExp('8gal\\?', 'gi');
const reglastmeasuregallons9question = new RegExp('9gal\\?', 'gi');
const reglastmeasuregallons0question = new RegExp('0gal\\?', 'gi');
const reglastmeasuregallons1exclam = new RegExp('1gal!', 'gi');
const reglastmeasuregallons2exclam = new RegExp('2gal!', 'gi');
const reglastmeasuregallons3exclam = new RegExp('3gal!', 'gi');
const reglastmeasuregallons4exclam = new RegExp('4gal!', 'gi');
const reglastmeasuregallons5exclam = new RegExp('5gal!', 'gi');
const reglastmeasuregallons6exclam = new RegExp('6gal!', 'gi');
const reglastmeasuregallons7exclam = new RegExp('7gal!', 'gi');
const reglastmeasuregallons8exclam = new RegExp('8gal!', 'gi');
const reglastmeasuregallons9exclam = new RegExp('9gal!', 'gi');
const reglastmeasuregallons0exclam = new RegExp('0gal!', 'gi');
const reglastmeasuregallons1space = new RegExp('1 gal ', 'gi');
const reglastmeasuregallons2space = new RegExp('2 gal ', 'gi');
const reglastmeasuregallons3space = new RegExp('3 gal ', 'gi');
const reglastmeasuregallons4space = new RegExp('4 gal ', 'gi');
const reglastmeasuregallons5space = new RegExp('5 gal ', 'gi');
const reglastmeasuregallons6space = new RegExp('6 gal ', 'gi');
const reglastmeasuregallons7space = new RegExp('7 gal ', 'gi');
const reglastmeasuregallons8space = new RegExp('8 gal ', 'gi');
const reglastmeasuregallons9space = new RegExp('9 gal ', 'gi');
const reglastmeasuregallons0space = new RegExp('0 gal ', 'gi');
const reglastmeasuregallons1exclamspace = new RegExp('1 gal!', 'gi');
const reglastmeasuregallons2exclamspace = new RegExp('2 gal!', 'gi');
const reglastmeasuregallons3exclamspace = new RegExp('3 gal!', 'gi');
const reglastmeasuregallons4exclamspace = new RegExp('4 gal!', 'gi');
const reglastmeasuregallons5exclamspace = new RegExp('5 gal!', 'gi');
const reglastmeasuregallons6exclamspace = new RegExp('6 gal!', 'gi');
const reglastmeasuregallons7exclamspace = new RegExp('7 gal!', 'gi');
const reglastmeasuregallons8exclamspace = new RegExp('8 gal!', 'gi');
const reglastmeasuregallons9exclamspace = new RegExp('9 gal!', 'gi');
const reglastmeasuregallons0exclamspace = new RegExp('0 gal!', 'gi');
const reglastmeasuregallons1slashspace = new RegExp('1 gal/', 'gi');
const reglastmeasuregallons2slashspace = new RegExp('2 gal/', 'gi');
const reglastmeasuregallons3slashspace = new RegExp('3 gal/', 'gi');
const reglastmeasuregallons4slashspace = new RegExp('4 gal/', 'gi');
const reglastmeasuregallons5slashspace = new RegExp('5 gal/', 'gi');
const reglastmeasuregallons6slashspace = new RegExp('6 gal/', 'gi');
const reglastmeasuregallons7slashspace = new RegExp('7 gal/', 'gi');
const reglastmeasuregallons8slashspace = new RegExp('8 gal/', 'gi');
const reglastmeasuregallons9slashspace = new RegExp('9 gal/', 'gi');
const reglastmeasuregallons0slashspace = new RegExp('0 gal/', 'gi');
const reglastmeasuregallons1virgolaspace = new RegExp('1 gal,', 'gi');
const reglastmeasuregallons2virgolaspace = new RegExp('2 gal,', 'gi');
const reglastmeasuregallons3virgolaspace = new RegExp('3 gal,', 'gi');
const reglastmeasuregallons4virgolaspace = new RegExp('4 gal,', 'gi');
const reglastmeasuregallons5virgolaspace = new RegExp('5 gal,', 'gi');
const reglastmeasuregallons6virgolaspace = new RegExp('6 gal,', 'gi');
const reglastmeasuregallons7virgolaspace = new RegExp('7 gal,', 'gi');
const reglastmeasuregallons8virgolaspace = new RegExp('8 gal,', 'gi');
const reglastmeasuregallons9virgolaspace = new RegExp('9 gal,', 'gi');
const reglastmeasuregallons0virgolaspace = new RegExp('0 gal,', 'gi');
const reglastmeasuregallons1pointspace = new RegExp('1 gal\\.', 'gi');
const reglastmeasuregallons2pointspace = new RegExp('2 gal\\.', 'gi');
const reglastmeasuregallons3pointspace = new RegExp('3 gal\\.', 'gi');
const reglastmeasuregallons4pointspace = new RegExp('4 gal\\.', 'gi');
const reglastmeasuregallons5pointspace = new RegExp('5 gal\\.', 'gi');
const reglastmeasuregallons6pointspace = new RegExp('6 gal\\.', 'gi');
const reglastmeasuregallons7pointspace = new RegExp('7 gal\\.', 'gi');
const reglastmeasuregallons8pointspace = new RegExp('8 gal\\.', 'gi');
const reglastmeasuregallons9pointspace = new RegExp('9 gal\\.', 'gi');
const reglastmeasuregallons0pointspace = new RegExp('0 gal\\.', 'gi');
const reglastmeasuregallons1questionspace = new RegExp('1 gal\\?', 'gi');
const reglastmeasuregallons2questionspace = new RegExp('2 gal\\?', 'gi');
const reglastmeasuregallons3questionspace = new RegExp('3 gal\\?', 'gi');
const reglastmeasuregallons4questionspace = new RegExp('4 gal\\?', 'gi');
const reglastmeasuregallons5questionspace = new RegExp('5 gal\\?', 'gi');
const reglastmeasuregallons6questionspace = new RegExp('6 gal\\?', 'gi');
const reglastmeasuregallons7questionspace = new RegExp('7 gal\\?', 'gi');
const reglastmeasuregallons8questionspace = new RegExp('8 gal\\?', 'gi');
const reglastmeasuregallons9questionspace = new RegExp('9 gal\\?', 'gi');
const reglastmeasuregallons0questionspace = new RegExp('0 gal\\?', 'gi');

const reglastmeasurehertz1 = new RegExp('1hz ', 'gi');
const reglastmeasurehertz2 = new RegExp('2hz ', 'gi');
const reglastmeasurehertz3 = new RegExp('3hz ', 'gi');
const reglastmeasurehertz4 = new RegExp('4hz ', 'gi');
const reglastmeasurehertz5 = new RegExp('5hz ', 'gi');
const reglastmeasurehertz6 = new RegExp('6hz ', 'gi');
const reglastmeasurehertz7 = new RegExp('7hz ', 'gi');
const reglastmeasurehertz8 = new RegExp('8hz ', 'gi');
const reglastmeasurehertz9 = new RegExp('9hz ', 'gi');
const reglastmeasurehertz0 = new RegExp('0hz ', 'gi');
const reglastmeasurehertz1point = new RegExp('1hz\\.', 'gi');
const reglastmeasurehertz2point = new RegExp('2hz\\.', 'gi');
const reglastmeasurehertz3point = new RegExp('3hz\\.', 'gi');
const reglastmeasurehertz4point = new RegExp('4hz\\.', 'gi');
const reglastmeasurehertz5point = new RegExp('5hz\\.', 'gi');
const reglastmeasurehertz6point = new RegExp('6hz\\.', 'gi');
const reglastmeasurehertz7point = new RegExp('7hz\\.', 'gi');
const reglastmeasurehertz8point = new RegExp('8hz\\.', 'gi');
const reglastmeasurehertz9point = new RegExp('9hz\\.', 'gi');
const reglastmeasurehertz0point = new RegExp('0hz\\.', 'gi');
const reglastmeasurehertz1virgola = new RegExp('1hz,', 'gi');
const reglastmeasurehertz2virgola = new RegExp('2hz,', 'gi');
const reglastmeasurehertz3virgola = new RegExp('3hz,', 'gi');
const reglastmeasurehertz4virgola = new RegExp('4hz,', 'gi');
const reglastmeasurehertz5virgola = new RegExp('5hz,', 'gi');
const reglastmeasurehertz6virgola = new RegExp('6hz,', 'gi');
const reglastmeasurehertz7virgola = new RegExp('7hz,', 'gi');
const reglastmeasurehertz8virgola = new RegExp('8hz,', 'gi');
const reglastmeasurehertz9virgola = new RegExp('9hz,', 'gi');
const reglastmeasurehertz0virgola = new RegExp('0hz,', 'gi');
const reglastmeasurehertz1slash = new RegExp('1hz/', 'gi');
const reglastmeasurehertz2slash = new RegExp('2hz/', 'gi');
const reglastmeasurehertz3slash = new RegExp('3hz/', 'gi');
const reglastmeasurehertz4slash = new RegExp('4hz/', 'gi');
const reglastmeasurehertz5slash = new RegExp('5hz/', 'gi');
const reglastmeasurehertz6slash = new RegExp('6hz/', 'gi');
const reglastmeasurehertz7slash = new RegExp('7hz/', 'gi');
const reglastmeasurehertz8slash = new RegExp('8hz/', 'gi');
const reglastmeasurehertz9slash = new RegExp('9hz/', 'gi');
const reglastmeasurehertz0slash = new RegExp('0hz/', 'gi');
const reglastmeasurehertz1question = new RegExp('1hz\\?', 'gi');
const reglastmeasurehertz2question = new RegExp('2hz\\?', 'gi');
const reglastmeasurehertz3question = new RegExp('3hz\\?', 'gi');
const reglastmeasurehertz4question = new RegExp('4hz\\?', 'gi');
const reglastmeasurehertz5question = new RegExp('5hz\\?', 'gi');
const reglastmeasurehertz6question = new RegExp('6hz\\?', 'gi');
const reglastmeasurehertz7question = new RegExp('7hz\\?', 'gi');
const reglastmeasurehertz8question = new RegExp('8hz\\?', 'gi');
const reglastmeasurehertz9question = new RegExp('9hz\\?', 'gi');
const reglastmeasurehertz0question = new RegExp('0hz\\?', 'gi');
const reglastmeasurehertz1exclam = new RegExp('1hz!', 'gi');
const reglastmeasurehertz2exclam = new RegExp('2hz!', 'gi');
const reglastmeasurehertz3exclam = new RegExp('3hz!', 'gi');
const reglastmeasurehertz4exclam = new RegExp('4hz!', 'gi');
const reglastmeasurehertz5exclam = new RegExp('5hz!', 'gi');
const reglastmeasurehertz6exclam = new RegExp('6hz!', 'gi');
const reglastmeasurehertz7exclam = new RegExp('7hz!', 'gi');
const reglastmeasurehertz8exclam = new RegExp('8hz!', 'gi');
const reglastmeasurehertz9exclam = new RegExp('9hz!', 'gi');
const reglastmeasurehertz0exclam = new RegExp('0hz!', 'gi');
const reglastmeasurehertz1space = new RegExp('1 hz ', 'gi');
const reglastmeasurehertz2space = new RegExp('2 hz ', 'gi');
const reglastmeasurehertz3space = new RegExp('3 hz ', 'gi');
const reglastmeasurehertz4space = new RegExp('4 hz ', 'gi');
const reglastmeasurehertz5space = new RegExp('5 hz ', 'gi');
const reglastmeasurehertz6space = new RegExp('6 hz ', 'gi');
const reglastmeasurehertz7space = new RegExp('7 hz ', 'gi');
const reglastmeasurehertz8space = new RegExp('8 hz ', 'gi');
const reglastmeasurehertz9space = new RegExp('9 hz ', 'gi');
const reglastmeasurehertz0space = new RegExp('0 hz ', 'gi');
const reglastmeasurehertz1exclamspace = new RegExp('1 hz!', 'gi');
const reglastmeasurehertz2exclamspace = new RegExp('2 hz!', 'gi');
const reglastmeasurehertz3exclamspace = new RegExp('3 hz!', 'gi');
const reglastmeasurehertz4exclamspace = new RegExp('4 hz!', 'gi');
const reglastmeasurehertz5exclamspace = new RegExp('5 hz!', 'gi');
const reglastmeasurehertz6exclamspace = new RegExp('6 hz!', 'gi');
const reglastmeasurehertz7exclamspace = new RegExp('7 hz!', 'gi');
const reglastmeasurehertz8exclamspace = new RegExp('8 hz!', 'gi');
const reglastmeasurehertz9exclamspace = new RegExp('9 hz!', 'gi');
const reglastmeasurehertz0exclamspace = new RegExp('0 hz!', 'gi');
const reglastmeasurehertz1slashspace = new RegExp('1 hz/', 'gi');
const reglastmeasurehertz2slashspace = new RegExp('2 hz/', 'gi');
const reglastmeasurehertz3slashspace = new RegExp('3 hz/', 'gi');
const reglastmeasurehertz4slashspace = new RegExp('4 hz/', 'gi');
const reglastmeasurehertz5slashspace = new RegExp('5 hz/', 'gi');
const reglastmeasurehertz6slashspace = new RegExp('6 hz/', 'gi');
const reglastmeasurehertz7slashspace = new RegExp('7 hz/', 'gi');
const reglastmeasurehertz8slashspace = new RegExp('8 hz/', 'gi');
const reglastmeasurehertz9slashspace = new RegExp('9 hz/', 'gi');
const reglastmeasurehertz0slashspace = new RegExp('0 hz/', 'gi');
const reglastmeasurehertz1virgolaspace = new RegExp('1 hz,', 'gi');
const reglastmeasurehertz2virgolaspace = new RegExp('2 hz,', 'gi');
const reglastmeasurehertz3virgolaspace = new RegExp('3 hz,', 'gi');
const reglastmeasurehertz4virgolaspace = new RegExp('4 hz,', 'gi');
const reglastmeasurehertz5virgolaspace = new RegExp('5 hz,', 'gi');
const reglastmeasurehertz6virgolaspace = new RegExp('6 hz,', 'gi');
const reglastmeasurehertz7virgolaspace = new RegExp('7 hz,', 'gi');
const reglastmeasurehertz8virgolaspace = new RegExp('8 hz,', 'gi');
const reglastmeasurehertz9virgolaspace = new RegExp('9 hz,', 'gi');
const reglastmeasurehertz0virgolaspace = new RegExp('0 hz,', 'gi');
const reglastmeasurehertz1pointspace = new RegExp('1 hz\\.', 'gi');
const reglastmeasurehertz2pointspace = new RegExp('2 hz\\.', 'gi');
const reglastmeasurehertz3pointspace = new RegExp('3 hz\\.', 'gi');
const reglastmeasurehertz4pointspace = new RegExp('4 hz\\.', 'gi');
const reglastmeasurehertz5pointspace = new RegExp('5 hz\\.', 'gi');
const reglastmeasurehertz6pointspace = new RegExp('6 hz\\.', 'gi');
const reglastmeasurehertz7pointspace = new RegExp('7 hz\\.', 'gi');
const reglastmeasurehertz8pointspace = new RegExp('8 hz\\.', 'gi');
const reglastmeasurehertz9pointspace = new RegExp('9 hz\\.', 'gi');
const reglastmeasurehertz0pointspace = new RegExp('0 hz\\.', 'gi');
const reglastmeasurehertz1questionspace = new RegExp('1 hz\\?', 'gi');
const reglastmeasurehertz2questionspace = new RegExp('2 hz\\?', 'gi');
const reglastmeasurehertz3questionspace = new RegExp('3 hz\\?', 'gi');
const reglastmeasurehertz4questionspace = new RegExp('4 hz\\?', 'gi');
const reglastmeasurehertz5questionspace = new RegExp('5 hz\\?', 'gi');
const reglastmeasurehertz6questionspace = new RegExp('6 hz\\?', 'gi');
const reglastmeasurehertz7questionspace = new RegExp('7 hz\\?', 'gi');
const reglastmeasurehertz8questionspace = new RegExp('8 hz\\?', 'gi');
const reglastmeasurehertz9questionspace = new RegExp('9 hz\\?', 'gi');
const reglastmeasurehertz0questionspace = new RegExp('0 hz\\?', 'gi');

const reglastmeasuremilligrams1 = new RegExp('1mg ', 'gi');
const reglastmeasuremilligrams2 = new RegExp('2mg ', 'gi');
const reglastmeasuremilligrams3 = new RegExp('3mg ', 'gi');
const reglastmeasuremilligrams4 = new RegExp('4mg ', 'gi');
const reglastmeasuremilligrams5 = new RegExp('5mg ', 'gi');
const reglastmeasuremilligrams6 = new RegExp('6mg ', 'gi');
const reglastmeasuremilligrams7 = new RegExp('7mg ', 'gi');
const reglastmeasuremilligrams8 = new RegExp('8mg ', 'gi');
const reglastmeasuremilligrams9 = new RegExp('9mg ', 'gi');
const reglastmeasuremilligrams0 = new RegExp('0mg ', 'gi');
const reglastmeasuremilligrams1point = new RegExp('1mg\\.', 'gi');
const reglastmeasuremilligrams2point = new RegExp('2mg\\.', 'gi');
const reglastmeasuremilligrams3point = new RegExp('3mg\\.', 'gi');
const reglastmeasuremilligrams4point = new RegExp('4mg\\.', 'gi');
const reglastmeasuremilligrams5point = new RegExp('5mg\\.', 'gi');
const reglastmeasuremilligrams6point = new RegExp('6mg\\.', 'gi');
const reglastmeasuremilligrams7point = new RegExp('7mg\\.', 'gi');
const reglastmeasuremilligrams8point = new RegExp('8mg\\.', 'gi');
const reglastmeasuremilligrams9point = new RegExp('9mg\\.', 'gi');
const reglastmeasuremilligrams0point = new RegExp('0mg\\.', 'gi');
const reglastmeasuremilligrams1virgola = new RegExp('1mg,', 'gi');
const reglastmeasuremilligrams2virgola = new RegExp('2mg,', 'gi');
const reglastmeasuremilligrams3virgola = new RegExp('3mg,', 'gi');
const reglastmeasuremilligrams4virgola = new RegExp('4mg,', 'gi');
const reglastmeasuremilligrams5virgola = new RegExp('5mg,', 'gi');
const reglastmeasuremilligrams6virgola = new RegExp('6mg,', 'gi');
const reglastmeasuremilligrams7virgola = new RegExp('7mg,', 'gi');
const reglastmeasuremilligrams8virgola = new RegExp('8mg,', 'gi');
const reglastmeasuremilligrams9virgola = new RegExp('9mg,', 'gi');
const reglastmeasuremilligrams0virgola = new RegExp('0mg,', 'gi');
const reglastmeasuremilligrams1slash = new RegExp('1mg/', 'gi');
const reglastmeasuremilligrams2slash = new RegExp('2mg/', 'gi');
const reglastmeasuremilligrams3slash = new RegExp('3mg/', 'gi');
const reglastmeasuremilligrams4slash = new RegExp('4mg/', 'gi');
const reglastmeasuremilligrams5slash = new RegExp('5mg/', 'gi');
const reglastmeasuremilligrams6slash = new RegExp('6mg/', 'gi');
const reglastmeasuremilligrams7slash = new RegExp('7mg/', 'gi');
const reglastmeasuremilligrams8slash = new RegExp('8mg/', 'gi');
const reglastmeasuremilligrams9slash = new RegExp('9mg/', 'gi');
const reglastmeasuremilligrams0slash = new RegExp('0mg/', 'gi');
const reglastmeasuremilligrams1question = new RegExp('1mg\\?', 'gi');
const reglastmeasuremilligrams2question = new RegExp('2mg\\?', 'gi');
const reglastmeasuremilligrams3question = new RegExp('3mg\\?', 'gi');
const reglastmeasuremilligrams4question = new RegExp('4mg\\?', 'gi');
const reglastmeasuremilligrams5question = new RegExp('5mg\\?', 'gi');
const reglastmeasuremilligrams6question = new RegExp('6mg\\?', 'gi');
const reglastmeasuremilligrams7question = new RegExp('7mg\\?', 'gi');
const reglastmeasuremilligrams8question = new RegExp('8mg\\?', 'gi');
const reglastmeasuremilligrams9question = new RegExp('9mg\\?', 'gi');
const reglastmeasuremilligrams0question = new RegExp('0mg\\?', 'gi');
const reglastmeasuremilligrams1exclam = new RegExp('1mg!', 'gi');
const reglastmeasuremilligrams2exclam = new RegExp('2mg!', 'gi');
const reglastmeasuremilligrams3exclam = new RegExp('3mg!', 'gi');
const reglastmeasuremilligrams4exclam = new RegExp('4mg!', 'gi');
const reglastmeasuremilligrams5exclam = new RegExp('5mg!', 'gi');
const reglastmeasuremilligrams6exclam = new RegExp('6mg!', 'gi');
const reglastmeasuremilligrams7exclam = new RegExp('7mg!', 'gi');
const reglastmeasuremilligrams8exclam = new RegExp('8mg!', 'gi');
const reglastmeasuremilligrams9exclam = new RegExp('9mg!', 'gi');
const reglastmeasuremilligrams0exclam = new RegExp('0mg!', 'gi');
const reglastmeasuremilligrams1space = new RegExp('1 mg ', 'gi');
const reglastmeasuremilligrams2space = new RegExp('2 mg ', 'gi');
const reglastmeasuremilligrams3space = new RegExp('3 mg ', 'gi');
const reglastmeasuremilligrams4space = new RegExp('4 mg ', 'gi');
const reglastmeasuremilligrams5space = new RegExp('5 mg ', 'gi');
const reglastmeasuremilligrams6space = new RegExp('6 mg ', 'gi');
const reglastmeasuremilligrams7space = new RegExp('7 mg ', 'gi');
const reglastmeasuremilligrams8space = new RegExp('8 mg ', 'gi');
const reglastmeasuremilligrams9space = new RegExp('9 mg ', 'gi');
const reglastmeasuremilligrams0space = new RegExp('0 mg ', 'gi');
const reglastmeasuremilligrams1exclamspace = new RegExp('1 mg!', 'gi');
const reglastmeasuremilligrams2exclamspace = new RegExp('2 mg!', 'gi');
const reglastmeasuremilligrams3exclamspace = new RegExp('3 mg!', 'gi');
const reglastmeasuremilligrams4exclamspace = new RegExp('4 mg!', 'gi');
const reglastmeasuremilligrams5exclamspace = new RegExp('5 mg!', 'gi');
const reglastmeasuremilligrams6exclamspace = new RegExp('6 mg!', 'gi');
const reglastmeasuremilligrams7exclamspace = new RegExp('7 mg!', 'gi');
const reglastmeasuremilligrams8exclamspace = new RegExp('8 mg!', 'gi');
const reglastmeasuremilligrams9exclamspace = new RegExp('9 mg!', 'gi');
const reglastmeasuremilligrams0exclamspace = new RegExp('0 mg!', 'gi');
const reglastmeasuremilligrams1slashspace = new RegExp('1 mg/', 'gi');
const reglastmeasuremilligrams2slashspace = new RegExp('2 mg/', 'gi');
const reglastmeasuremilligrams3slashspace = new RegExp('3 mg/', 'gi');
const reglastmeasuremilligrams4slashspace = new RegExp('4 mg/', 'gi');
const reglastmeasuremilligrams5slashspace = new RegExp('5 mg/', 'gi');
const reglastmeasuremilligrams6slashspace = new RegExp('6 mg/', 'gi');
const reglastmeasuremilligrams7slashspace = new RegExp('7 mg/', 'gi');
const reglastmeasuremilligrams8slashspace = new RegExp('8 mg/', 'gi');
const reglastmeasuremilligrams9slashspace = new RegExp('9 mg/', 'gi');
const reglastmeasuremilligrams0slashspace = new RegExp('0 mg/', 'gi');
const reglastmeasuremilligrams1virgolaspace = new RegExp('1 mg,', 'gi');
const reglastmeasuremilligrams2virgolaspace = new RegExp('2 mg,', 'gi');
const reglastmeasuremilligrams3virgolaspace = new RegExp('3 mg,', 'gi');
const reglastmeasuremilligrams4virgolaspace = new RegExp('4 mg,', 'gi');
const reglastmeasuremilligrams5virgolaspace = new RegExp('5 mg,', 'gi');
const reglastmeasuremilligrams6virgolaspace = new RegExp('6 mg,', 'gi');
const reglastmeasuremilligrams7virgolaspace = new RegExp('7 mg,', 'gi');
const reglastmeasuremilligrams8virgolaspace = new RegExp('8 mg,', 'gi');
const reglastmeasuremilligrams9virgolaspace = new RegExp('9 mg,', 'gi');
const reglastmeasuremilligrams0virgolaspace = new RegExp('0 mg,', 'gi');
const reglastmeasuremilligrams1pointspace = new RegExp('1 mg\\.', 'gi');
const reglastmeasuremilligrams2pointspace = new RegExp('2 mg\\.', 'gi');
const reglastmeasuremilligrams3pointspace = new RegExp('3 mg\\.', 'gi');
const reglastmeasuremilligrams4pointspace = new RegExp('4 mg\\.', 'gi');
const reglastmeasuremilligrams5pointspace = new RegExp('5 mg\\.', 'gi');
const reglastmeasuremilligrams6pointspace = new RegExp('6 mg\\.', 'gi');
const reglastmeasuremilligrams7pointspace = new RegExp('7 mg\\.', 'gi');
const reglastmeasuremilligrams8pointspace = new RegExp('8 mg\\.', 'gi');
const reglastmeasuremilligrams9pointspace = new RegExp('9 mg\\.', 'gi');
const reglastmeasuremilligrams0pointspace = new RegExp('0 mg\\.', 'gi');
const reglastmeasuremilligrams1questionspace = new RegExp('1 mg\\?', 'gi');
const reglastmeasuremilligrams2questionspace = new RegExp('2 mg\\?', 'gi');
const reglastmeasuremilligrams3questionspace = new RegExp('3 mg\\?', 'gi');
const reglastmeasuremilligrams4questionspace = new RegExp('4 mg\\?', 'gi');
const reglastmeasuremilligrams5questionspace = new RegExp('5 mg\\?', 'gi');
const reglastmeasuremilligrams6questionspace = new RegExp('6 mg\\?', 'gi');
const reglastmeasuremilligrams7questionspace = new RegExp('7 mg\\?', 'gi');
const reglastmeasuremilligrams8questionspace = new RegExp('8 mg\\?', 'gi');
const reglastmeasuremilligrams9questionspace = new RegExp('9 mg\\?', 'gi');
const reglastmeasuremilligrams0questionspace = new RegExp('0 mg\\?', 'gi');

const reglastmeasurehectograms1 = new RegExp('1hg ', 'gi');
const reglastmeasurehectograms2 = new RegExp('2hg ', 'gi');
const reglastmeasurehectograms3 = new RegExp('3hg ', 'gi');
const reglastmeasurehectograms4 = new RegExp('4hg ', 'gi');
const reglastmeasurehectograms5 = new RegExp('5hg ', 'gi');
const reglastmeasurehectograms6 = new RegExp('6hg ', 'gi');
const reglastmeasurehectograms7 = new RegExp('7hg ', 'gi');
const reglastmeasurehectograms8 = new RegExp('8hg ', 'gi');
const reglastmeasurehectograms9 = new RegExp('9hg ', 'gi');
const reglastmeasurehectograms0 = new RegExp('0hg ', 'gi');
const reglastmeasurehectograms1point = new RegExp('1hg\\.', 'gi');
const reglastmeasurehectograms2point = new RegExp('2hg\\.', 'gi');
const reglastmeasurehectograms3point = new RegExp('3hg\\.', 'gi');
const reglastmeasurehectograms4point = new RegExp('4hg\\.', 'gi');
const reglastmeasurehectograms5point = new RegExp('5hg\\.', 'gi');
const reglastmeasurehectograms6point = new RegExp('6hg\\.', 'gi');
const reglastmeasurehectograms7point = new RegExp('7hg\\.', 'gi');
const reglastmeasurehectograms8point = new RegExp('8hg\\.', 'gi');
const reglastmeasurehectograms9point = new RegExp('9hg\\.', 'gi');
const reglastmeasurehectograms0point = new RegExp('0hg\\.', 'gi');
const reglastmeasurehectograms1virgola = new RegExp('1hg,', 'gi');
const reglastmeasurehectograms2virgola = new RegExp('2hg,', 'gi');
const reglastmeasurehectograms3virgola = new RegExp('3hg,', 'gi');
const reglastmeasurehectograms4virgola = new RegExp('4hg,', 'gi');
const reglastmeasurehectograms5virgola = new RegExp('5hg,', 'gi');
const reglastmeasurehectograms6virgola = new RegExp('6hg,', 'gi');
const reglastmeasurehectograms7virgola = new RegExp('7hg,', 'gi');
const reglastmeasurehectograms8virgola = new RegExp('8hg,', 'gi');
const reglastmeasurehectograms9virgola = new RegExp('9hg,', 'gi');
const reglastmeasurehectograms0virgola = new RegExp('0hg,', 'gi');
const reglastmeasurehectograms1slash = new RegExp('1hg/', 'gi');
const reglastmeasurehectograms2slash = new RegExp('2hg/', 'gi');
const reglastmeasurehectograms3slash = new RegExp('3hg/', 'gi');
const reglastmeasurehectograms4slash = new RegExp('4hg/', 'gi');
const reglastmeasurehectograms5slash = new RegExp('5hg/', 'gi');
const reglastmeasurehectograms6slash = new RegExp('6hg/', 'gi');
const reglastmeasurehectograms7slash = new RegExp('7hg/', 'gi');
const reglastmeasurehectograms8slash = new RegExp('8hg/', 'gi');
const reglastmeasurehectograms9slash = new RegExp('9hg/', 'gi');
const reglastmeasurehectograms0slash = new RegExp('0hg/', 'gi');
const reglastmeasurehectograms1question = new RegExp('1hg\\?', 'gi');
const reglastmeasurehectograms2question = new RegExp('2hg\\?', 'gi');
const reglastmeasurehectograms3question = new RegExp('3hg\\?', 'gi');
const reglastmeasurehectograms4question = new RegExp('4hg\\?', 'gi');
const reglastmeasurehectograms5question = new RegExp('5hg\\?', 'gi');
const reglastmeasurehectograms6question = new RegExp('6hg\\?', 'gi');
const reglastmeasurehectograms7question = new RegExp('7hg\\?', 'gi');
const reglastmeasurehectograms8question = new RegExp('8hg\\?', 'gi');
const reglastmeasurehectograms9question = new RegExp('9hg\\?', 'gi');
const reglastmeasurehectograms0question = new RegExp('0hg\\?', 'gi');
const reglastmeasurehectograms1exclam = new RegExp('1hg!', 'gi');
const reglastmeasurehectograms2exclam = new RegExp('2hg!', 'gi');
const reglastmeasurehectograms3exclam = new RegExp('3hg!', 'gi');
const reglastmeasurehectograms4exclam = new RegExp('4hg!', 'gi');
const reglastmeasurehectograms5exclam = new RegExp('5hg!', 'gi');
const reglastmeasurehectograms6exclam = new RegExp('6hg!', 'gi');
const reglastmeasurehectograms7exclam = new RegExp('7hg!', 'gi');
const reglastmeasurehectograms8exclam = new RegExp('8hg!', 'gi');
const reglastmeasurehectograms9exclam = new RegExp('9hg!', 'gi');
const reglastmeasurehectograms0exclam = new RegExp('0hg!', 'gi');
const reglastmeasurehectograms1space = new RegExp('1 hg ', 'gi');
const reglastmeasurehectograms2space = new RegExp('2 hg ', 'gi');
const reglastmeasurehectograms3space = new RegExp('3 hg ', 'gi');
const reglastmeasurehectograms4space = new RegExp('4 hg ', 'gi');
const reglastmeasurehectograms5space = new RegExp('5 hg ', 'gi');
const reglastmeasurehectograms6space = new RegExp('6 hg ', 'gi');
const reglastmeasurehectograms7space = new RegExp('7 hg ', 'gi');
const reglastmeasurehectograms8space = new RegExp('8 hg ', 'gi');
const reglastmeasurehectograms9space = new RegExp('9 hg ', 'gi');
const reglastmeasurehectograms0space = new RegExp('0 hg ', 'gi');
const reglastmeasurehectograms1exclamspace = new RegExp('1 hg!', 'gi');
const reglastmeasurehectograms2exclamspace = new RegExp('2 hg!', 'gi');
const reglastmeasurehectograms3exclamspace = new RegExp('3 hg!', 'gi');
const reglastmeasurehectograms4exclamspace = new RegExp('4 hg!', 'gi');
const reglastmeasurehectograms5exclamspace = new RegExp('5 hg!', 'gi');
const reglastmeasurehectograms6exclamspace = new RegExp('6 hg!', 'gi');
const reglastmeasurehectograms7exclamspace = new RegExp('7 hg!', 'gi');
const reglastmeasurehectograms8exclamspace = new RegExp('8 hg!', 'gi');
const reglastmeasurehectograms9exclamspace = new RegExp('9 hg!', 'gi');
const reglastmeasurehectograms0exclamspace = new RegExp('0 hg!', 'gi');
const reglastmeasurehectograms1slashspace = new RegExp('1 hg/', 'gi');
const reglastmeasurehectograms2slashspace = new RegExp('2 hg/', 'gi');
const reglastmeasurehectograms3slashspace = new RegExp('3 hg/', 'gi');
const reglastmeasurehectograms4slashspace = new RegExp('4 hg/', 'gi');
const reglastmeasurehectograms5slashspace = new RegExp('5 hg/', 'gi');
const reglastmeasurehectograms6slashspace = new RegExp('6 hg/', 'gi');
const reglastmeasurehectograms7slashspace = new RegExp('7 hg/', 'gi');
const reglastmeasurehectograms8slashspace = new RegExp('8 hg/', 'gi');
const reglastmeasurehectograms9slashspace = new RegExp('9 hg/', 'gi');
const reglastmeasurehectograms0slashspace = new RegExp('0 hg/', 'gi');
const reglastmeasurehectograms1virgolaspace = new RegExp('1 hg,', 'gi');
const reglastmeasurehectograms2virgolaspace = new RegExp('2 hg,', 'gi');
const reglastmeasurehectograms3virgolaspace = new RegExp('3 hg,', 'gi');
const reglastmeasurehectograms4virgolaspace = new RegExp('4 hg,', 'gi');
const reglastmeasurehectograms5virgolaspace = new RegExp('5 hg,', 'gi');
const reglastmeasurehectograms6virgolaspace = new RegExp('6 hg,', 'gi');
const reglastmeasurehectograms7virgolaspace = new RegExp('7 hg,', 'gi');
const reglastmeasurehectograms8virgolaspace = new RegExp('8 hg,', 'gi');
const reglastmeasurehectograms9virgolaspace = new RegExp('9 hg,', 'gi');
const reglastmeasurehectograms0virgolaspace = new RegExp('0 hg,', 'gi');
const reglastmeasurehectograms1pointspace = new RegExp('1 hg\\.', 'gi');
const reglastmeasurehectograms2pointspace = new RegExp('2 hg\\.', 'gi');
const reglastmeasurehectograms3pointspace = new RegExp('3 hg\\.', 'gi');
const reglastmeasurehectograms4pointspace = new RegExp('4 hg\\.', 'gi');
const reglastmeasurehectograms5pointspace = new RegExp('5 hg\\.', 'gi');
const reglastmeasurehectograms6pointspace = new RegExp('6 hg\\.', 'gi');
const reglastmeasurehectograms7pointspace = new RegExp('7 hg\\.', 'gi');
const reglastmeasurehectograms8pointspace = new RegExp('8 hg\\.', 'gi');
const reglastmeasurehectograms9pointspace = new RegExp('9 hg\\.', 'gi');
const reglastmeasurehectograms0pointspace = new RegExp('0 hg\\.', 'gi');
const reglastmeasurehectograms1questionspace = new RegExp('1 hg\\?', 'gi');
const reglastmeasurehectograms2questionspace = new RegExp('2 hg\\?', 'gi');
const reglastmeasurehectograms3questionspace = new RegExp('3 hg\\?', 'gi');
const reglastmeasurehectograms4questionspace = new RegExp('4 hg\\?', 'gi');
const reglastmeasurehectograms5questionspace = new RegExp('5 hg\\?', 'gi');
const reglastmeasurehectograms6questionspace = new RegExp('6 hg\\?', 'gi');
const reglastmeasurehectograms7questionspace = new RegExp('7 hg\\?', 'gi');
const reglastmeasurehectograms8questionspace = new RegExp('8 hg\\?', 'gi');
const reglastmeasurehectograms9questionspace = new RegExp('9 hg\\?', 'gi');
const reglastmeasurehectograms0questionspace = new RegExp('0 hg\\?', 'gi');

const reglastmeasuregigabyte1 = new RegExp('1gb ', 'gi');
const reglastmeasuregigabyte2 = new RegExp('2gb ', 'gi');
const reglastmeasuregigabyte3 = new RegExp('3gb ', 'gi');
const reglastmeasuregigabyte4 = new RegExp('4gb ', 'gi');
const reglastmeasuregigabyte5 = new RegExp('5gb ', 'gi');
const reglastmeasuregigabyte6 = new RegExp('6gb ', 'gi');
const reglastmeasuregigabyte7 = new RegExp('7gb ', 'gi');
const reglastmeasuregigabyte8 = new RegExp('8gb ', 'gi');
const reglastmeasuregigabyte9 = new RegExp('9gb ', 'gi');
const reglastmeasuregigabyte0 = new RegExp('0gb ', 'gi');
const reglastmeasuregigabyte1point = new RegExp('1gb\\.', 'gi');
const reglastmeasuregigabyte2point = new RegExp('2gb\\.', 'gi');
const reglastmeasuregigabyte3point = new RegExp('3gb\\.', 'gi');
const reglastmeasuregigabyte4point = new RegExp('4gb\\.', 'gi');
const reglastmeasuregigabyte5point = new RegExp('5gb\\.', 'gi');
const reglastmeasuregigabyte6point = new RegExp('6gb\\.', 'gi');
const reglastmeasuregigabyte7point = new RegExp('7gb\\.', 'gi');
const reglastmeasuregigabyte8point = new RegExp('8gb\\.', 'gi');
const reglastmeasuregigabyte9point = new RegExp('9gb\\.', 'gi');
const reglastmeasuregigabyte0point = new RegExp('0gb\\.', 'gi');
const reglastmeasuregigabyte1virgola = new RegExp('1gb,', 'gi');
const reglastmeasuregigabyte2virgola = new RegExp('2gb,', 'gi');
const reglastmeasuregigabyte3virgola = new RegExp('3gb,', 'gi');
const reglastmeasuregigabyte4virgola = new RegExp('4gb,', 'gi');
const reglastmeasuregigabyte5virgola = new RegExp('5gb,', 'gi');
const reglastmeasuregigabyte6virgola = new RegExp('6gb,', 'gi');
const reglastmeasuregigabyte7virgola = new RegExp('7gb,', 'gi');
const reglastmeasuregigabyte8virgola = new RegExp('8gb,', 'gi');
const reglastmeasuregigabyte9virgola = new RegExp('9gb,', 'gi');
const reglastmeasuregigabyte0virgola = new RegExp('0gb,', 'gi');
const reglastmeasuregigabyte1slash = new RegExp('1gb/', 'gi');
const reglastmeasuregigabyte2slash = new RegExp('2gb/', 'gi');
const reglastmeasuregigabyte3slash = new RegExp('3gb/', 'gi');
const reglastmeasuregigabyte4slash = new RegExp('4gb/', 'gi');
const reglastmeasuregigabyte5slash = new RegExp('5gb/', 'gi');
const reglastmeasuregigabyte6slash = new RegExp('6gb/', 'gi');
const reglastmeasuregigabyte7slash = new RegExp('7gb/', 'gi');
const reglastmeasuregigabyte8slash = new RegExp('8gb/', 'gi');
const reglastmeasuregigabyte9slash = new RegExp('9gb/', 'gi');
const reglastmeasuregigabyte0slash = new RegExp('0gb/', 'gi');
const reglastmeasuregigabyte1question = new RegExp('1gb\\?', 'gi');
const reglastmeasuregigabyte2question = new RegExp('2gb\\?', 'gi');
const reglastmeasuregigabyte3question = new RegExp('3gb\\?', 'gi');
const reglastmeasuregigabyte4question = new RegExp('4gb\\?', 'gi');
const reglastmeasuregigabyte5question = new RegExp('5gb\\?', 'gi');
const reglastmeasuregigabyte6question = new RegExp('6gb\\?', 'gi');
const reglastmeasuregigabyte7question = new RegExp('7gb\\?', 'gi');
const reglastmeasuregigabyte8question = new RegExp('8gb\\?', 'gi');
const reglastmeasuregigabyte9question = new RegExp('9gb\\?', 'gi');
const reglastmeasuregigabyte0question = new RegExp('0gb\\?', 'gi');
const reglastmeasuregigabyte1exclam = new RegExp('1gb!', 'gi');
const reglastmeasuregigabyte2exclam = new RegExp('2gb!', 'gi');
const reglastmeasuregigabyte3exclam = new RegExp('3gb!', 'gi');
const reglastmeasuregigabyte4exclam = new RegExp('4gb!', 'gi');
const reglastmeasuregigabyte5exclam = new RegExp('5gb!', 'gi');
const reglastmeasuregigabyte6exclam = new RegExp('6gb!', 'gi');
const reglastmeasuregigabyte7exclam = new RegExp('7gb!', 'gi');
const reglastmeasuregigabyte8exclam = new RegExp('8gb!', 'gi');
const reglastmeasuregigabyte9exclam = new RegExp('9gb!', 'gi');
const reglastmeasuregigabyte0exclam = new RegExp('0gb!', 'gi');
const reglastmeasuregigabyte1space = new RegExp('1 gb ', 'gi');
const reglastmeasuregigabyte2space = new RegExp('2 gb ', 'gi');
const reglastmeasuregigabyte3space = new RegExp('3 gb ', 'gi');
const reglastmeasuregigabyte4space = new RegExp('4 gb ', 'gi');
const reglastmeasuregigabyte5space = new RegExp('5 gb ', 'gi');
const reglastmeasuregigabyte6space = new RegExp('6 gb ', 'gi');
const reglastmeasuregigabyte7space = new RegExp('7 gb ', 'gi');
const reglastmeasuregigabyte8space = new RegExp('8 gb ', 'gi');
const reglastmeasuregigabyte9space = new RegExp('9 gb ', 'gi');
const reglastmeasuregigabyte0space = new RegExp('0 gb ', 'gi');
const reglastmeasuregigabyte1exclamspace = new RegExp('1 gb!', 'gi');
const reglastmeasuregigabyte2exclamspace = new RegExp('2 gb!', 'gi');
const reglastmeasuregigabyte3exclamspace = new RegExp('3 gb!', 'gi');
const reglastmeasuregigabyte4exclamspace = new RegExp('4 gb!', 'gi');
const reglastmeasuregigabyte5exclamspace = new RegExp('5 gb!', 'gi');
const reglastmeasuregigabyte6exclamspace = new RegExp('6 gb!', 'gi');
const reglastmeasuregigabyte7exclamspace = new RegExp('7 gb!', 'gi');
const reglastmeasuregigabyte8exclamspace = new RegExp('8 gb!', 'gi');
const reglastmeasuregigabyte9exclamspace = new RegExp('9 gb!', 'gi');
const reglastmeasuregigabyte0exclamspace = new RegExp('0 gb!', 'gi');
const reglastmeasuregigabyte1slashspace = new RegExp('1 gb/', 'gi');
const reglastmeasuregigabyte2slashspace = new RegExp('2 gb/', 'gi');
const reglastmeasuregigabyte3slashspace = new RegExp('3 gb/', 'gi');
const reglastmeasuregigabyte4slashspace = new RegExp('4 gb/', 'gi');
const reglastmeasuregigabyte5slashspace = new RegExp('5 gb/', 'gi');
const reglastmeasuregigabyte6slashspace = new RegExp('6 gb/', 'gi');
const reglastmeasuregigabyte7slashspace = new RegExp('7 gb/', 'gi');
const reglastmeasuregigabyte8slashspace = new RegExp('8 gb/', 'gi');
const reglastmeasuregigabyte9slashspace = new RegExp('9 gb/', 'gi');
const reglastmeasuregigabyte0slashspace = new RegExp('0 gb/', 'gi');
const reglastmeasuregigabyte1virgolaspace = new RegExp('1 gb,', 'gi');
const reglastmeasuregigabyte2virgolaspace = new RegExp('2 gb,', 'gi');
const reglastmeasuregigabyte3virgolaspace = new RegExp('3 gb,', 'gi');
const reglastmeasuregigabyte4virgolaspace = new RegExp('4 gb,', 'gi');
const reglastmeasuregigabyte5virgolaspace = new RegExp('5 gb,', 'gi');
const reglastmeasuregigabyte6virgolaspace = new RegExp('6 gb,', 'gi');
const reglastmeasuregigabyte7virgolaspace = new RegExp('7 gb,', 'gi');
const reglastmeasuregigabyte8virgolaspace = new RegExp('8 gb,', 'gi');
const reglastmeasuregigabyte9virgolaspace = new RegExp('9 gb,', 'gi');
const reglastmeasuregigabyte0virgolaspace = new RegExp('0 gb,', 'gi');
const reglastmeasuregigabyte1pointspace = new RegExp('1 gb\\.', 'gi');
const reglastmeasuregigabyte2pointspace = new RegExp('2 gb\\.', 'gi');
const reglastmeasuregigabyte3pointspace = new RegExp('3 gb\\.', 'gi');
const reglastmeasuregigabyte4pointspace = new RegExp('4 gb\\.', 'gi');
const reglastmeasuregigabyte5pointspace = new RegExp('5 gb\\.', 'gi');
const reglastmeasuregigabyte6pointspace = new RegExp('6 gb\\.', 'gi');
const reglastmeasuregigabyte7pointspace = new RegExp('7 gb\\.', 'gi');
const reglastmeasuregigabyte8pointspace = new RegExp('8 gb\\.', 'gi');
const reglastmeasuregigabyte9pointspace = new RegExp('9 gb\\.', 'gi');
const reglastmeasuregigabyte0pointspace = new RegExp('0 gb\\.', 'gi');
const reglastmeasuregigabyte1questionspace = new RegExp('1 gb\\?', 'gi');
const reglastmeasuregigabyte2questionspace = new RegExp('2 gb\\?', 'gi');
const reglastmeasuregigabyte3questionspace = new RegExp('3 gb\\?', 'gi');
const reglastmeasuregigabyte4questionspace = new RegExp('4 gb\\?', 'gi');
const reglastmeasuregigabyte5questionspace = new RegExp('5 gb\\?', 'gi');
const reglastmeasuregigabyte6questionspace = new RegExp('6 gb\\?', 'gi');
const reglastmeasuregigabyte7questionspace = new RegExp('7 gb\\?', 'gi');
const reglastmeasuregigabyte8questionspace = new RegExp('8 gb\\?', 'gi');
const reglastmeasuregigabyte9questionspace = new RegExp('9 gb\\?', 'gi');
const reglastmeasuregigabyte0questionspace = new RegExp('0 gb\\?', 'gi');

const reglastmeasuremegabyte1 = new RegExp('1mb ', 'gi');
const reglastmeasuremegabyte2 = new RegExp('2mb ', 'gi');
const reglastmeasuremegabyte3 = new RegExp('3mb ', 'gi');
const reglastmeasuremegabyte4 = new RegExp('4mb ', 'gi');
const reglastmeasuremegabyte5 = new RegExp('5mb ', 'gi');
const reglastmeasuremegabyte6 = new RegExp('6mb ', 'gi');
const reglastmeasuremegabyte7 = new RegExp('7mb ', 'gi');
const reglastmeasuremegabyte8 = new RegExp('8mb ', 'gi');
const reglastmeasuremegabyte9 = new RegExp('9mb ', 'gi');
const reglastmeasuremegabyte0 = new RegExp('0mb ', 'gi');
const reglastmeasuremegabyte1point = new RegExp('1mb\\.', 'gi');
const reglastmeasuremegabyte2point = new RegExp('2mb\\.', 'gi');
const reglastmeasuremegabyte3point = new RegExp('3mb\\.', 'gi');
const reglastmeasuremegabyte4point = new RegExp('4mb\\.', 'gi');
const reglastmeasuremegabyte5point = new RegExp('5mb\\.', 'gi');
const reglastmeasuremegabyte6point = new RegExp('6mb\\.', 'gi');
const reglastmeasuremegabyte7point = new RegExp('7mb\\.', 'gi');
const reglastmeasuremegabyte8point = new RegExp('8mb\\.', 'gi');
const reglastmeasuremegabyte9point = new RegExp('9mb\\.', 'gi');
const reglastmeasuremegabyte0point = new RegExp('0mb\\.', 'gi');
const reglastmeasuremegabyte1virgola = new RegExp('1mb,', 'gi');
const reglastmeasuremegabyte2virgola = new RegExp('2mb,', 'gi');
const reglastmeasuremegabyte3virgola = new RegExp('3mb,', 'gi');
const reglastmeasuremegabyte4virgola = new RegExp('4mb,', 'gi');
const reglastmeasuremegabyte5virgola = new RegExp('5mb,', 'gi');
const reglastmeasuremegabyte6virgola = new RegExp('6mb,', 'gi');
const reglastmeasuremegabyte7virgola = new RegExp('7mb,', 'gi');
const reglastmeasuremegabyte8virgola = new RegExp('8mb,', 'gi');
const reglastmeasuremegabyte9virgola = new RegExp('9mb,', 'gi');
const reglastmeasuremegabyte0virgola = new RegExp('0mb,', 'gi');
const reglastmeasuremegabyte1slash = new RegExp('1mb/', 'gi');
const reglastmeasuremegabyte2slash = new RegExp('2mb/', 'gi');
const reglastmeasuremegabyte3slash = new RegExp('3mb/', 'gi');
const reglastmeasuremegabyte4slash = new RegExp('4mb/', 'gi');
const reglastmeasuremegabyte5slash = new RegExp('5mb/', 'gi');
const reglastmeasuremegabyte6slash = new RegExp('6mb/', 'gi');
const reglastmeasuremegabyte7slash = new RegExp('7mb/', 'gi');
const reglastmeasuremegabyte8slash = new RegExp('8mb/', 'gi');
const reglastmeasuremegabyte9slash = new RegExp('9mb/', 'gi');
const reglastmeasuremegabyte0slash = new RegExp('0mb/', 'gi');
const reglastmeasuremegabyte1question = new RegExp('1mb\\?', 'gi');
const reglastmeasuremegabyte2question = new RegExp('2mb\\?', 'gi');
const reglastmeasuremegabyte3question = new RegExp('3mb\\?', 'gi');
const reglastmeasuremegabyte4question = new RegExp('4mb\\?', 'gi');
const reglastmeasuremegabyte5question = new RegExp('5mb\\?', 'gi');
const reglastmeasuremegabyte6question = new RegExp('6mb\\?', 'gi');
const reglastmeasuremegabyte7question = new RegExp('7mb\\?', 'gi');
const reglastmeasuremegabyte8question = new RegExp('8mb\\?', 'gi');
const reglastmeasuremegabyte9question = new RegExp('9mb\\?', 'gi');
const reglastmeasuremegabyte0question = new RegExp('0mb\\?', 'gi');
const reglastmeasuremegabyte1exclam = new RegExp('1mb!', 'gi');
const reglastmeasuremegabyte2exclam = new RegExp('2mb!', 'gi');
const reglastmeasuremegabyte3exclam = new RegExp('3mb!', 'gi');
const reglastmeasuremegabyte4exclam = new RegExp('4mb!', 'gi');
const reglastmeasuremegabyte5exclam = new RegExp('5mb!', 'gi');
const reglastmeasuremegabyte6exclam = new RegExp('6mb!', 'gi');
const reglastmeasuremegabyte7exclam = new RegExp('7mb!', 'gi');
const reglastmeasuremegabyte8exclam = new RegExp('8mb!', 'gi');
const reglastmeasuremegabyte9exclam = new RegExp('9mb!', 'gi');
const reglastmeasuremegabyte0exclam = new RegExp('0mb!', 'gi');
const reglastmeasuremegabyte1space = new RegExp('1 mb ', 'gi');
const reglastmeasuremegabyte2space = new RegExp('2 mb ', 'gi');
const reglastmeasuremegabyte3space = new RegExp('3 mb ', 'gi');
const reglastmeasuremegabyte4space = new RegExp('4 mb ', 'gi');
const reglastmeasuremegabyte5space = new RegExp('5 mb ', 'gi');
const reglastmeasuremegabyte6space = new RegExp('6 mb ', 'gi');
const reglastmeasuremegabyte7space = new RegExp('7 mb ', 'gi');
const reglastmeasuremegabyte8space = new RegExp('8 mb ', 'gi');
const reglastmeasuremegabyte9space = new RegExp('9 mb ', 'gi');
const reglastmeasuremegabyte0space = new RegExp('0 mb ', 'gi');
const reglastmeasuremegabyte1exclamspace = new RegExp('1 mb!', 'gi');
const reglastmeasuremegabyte2exclamspace = new RegExp('2 mb!', 'gi');
const reglastmeasuremegabyte3exclamspace = new RegExp('3 mb!', 'gi');
const reglastmeasuremegabyte4exclamspace = new RegExp('4 mb!', 'gi');
const reglastmeasuremegabyte5exclamspace = new RegExp('5 mb!', 'gi');
const reglastmeasuremegabyte6exclamspace = new RegExp('6 mb!', 'gi');
const reglastmeasuremegabyte7exclamspace = new RegExp('7 mb!', 'gi');
const reglastmeasuremegabyte8exclamspace = new RegExp('8 mb!', 'gi');
const reglastmeasuremegabyte9exclamspace = new RegExp('9 mb!', 'gi');
const reglastmeasuremegabyte0exclamspace = new RegExp('0 mb!', 'gi');
const reglastmeasuremegabyte1slashspace = new RegExp('1 mb/', 'gi');
const reglastmeasuremegabyte2slashspace = new RegExp('2 mb/', 'gi');
const reglastmeasuremegabyte3slashspace = new RegExp('3 mb/', 'gi');
const reglastmeasuremegabyte4slashspace = new RegExp('4 mb/', 'gi');
const reglastmeasuremegabyte5slashspace = new RegExp('5 mb/', 'gi');
const reglastmeasuremegabyte6slashspace = new RegExp('6 mb/', 'gi');
const reglastmeasuremegabyte7slashspace = new RegExp('7 mb/', 'gi');
const reglastmeasuremegabyte8slashspace = new RegExp('8 mb/', 'gi');
const reglastmeasuremegabyte9slashspace = new RegExp('9 mb/', 'gi');
const reglastmeasuremegabyte0slashspace = new RegExp('0 mb/', 'gi');
const reglastmeasuremegabyte1virgolaspace = new RegExp('1 mb,', 'gi');
const reglastmeasuremegabyte2virgolaspace = new RegExp('2 mb,', 'gi');
const reglastmeasuremegabyte3virgolaspace = new RegExp('3 mb,', 'gi');
const reglastmeasuremegabyte4virgolaspace = new RegExp('4 mb,', 'gi');
const reglastmeasuremegabyte5virgolaspace = new RegExp('5 mb,', 'gi');
const reglastmeasuremegabyte6virgolaspace = new RegExp('6 mb,', 'gi');
const reglastmeasuremegabyte7virgolaspace = new RegExp('7 mb,', 'gi');
const reglastmeasuremegabyte8virgolaspace = new RegExp('8 mb,', 'gi');
const reglastmeasuremegabyte9virgolaspace = new RegExp('9 mb,', 'gi');
const reglastmeasuremegabyte0virgolaspace = new RegExp('0 mb,', 'gi');
const reglastmeasuremegabyte1pointspace = new RegExp('1 mb\\.', 'gi');
const reglastmeasuremegabyte2pointspace = new RegExp('2 mb\\.', 'gi');
const reglastmeasuremegabyte3pointspace = new RegExp('3 mb\\.', 'gi');
const reglastmeasuremegabyte4pointspace = new RegExp('4 mb\\.', 'gi');
const reglastmeasuremegabyte5pointspace = new RegExp('5 mb\\.', 'gi');
const reglastmeasuremegabyte6pointspace = new RegExp('6 mb\\.', 'gi');
const reglastmeasuremegabyte7pointspace = new RegExp('7 mb\\.', 'gi');
const reglastmeasuremegabyte8pointspace = new RegExp('8 mb\\.', 'gi');
const reglastmeasuremegabyte9pointspace = new RegExp('9 mb\\.', 'gi');
const reglastmeasuremegabyte0pointspace = new RegExp('0 mb\\.', 'gi');
const reglastmeasuremegabyte1questionspace = new RegExp('1 mb\\?', 'gi');
const reglastmeasuremegabyte2questionspace = new RegExp('2 mb\\?', 'gi');
const reglastmeasuremegabyte3questionspace = new RegExp('3 mb\\?', 'gi');
const reglastmeasuremegabyte4questionspace = new RegExp('4 mb\\?', 'gi');
const reglastmeasuremegabyte5questionspace = new RegExp('5 mb\\?', 'gi');
const reglastmeasuremegabyte6questionspace = new RegExp('6 mb\\?', 'gi');
const reglastmeasuremegabyte7questionspace = new RegExp('7 mb\\?', 'gi');
const reglastmeasuremegabyte8questionspace = new RegExp('8 mb\\?', 'gi');
const reglastmeasuremegabyte9questionspace = new RegExp('9 mb\\?', 'gi');
const reglastmeasuremegabyte0questionspace = new RegExp('0 mb\\?', 'gi');

const reglastmeasureMillimetreofmercury1 = new RegExp(' mmhg\\.', 'gi');
const reglastmeasureMillimetreofmercury2 = new RegExp(' mmhg,', 'gi');
const reglastmeasureMillimetreofmercury3 = new RegExp(' mmhg!', 'gi');
const reglastmeasureMillimetreofmercury4 = new RegExp(' mmhg\\?', 'gi');
const reglastmeasureMillimetreofmercury5 = new RegExp(' mmhg ', 'gi');
const reglastmeasureMillimetreofmercury6slash = new RegExp(' mmhg/', 'gi');

const reglastmeasureKilocalories1 = new RegExp(' kcal\\.', 'gi');
const reglastmeasureKilocalories2 = new RegExp(' kcal,', 'gi');
const reglastmeasureKilocalories3 = new RegExp(' kcal!', 'gi');
const reglastmeasureKilocalories4 = new RegExp(' kcal\\?', 'gi');
const reglastmeasureKilocalories5 = new RegExp(' kcal ', 'gi');
const reglastmeasureKilocalories6slash = new RegExp(' kcal/', 'gi');

const reglastmeasureMillimole1 = new RegExp(' mmol\\.', 'gi');
const reglastmeasureMillimole2 = new RegExp(' mmol,', 'gi');
const reglastmeasureMillimole3 = new RegExp(' mmol!', 'gi');
const reglastmeasureMillimole4 = new RegExp(' mmol\\?', 'gi');
const reglastmeasureMillimole5 = new RegExp(' mmol ', 'gi');
const reglastmeasureMillimole6slash = new RegExp(' mmol/', 'gi');

const reglastmeasureBlvd1 = new RegExp(' blvd\\.', 'gi');
const reglastmeasureBlvd2 = new RegExp(' blvd,', 'gi');
const reglastmeasureBlvd3 = new RegExp(' blvd!', 'gi');
const reglastmeasureBlvd4 = new RegExp(' blvd\\?', 'gi');
const reglastmeasureBlvd5 = new RegExp(' blvd ', 'gi');
const reglastmeasureBlvd6slash = new RegExp(' blvd/', 'gi');

const reglastmeasureRoad1 = new RegExp(' rd\\.', 'gi');
const reglastmeasureRoad2 = new RegExp(' rd,', 'gi');
const reglastmeasureRoad3 = new RegExp(' rd!', 'gi');
const reglastmeasureRoad4 = new RegExp(' rd\\?', 'gi');
const reglastmeasureRoad5 = new RegExp(' rd ', 'gi');
const reglastmeasureRoad6slash = new RegExp(' rd/', 'gi');

const reglastmeasureStreet1 = new RegExp(' st\\.', 'gi');
const reglastmeasureStreet2 = new RegExp(' st,', 'gi');
const reglastmeasureStreet3 = new RegExp(' st!', 'gi');
const reglastmeasureStreet4 = new RegExp(' st\\?', 'gi');
const reglastmeasureStreet5 = new RegExp(' st ', 'gi');
const reglastmeasureStreet6slash = new RegExp(' st/', 'gi');

const reglastmeasureMileshour1 = new RegExp(' mph\\.', 'gi');
const reglastmeasureMileshour2 = new RegExp(' mph,', 'gi');
const reglastmeasureMileshour3 = new RegExp(' mph!', 'gi');
const reglastmeasureMileshour4 = new RegExp(' mph\\?', 'gi');
const reglastmeasureMileshour5 = new RegExp(' mph ', 'gi');
const reglastmeasureMileshour6slash = new RegExp(' mph/', 'gi');

const reglastmeasurethousand1 = new RegExp('1k ', 'gi');
const reglastmeasurethousand2 = new RegExp('2k ', 'gi');
const reglastmeasurethousand3 = new RegExp('3k ', 'gi');
const reglastmeasurethousand4 = new RegExp('4k ', 'gi');
const reglastmeasurethousand5 = new RegExp('5k ', 'gi');
const reglastmeasurethousand6 = new RegExp('6k ', 'gi');
const reglastmeasurethousand7 = new RegExp('7k ', 'gi');
const reglastmeasurethousand8 = new RegExp('8k ', 'gi');
const reglastmeasurethousand9 = new RegExp('9k ', 'gi');
const reglastmeasurethousand0 = new RegExp('0k ', 'gi');
const reglastmeasurethousand1point = new RegExp('1k\\.', 'gi');
const reglastmeasurethousand2point = new RegExp('2k\\.', 'gi');
const reglastmeasurethousand3point = new RegExp('3k\\.', 'gi');
const reglastmeasurethousand4point = new RegExp('4k\\.', 'gi');
const reglastmeasurethousand5point = new RegExp('5k\\.', 'gi');
const reglastmeasurethousand6point = new RegExp('6k\\.', 'gi');
const reglastmeasurethousand7point = new RegExp('7k\\.', 'gi');
const reglastmeasurethousand8point = new RegExp('8k\\.', 'gi');
const reglastmeasurethousand9point = new RegExp('9k\\.', 'gi');
const reglastmeasurethousand0point = new RegExp('0k\\.', 'gi');
const reglastmeasurethousand1virgola = new RegExp('1k,', 'gi');
const reglastmeasurethousand2virgola = new RegExp('2k,', 'gi');
const reglastmeasurethousand3virgola = new RegExp('3k,', 'gi');
const reglastmeasurethousand4virgola = new RegExp('4k,', 'gi');
const reglastmeasurethousand5virgola = new RegExp('5k,', 'gi');
const reglastmeasurethousand6virgola = new RegExp('6k,', 'gi');
const reglastmeasurethousand7virgola = new RegExp('7k,', 'gi');
const reglastmeasurethousand8virgola = new RegExp('8k,', 'gi');
const reglastmeasurethousand9virgola = new RegExp('9k,', 'gi');
const reglastmeasurethousand0virgola = new RegExp('0k,', 'gi');
const reglastmeasurethousand1slash = new RegExp('1k/', 'gi');
const reglastmeasurethousand2slash = new RegExp('2k/', 'gi');
const reglastmeasurethousand3slash = new RegExp('3k/', 'gi');
const reglastmeasurethousand4slash = new RegExp('4k/', 'gi');
const reglastmeasurethousand5slash = new RegExp('5k/', 'gi');
const reglastmeasurethousand6slash = new RegExp('6k/', 'gi');
const reglastmeasurethousand7slash = new RegExp('7k/', 'gi');
const reglastmeasurethousand8slash = new RegExp('8k/', 'gi');
const reglastmeasurethousand9slash = new RegExp('9k/', 'gi');
const reglastmeasurethousand0slash = new RegExp('0k/', 'gi');
const reglastmeasurethousand1question = new RegExp('1k\\?', 'gi');
const reglastmeasurethousand2question = new RegExp('2k\\?', 'gi');
const reglastmeasurethousand3question = new RegExp('3k\\?', 'gi');
const reglastmeasurethousand4question = new RegExp('4k\\?', 'gi');
const reglastmeasurethousand5question = new RegExp('5k\\?', 'gi');
const reglastmeasurethousand6question = new RegExp('6k\\?', 'gi');
const reglastmeasurethousand7question = new RegExp('7k\\?', 'gi');
const reglastmeasurethousand8question = new RegExp('8k\\?', 'gi');
const reglastmeasurethousand9question = new RegExp('9k\\?', 'gi');
const reglastmeasurethousand0question = new RegExp('0k\\?', 'gi');
const reglastmeasurethousand1exclam = new RegExp('1k!', 'gi');
const reglastmeasurethousand2exclam = new RegExp('2k!', 'gi');
const reglastmeasurethousand3exclam = new RegExp('3k!', 'gi');
const reglastmeasurethousand4exclam = new RegExp('4k!', 'gi');
const reglastmeasurethousand5exclam = new RegExp('5k!', 'gi');
const reglastmeasurethousand6exclam = new RegExp('6k!', 'gi');
const reglastmeasurethousand7exclam = new RegExp('7k!', 'gi');
const reglastmeasurethousand8exclam = new RegExp('8k!', 'gi');
const reglastmeasurethousand9exclam = new RegExp('9k!', 'gi');
const reglastmeasurethousand0exclam = new RegExp('0k!', 'gi');

const reglastmeasurefemale1 = new RegExp('1f ', 'gi');
const reglastmeasurefemale2 = new RegExp('2f ', 'gi');
const reglastmeasurefemale3 = new RegExp('3f ', 'gi');
const reglastmeasurefemale4 = new RegExp('4f ', 'gi');
const reglastmeasurefemale5 = new RegExp('5f ', 'gi');
const reglastmeasurefemale6 = new RegExp('6f ', 'gi');
const reglastmeasurefemale7 = new RegExp('7f ', 'gi');
const reglastmeasurefemale8 = new RegExp('8f ', 'gi');
const reglastmeasurefemale9 = new RegExp('9f ', 'gi');
const reglastmeasurefemale0 = new RegExp('0f ', 'gi');
const reglastmeasurefemale1point = new RegExp('1f\\.', 'gi');
const reglastmeasurefemale2point = new RegExp('2f\\.', 'gi');
const reglastmeasurefemale3point = new RegExp('3f\\.', 'gi');
const reglastmeasurefemale4point = new RegExp('4f\\.', 'gi');
const reglastmeasurefemale5point = new RegExp('5f\\.', 'gi');
const reglastmeasurefemale6point = new RegExp('6f\\.', 'gi');
const reglastmeasurefemale7point = new RegExp('7f\\.', 'gi');
const reglastmeasurefemale8point = new RegExp('8f\\.', 'gi');
const reglastmeasurefemale9point = new RegExp('9f\\.', 'gi');
const reglastmeasurefemale0point = new RegExp('0f\\.', 'gi');
const reglastmeasurefemale1virgola = new RegExp('1f,', 'gi');
const reglastmeasurefemale2virgola = new RegExp('2f,', 'gi');
const reglastmeasurefemale3virgola = new RegExp('3f,', 'gi');
const reglastmeasurefemale4virgola = new RegExp('4f,', 'gi');
const reglastmeasurefemale5virgola = new RegExp('5f,', 'gi');
const reglastmeasurefemale6virgola = new RegExp('6f,', 'gi');
const reglastmeasurefemale7virgola = new RegExp('7f,', 'gi');
const reglastmeasurefemale8virgola = new RegExp('8f,', 'gi');
const reglastmeasurefemale9virgola = new RegExp('9f,', 'gi');
const reglastmeasurefemale0virgola = new RegExp('0f,', 'gi');
const reglastmeasurefemale1slash = new RegExp('1f/', 'gi');
const reglastmeasurefemale2slash = new RegExp('2f/', 'gi');
const reglastmeasurefemale3slash = new RegExp('3f/', 'gi');
const reglastmeasurefemale4slash = new RegExp('4f/', 'gi');
const reglastmeasurefemale5slash = new RegExp('5f/', 'gi');
const reglastmeasurefemale6slash = new RegExp('6f/', 'gi');
const reglastmeasurefemale7slash = new RegExp('7f/', 'gi');
const reglastmeasurefemale8slash = new RegExp('8f/', 'gi');
const reglastmeasurefemale9slash = new RegExp('9f/', 'gi');
const reglastmeasurefemale0slash = new RegExp('0f/', 'gi');
const reglastmeasurefemale1question = new RegExp('1f\\?', 'gi');
const reglastmeasurefemale2question = new RegExp('2f\\?', 'gi');
const reglastmeasurefemale3question = new RegExp('3f\\?', 'gi');
const reglastmeasurefemale4question = new RegExp('4f\\?', 'gi');
const reglastmeasurefemale5question = new RegExp('5f\\?', 'gi');
const reglastmeasurefemale6question = new RegExp('6f\\?', 'gi');
const reglastmeasurefemale7question = new RegExp('7f\\?', 'gi');
const reglastmeasurefemale8question = new RegExp('8f\\?', 'gi');
const reglastmeasurefemale9question = new RegExp('9f\\?', 'gi');
const reglastmeasurefemale0question = new RegExp('0f\\?', 'gi');
const reglastmeasurefemale1exclam = new RegExp('1f!', 'gi');
const reglastmeasurefemale2exclam = new RegExp('2f!', 'gi');
const reglastmeasurefemale3exclam = new RegExp('3f!', 'gi');
const reglastmeasurefemale4exclam = new RegExp('4f!', 'gi');
const reglastmeasurefemale5exclam = new RegExp('5f!', 'gi');
const reglastmeasurefemale6exclam = new RegExp('6f!', 'gi');
const reglastmeasurefemale7exclam = new RegExp('7f!', 'gi');
const reglastmeasurefemale8exclam = new RegExp('8f!', 'gi');
const reglastmeasurefemale9exclam = new RegExp('9f!', 'gi');
const reglastmeasurefemale0exclam = new RegExp('0f!', 'gi');

const reglastmeasureMt1 = new RegExp(' mt ', 'gi');
const reglastmeasureMt2 = new RegExp(' mt\\.', 'gi');
const reglastmeasureMt3 = new RegExp(',mt\\.', 'gi');
const reglastmeasureMt4 = new RegExp('/mt\\.', 'gi');
const reglastmeasureMt5 = new RegExp('!mt\\.', 'gi');
const reglastmeasureMt6 = new RegExp('\\?mt\\.', 'gi');
const reglastmeasureMt7 = new RegExp('\\.mt\\.', 'gi');
const reglastmeasureMt8 = new RegExp(',mt ', 'gi');
const reglastmeasureMt9 = new RegExp('/mt ', 'gi');
const reglastmeasureMt10 = new RegExp('!mt ', 'gi');
const reglastmeasureMt11 = new RegExp('\\?mt ', 'gi');
const reglastmeasureMt12 = new RegExp('\\.mt ', 'gi');

const reglastmeasuredmz1 = new RegExp(',dmz ', 'gi');
const reglastmeasuredmzslashfirst = new RegExp('/dmz ', 'gi');
const reglastmeasuredmz2 = new RegExp('!dmz ', 'gi');
const reglastmeasuredmz3 = new RegExp('\\?dmz ', 'gi');
const reglastmeasuredmz4 = new RegExp('\\.dmz ', 'gi');
const reglastmeasuredmz5 = new RegExp(' dmz ', 'gi');
const reglastmeasuredmz6 = new RegExp(' dmz\\.', 'gi');
const reglastmeasuredmz7 = new RegExp(' dmz,', 'gi');
const reglastmeasuredmz8 = new RegExp(' dmz!', 'gi');
const reglastmeasuredmz9 = new RegExp(' dmz\\?', 'gi');
const reglastmeasuredmzslashafter = new RegExp(' dmz/', 'gi');

const reglastmeasuredmv1 = new RegExp(',dmv ', 'gi');
const reglastmeasuredmvslashfirst = new RegExp('/dmv ', 'gi');
const reglastmeasuredmv2 = new RegExp('!dmv ', 'gi');
const reglastmeasuredmv3 = new RegExp('\\?dmv ', 'gi');
const reglastmeasuredmv4 = new RegExp('\\.dmv ', 'gi');
const reglastmeasuredmv5 = new RegExp(' dmv ', 'gi');
const reglastmeasuredmv6 = new RegExp(' dmv\\.', 'gi');
const reglastmeasuredmv7 = new RegExp(' dmv,', 'gi');
const reglastmeasuredmv8 = new RegExp(' dmv!', 'gi');
const reglastmeasuredmv9 = new RegExp(' dmv\\?', 'gi');
const reglastmeasuredmvslashafter = new RegExp(' dmv/', 'gi');

const reglastmeasureyrs1 = new RegExp(',yrs ', 'gi');
const reglastmeasureyrsslashfirst = new RegExp('/yrs ', 'gi');
const reglastmeasureyrs2 = new RegExp('!yrs ', 'gi');
const reglastmeasureyrs3 = new RegExp('\\?yrs ', 'gi');
const reglastmeasureyrs4 = new RegExp('\\.yrs ', 'gi');
const reglastmeasureyrs5 = new RegExp(' yrs ', 'gi');
const reglastmeasureyrs6 = new RegExp(' yrs\\.', 'gi');
const reglastmeasureyrs7 = new RegExp(' yrs,', 'gi');
const reglastmeasureyrs8 = new RegExp(' yrs!', 'gi');
const reglastmeasureyrs9 = new RegExp(' yrs\\?', 'gi');
const reglastmeasureyrsslashafter = new RegExp(' yrs/', 'gi');

const reglastmeasurexbox1 = new RegExp(',x box ', 'gi');
const reglastmeasurexboxslashfirst = new RegExp('/x box ', 'gi');
const reglastmeasurexbox2 = new RegExp('!x box ', 'gi');
const reglastmeasurexbox3 = new RegExp('\\?x box ', 'gi');
const reglastmeasurexbox4 = new RegExp('\\.x box ', 'gi');
const reglastmeasurexbox5 = new RegExp(' x box ', 'gi');
const reglastmeasurexbox6 = new RegExp(' x box\\.', 'gi');
const reglastmeasurexbox7 = new RegExp(' x box,', 'gi');
const reglastmeasurexbox8 = new RegExp(' x box!', 'gi');
const reglastmeasurexbox9 = new RegExp(' x box\\?', 'gi');
const reglastmeasurexboxslashafter = new RegExp(' x box/', 'gi');

const reglastmeasurejjba1 = new RegExp(',jjba ', 'gi');
const reglastmeasurejjbaslashfirst = new RegExp('/jjba ', 'gi');
const reglastmeasurejjba2 = new RegExp('!jjba ', 'gi');
const reglastmeasurejjba3 = new RegExp('\\?jjba ', 'gi');
const reglastmeasurejjba4 = new RegExp('\\.jjba ', 'gi');
const reglastmeasurejjba5 = new RegExp(' jjba ', 'gi');
const reglastmeasurejjba6 = new RegExp(' jjba\\.', 'gi');
const reglastmeasurejjba7 = new RegExp(' jjba,', 'gi');
const reglastmeasurejjba8 = new RegExp(' jjba!', 'gi');
const reglastmeasurejjba9 = new RegExp(' jjba\\?', 'gi');
const reglastmeasurejjbaslashafter = new RegExp(' jjba/', 'gi');


const reglastmeasureww11 = new RegExp(',ww1 ', 'gi');
const reglastmeasureww1slashfirst = new RegExp('/ww1 ', 'gi');
const reglastmeasureww12 = new RegExp('!ww1 ', 'gi');
const reglastmeasureww13 = new RegExp('\\?ww1 ', 'gi');
const reglastmeasureww14 = new RegExp('\\.ww1 ', 'gi');
const reglastmeasureww15 = new RegExp(' ww1 ', 'gi');
const reglastmeasureww16 = new RegExp(' ww1\\.', 'gi');
const reglastmeasureww17 = new RegExp(' ww1,', 'gi');
const reglastmeasureww18 = new RegExp(' ww1!', 'gi');
const reglastmeasureww19 = new RegExp(' ww1\\?', 'gi');
const reglastmeasureww1slashafter = new RegExp(' ww1/', 'gi');
const reglastmeasureww11space = new RegExp(',ww 1 ', 'gi');
const reglastmeasureww1slashfirstspace = new RegExp('/ww 1 ', 'gi');
const reglastmeasureww12space = new RegExp('!ww 1 ', 'gi');
const reglastmeasureww13space = new RegExp('\\?ww 1 ', 'gi');
const reglastmeasureww14space = new RegExp('\\.ww 1 ', 'gi');
const reglastmeasureww15space = new RegExp(' ww 1 ', 'gi');
const reglastmeasureww16space = new RegExp(' ww 1\\.', 'gi');
const reglastmeasureww17space = new RegExp(' ww 1,', 'gi');
const reglastmeasureww18space = new RegExp(' ww 1!', 'gi');
const reglastmeasureww19space = new RegExp(' ww 1\\?', 'gi');
const reglastmeasureww1slashafterspace = new RegExp(' ww 1/', 'gi');

const reglastmeasureww21 = new RegExp(',ww2 ', 'gi');
const reglastmeasureww2slashfirst = new RegExp('/ww2 ', 'gi');
const reglastmeasureww22 = new RegExp('!ww2 ', 'gi');
const reglastmeasureww23 = new RegExp('\\?ww2 ', 'gi');
const reglastmeasureww24 = new RegExp('\\.ww2 ', 'gi');
const reglastmeasureww25 = new RegExp(' ww2 ', 'gi');
const reglastmeasureww26 = new RegExp(' ww2\\.', 'gi');
const reglastmeasureww27 = new RegExp(' ww2,', 'gi');
const reglastmeasureww28 = new RegExp(' ww2!', 'gi');
const reglastmeasureww29 = new RegExp(' ww2\\?', 'gi');
const reglastmeasureww2slashafter = new RegExp(' ww2/', 'gi');
const reglastmeasureww21space = new RegExp(',ww 2 ', 'gi');
const reglastmeasureww2slashfirstspace = new RegExp('/ww 2 ', 'gi');
const reglastmeasureww22space = new RegExp('!ww 2 ', 'gi');
const reglastmeasureww23space = new RegExp('\\?ww 2 ', 'gi');
const reglastmeasureww24space = new RegExp('\\.ww 2 ', 'gi');
const reglastmeasureww25space = new RegExp(' ww 2 ', 'gi');
const reglastmeasureww26space = new RegExp(' ww 2\\.', 'gi');
const reglastmeasureww27space = new RegExp(' ww 2,', 'gi');
const reglastmeasureww28space = new RegExp(' ww 2!', 'gi');
const reglastmeasureww29space = new RegExp(' ww 2\\?', 'gi');
const reglastmeasureww2slashafterspace = new RegExp(' ww 2/', 'gi');

const reglastmeasureww31 = new RegExp(',ww3 ', 'gi');
const reglastmeasureww3slashfirst = new RegExp('/ww3 ', 'gi');
const reglastmeasureww32 = new RegExp('!ww3 ', 'gi');
const reglastmeasureww33 = new RegExp('\\?ww3 ', 'gi');
const reglastmeasureww34 = new RegExp('\\.ww3 ', 'gi');
const reglastmeasureww35 = new RegExp(' ww3 ', 'gi');
const reglastmeasureww36 = new RegExp(' ww3\\.', 'gi');
const reglastmeasureww37 = new RegExp(' ww3,', 'gi');
const reglastmeasureww38 = new RegExp(' ww3!', 'gi');
const reglastmeasureww39 = new RegExp(' ww3\\?', 'gi');
const reglastmeasureww3slashafter = new RegExp(' ww3/', 'gi');
const reglastmeasureww31space = new RegExp(',ww 3 ', 'gi');
const reglastmeasureww3slashfirstspace = new RegExp('/ww 3 ', 'gi');
const reglastmeasureww32space = new RegExp('!ww 3 ', 'gi');
const reglastmeasureww33space = new RegExp('\\?ww 3 ', 'gi');
const reglastmeasureww34space = new RegExp('\\.ww 3 ', 'gi');
const reglastmeasureww35space = new RegExp(' ww 3 ', 'gi');
const reglastmeasureww36space = new RegExp(' ww 3\\.', 'gi');
const reglastmeasureww37space = new RegExp(' ww 3,', 'gi');
const reglastmeasureww38space = new RegExp(' ww 3!', 'gi');
const reglastmeasureww39space = new RegExp(' ww 3\\?', 'gi');
const reglastmeasureww3slashafterspace = new RegExp(' ww 3/', 'gi');

const reglastmeasurewwiii1 = new RegExp(',wwiii ', 'gi');
const reglastmeasurewwiiislashfirst = new RegExp('/wwiii ', 'gi');
const reglastmeasurewwiii2 = new RegExp('!wwiii ', 'gi');
const reglastmeasurewwiii3 = new RegExp('\\?wwiii ', 'gi');
const reglastmeasurewwiii4 = new RegExp('\\.wwiii ', 'gi');
const reglastmeasurewwiii5 = new RegExp(' wwiii ', 'gi');
const reglastmeasurewwiii6 = new RegExp(' wwiii\\.', 'gi');
const reglastmeasurewwiii7 = new RegExp(' wwiii,', 'gi');
const reglastmeasurewwiii8 = new RegExp(' wwiii!', 'gi');
const reglastmeasurewwiii9 = new RegExp(' wwiii\\?', 'gi');
const reglastmeasurewwiiislashafter = new RegExp(' wwiii/', 'gi');
const reglastmeasurewwiii1space = new RegExp(',ww iii ', 'gi');
const reglastmeasurewwiiislashfirstspace = new RegExp('/ww iii ', 'gi');
const reglastmeasurewwiii2space = new RegExp('!ww iii ', 'gi');
const reglastmeasurewwiii3space = new RegExp('\\?ww iii ', 'gi');
const reglastmeasurewwiii4space = new RegExp('\\.ww iii ', 'gi');
const reglastmeasurewwiii5space = new RegExp(' ww iii ', 'gi');
const reglastmeasurewwiii6space = new RegExp(' ww iii\\.', 'gi');
const reglastmeasurewwiii7space = new RegExp(' ww iii,', 'gi');
const reglastmeasurewwiii8space = new RegExp(' ww iii!', 'gi');
const reglastmeasurewwiii9space = new RegExp(' ww iii\\?', 'gi');
const reglastmeasurewwiiislashafterspace = new RegExp(' ww iii/', 'gi');

const reglastmeasurewwii1 = new RegExp(',wwii ', 'gi');
const reglastmeasurewwiislashfirst = new RegExp('/wwii ', 'gi');
const reglastmeasurewwii2 = new RegExp('!wwii ', 'gi');
const reglastmeasurewwii3 = new RegExp('\\?wwii ', 'gi');
const reglastmeasurewwii4 = new RegExp('\\.wwii ', 'gi');
const reglastmeasurewwii5 = new RegExp(' wwii ', 'gi');
const reglastmeasurewwii6 = new RegExp(' wwii\\.', 'gi');
const reglastmeasurewwii7 = new RegExp(' wwii,', 'gi');
const reglastmeasurewwii8 = new RegExp(' wwii!', 'gi');
const reglastmeasurewwii9 = new RegExp(' wwii\\?', 'gi');
const reglastmeasurewwiislashafter = new RegExp(' wwii/', 'gi');
const reglastmeasurewwii1space = new RegExp(',ww ii ', 'gi');
const reglastmeasurewwiislashfirstspace = new RegExp('/ww ii ', 'gi');
const reglastmeasurewwii2space = new RegExp('!ww ii ', 'gi');
const reglastmeasurewwii3space = new RegExp('\\?ww ii ', 'gi');
const reglastmeasurewwii4space = new RegExp('\\.ww ii ', 'gi');
const reglastmeasurewwii5space = new RegExp(' ww ii ', 'gi');
const reglastmeasurewwii6space = new RegExp(' ww ii\\.', 'gi');
const reglastmeasurewwii7space = new RegExp(' ww ii,', 'gi');
const reglastmeasurewwii8space = new RegExp(' ww ii!', 'gi');
const reglastmeasurewwii9space = new RegExp(' ww ii\\?', 'gi');
const reglastmeasurewwiislashafterspace = new RegExp(' ww ii/', 'gi');

const reglastmeasurewwi1 = new RegExp(',wwi ', 'gi');
const reglastmeasurewwislashfirst = new RegExp('/wwi ', 'gi');
const reglastmeasurewwi2 = new RegExp('!wwi ', 'gi');
const reglastmeasurewwi3 = new RegExp('\\?wwi ', 'gi');
const reglastmeasurewwi4 = new RegExp('\\.wwi ', 'gi');
const reglastmeasurewwi5 = new RegExp(' wwi ', 'gi');
const reglastmeasurewwi6 = new RegExp(' wwi\\.', 'gi');
const reglastmeasurewwi7 = new RegExp(' wwi,', 'gi');
const reglastmeasurewwi8 = new RegExp(' wwi!', 'gi');
const reglastmeasurewwi9 = new RegExp(' wwi\\?', 'gi');
const reglastmeasurewwislashafter = new RegExp(' wwi/', 'gi');
const reglastmeasurewwi1space = new RegExp(',ww i ', 'gi');
const reglastmeasurewwislashfirstspace = new RegExp('/ww i ', 'gi');
const reglastmeasurewwi2space = new RegExp('!ww i ', 'gi');
const reglastmeasurewwi3space = new RegExp('\\?ww i ', 'gi');
const reglastmeasurewwi4space = new RegExp('\\.ww i ', 'gi');
const reglastmeasurewwi5space = new RegExp(' ww i ', 'gi');
const reglastmeasurewwi6space = new RegExp(' ww i\\.', 'gi');
const reglastmeasurewwi7space = new RegExp(' ww i,', 'gi');
const reglastmeasurewwi8space = new RegExp(' ww i!', 'gi');
const reglastmeasurewwi9space = new RegExp(' ww i\\?', 'gi');
const reglastmeasurewwislashafterspace = new RegExp(' ww i/', 'gi');

const reglastmeasurehpv1 = new RegExp(',hpv ', 'gi');
const reglastmeasurehpvslashfirst = new RegExp('/hpv ', 'gi');
const reglastmeasurehpv2 = new RegExp('!hpv ', 'gi');
const reglastmeasurehpv3 = new RegExp('\\?hpv ', 'gi');
const reglastmeasurehpv4 = new RegExp('\\.hpv ', 'gi');
const reglastmeasurehpv5 = new RegExp(' hpv ', 'gi');
const reglastmeasurehpv6 = new RegExp(' hpv\\.', 'gi');
const reglastmeasurehpv7 = new RegExp(' hpv,', 'gi');
const reglastmeasurehpv8 = new RegExp(' hpv!', 'gi');
const reglastmeasurehpv9 = new RegExp(' hpv\\?', 'gi');
const reglastmeasurehpvslashafter = new RegExp(' hpv/', 'gi');

const reglastmeasureyt1 = new RegExp(',yt ', 'gi');
const reglastmeasureytslashfirst = new RegExp('/yt ', 'gi');
const reglastmeasureyt2 = new RegExp('!yt ', 'gi');
const reglastmeasureyt3 = new RegExp('\\?yt ', 'gi');
const reglastmeasureyt4 = new RegExp('\\.yt ', 'gi');
const reglastmeasureyt5 = new RegExp(' yt ', 'gi');
const reglastmeasureyt6 = new RegExp(' yt\\.', 'gi');
const reglastmeasureyt7 = new RegExp(' yt,', 'gi');
const reglastmeasureyt8 = new RegExp(' yt!', 'gi');
const reglastmeasureyt9 = new RegExp(' yt\\?', 'gi');
const reglastmeasureytslashafter = new RegExp(' yt/', 'gi');

const reglastmeasurerdr21 = new RegExp(',rdr2 ', 'gi');
const reglastmeasurerdr2slashfirst = new RegExp('/rdr2 ', 'gi');
const reglastmeasurerdr22 = new RegExp('!rdr2 ', 'gi');
const reglastmeasurerdr23 = new RegExp('\\?rdr2 ', 'gi');
const reglastmeasurerdr24 = new RegExp('\\.rdr2 ', 'gi');
const reglastmeasurerdr25 = new RegExp(' rdr2 ', 'gi');
const reglastmeasurerdr26 = new RegExp(' rdr2\\.', 'gi');
const reglastmeasurerdr27 = new RegExp(' rdr2,', 'gi');
const reglastmeasurerdr28 = new RegExp(' rdr2!', 'gi');
const reglastmeasurerdr29 = new RegExp(' rdr2\\?', 'gi');
const reglastmeasurerdr2slashafter = new RegExp(' rdr2/', 'gi');

const reglastmeasureh2g21 = new RegExp(',h2g2 ', 'gi');
const reglastmeasureh2g2slashfirst = new RegExp('/h2g2 ', 'gi');
const reglastmeasureh2g22 = new RegExp('!h2g2 ', 'gi');
const reglastmeasureh2g23 = new RegExp('\\?h2g2 ', 'gi');
const reglastmeasureh2g24 = new RegExp('\\.h2g2 ', 'gi');
const reglastmeasureh2g25 = new RegExp(' h2g2 ', 'gi');
const reglastmeasureh2g26 = new RegExp(' h2g2\\.', 'gi');
const reglastmeasureh2g27 = new RegExp(' h2g2,', 'gi');
const reglastmeasureh2g28 = new RegExp(' h2g2!', 'gi');
const reglastmeasureh2g29 = new RegExp(' h2g2\\?', 'gi');
const reglastmeasureh2g2slashafter = new RegExp(' h2g2/', 'gi');

const reglastmeasurepcp1 = new RegExp(',pcp ', 'gi');
const reglastmeasurepcpslashfirst = new RegExp('/pcp ', 'gi');
const reglastmeasurepcp2 = new RegExp('!pcp ', 'gi');
const reglastmeasurepcp3 = new RegExp('\\?pcp ', 'gi');
const reglastmeasurepcp4 = new RegExp('\\.pcp ', 'gi');
const reglastmeasurepcp5 = new RegExp(' pcp ', 'gi');
const reglastmeasurepcp6 = new RegExp(' pcp\\.', 'gi');
const reglastmeasurepcp7 = new RegExp(' pcp,', 'gi');
const reglastmeasurepcp8 = new RegExp(' pcp!', 'gi');
const reglastmeasurepcp9 = new RegExp(' pcp\\?', 'gi');
const reglastmeasurepcpslashafter = new RegExp(' pcp/', 'gi');

const reglastmeasureqt1 = new RegExp(' qt ', 'gi');
const reglastmeasureqt2 = new RegExp(' qt\\.', 'gi');
const reglastmeasureqt3 = new RegExp(' qt,', 'gi');
const reglastmeasureqt4 = new RegExp(' qt!', 'gi');
const reglastmeasureqt5 = new RegExp(' qt\\?', 'gi');
const reglastmeasureqtslashafter = new RegExp(' qt/', 'gi');

const reglastmeasurekg1 = new RegExp(' kg ', 'gi');
const reglastmeasurekg2 = new RegExp(' kg\\.', 'gi');
const reglastmeasurekg3 = new RegExp(' kg,', 'gi');
const reglastmeasurekg4 = new RegExp(' kg!', 'gi');
const reglastmeasurekg5 = new RegExp(' kg\\?', 'gi');
const reglastmeasurekgslashafter = new RegExp(' kg/', 'gi');

const reglastmeasureft1 = new RegExp(' ft ', 'gi');
const reglastmeasureft2 = new RegExp(' ft\\.', 'gi');
const reglastmeasureft3 = new RegExp(' ft,', 'gi');
const reglastmeasureft4 = new RegExp(' ft!', 'gi');
const reglastmeasureft5 = new RegExp(' ft\\?', 'gi');
const reglastmeasureftslashafter = new RegExp(' ft/', 'gi');

const reglastmeasureyd1 = new RegExp(' yd ', 'gi');
const reglastmeasureyd2 = new RegExp(' yd\\.', 'gi');
const reglastmeasureyd3 = new RegExp(' yd,', 'gi');
const reglastmeasureyd4 = new RegExp(' yd!', 'gi');
const reglastmeasureyd5 = new RegExp(' yd\\?', 'gi');
const reglastmeasureydslashafter = new RegExp(' yd/', 'gi');

const reglastmeasureml1 = new RegExp(' ml ', 'gi');
const reglastmeasureml2 = new RegExp(' ml\\.', 'gi');
const reglastmeasureml3 = new RegExp(' ml,', 'gi');
const reglastmeasureml4 = new RegExp(' ml!', 'gi');
const reglastmeasureml5 = new RegExp(' ml\\?', 'gi');
const reglastmeasuremlslashafter = new RegExp(' ml/', 'gi');

const reglastmeasurekl1 = new RegExp(' kl ', 'gi');
const reglastmeasurekl2 = new RegExp(' kl\\.', 'gi');
const reglastmeasurekl3 = new RegExp(' kl,', 'gi');
const reglastmeasurekl4 = new RegExp(' kl!', 'gi');
const reglastmeasurekl5 = new RegExp(' kl\\?', 'gi');
const reglastmeasureklslashafter = new RegExp(' kl/', 'gi');

const reglastmeasuresq1 = new RegExp(' sq ', 'gi');
const reglastmeasuresq2 = new RegExp(' sq\\.', 'gi');
const reglastmeasuresq3 = new RegExp(' sq,', 'gi');
const reglastmeasuresq4 = new RegExp(' sq!', 'gi');
const reglastmeasuresq5 = new RegExp(' sq\\?', 'gi');
const reglastmeasuresqslashafter = new RegExp(' sq/', 'gi');

const reglastmeasurekm1 = new RegExp(' km ', 'gi');
const reglastmeasurekm2 = new RegExp(' km\\.', 'gi');
const reglastmeasurekm3 = new RegExp(' km,', 'gi');
const reglastmeasurekm4 = new RegExp(' km!', 'gi');
const reglastmeasurekm5 = new RegExp(' km\\?', 'gi');
const reglastmeasurekmslashafter = new RegExp(' km/', 'gi');

const reglastmeasuremm1 = new RegExp(' mm ', 'gi');
const reglastmeasuremm2 = new RegExp(' mm\\.', 'gi');
const reglastmeasuremm3 = new RegExp(' mm,', 'gi');
const reglastmeasuremm4 = new RegExp(' mm!', 'gi');
const reglastmeasuremm5 = new RegExp(' mm\\?', 'gi');
const reglastmeasuremmslashafter = new RegExp(' mm/', 'gi');

const reglastmeasurecm1 = new RegExp(' cm ', 'gi');
const reglastmeasurecm2 = new RegExp(' cm\\.', 'gi');
const reglastmeasurecm3 = new RegExp(' cm,', 'gi');
const reglastmeasurecm4 = new RegExp(' cm!', 'gi');
const reglastmeasurecm5 = new RegExp(' cm\\?', 'gi');
const reglastmeasurecmslashafter = new RegExp(' cm/', 'gi');

const reglastmeasureii1 = new RegExp(' ii ', 'gi');
const reglastmeasureii2 = new RegExp(' ii\\.', 'gi');
const reglastmeasureii3 = new RegExp(' ii,', 'gi');
const reglastmeasureii4 = new RegExp(' ii!', 'gi');
const reglastmeasureii5 = new RegExp(' ii\\?', 'gi');
const reglastmeasureiislashafter = new RegExp(' ii/', 'gi');

const reglastmeasureiii1 = new RegExp(' iii ', 'gi');
const reglastmeasureiii2 = new RegExp(' iii\\.', 'gi');
const reglastmeasureiii3 = new RegExp(' iii,', 'gi');
const reglastmeasureiii4 = new RegExp(' iii!', 'gi');
const reglastmeasureiii5 = new RegExp(' iii\\?', 'gi');
const reglastmeasureiiislashafter = new RegExp(' iii/', 'gi');

const reglastmeasureiv1 = new RegExp(' iv ', 'gi');
const reglastmeasureiv2 = new RegExp(' iv\\.', 'gi');
const reglastmeasureiv3 = new RegExp(' iv,', 'gi');
const reglastmeasureiv4 = new RegExp(' iv!', 'gi');
const reglastmeasureiv5 = new RegExp(' iv\\?', 'gi');
const reglastmeasureivslashafter = new RegExp(' iv/', 'gi');

const reglastmeasurevi1 = new RegExp(' vi ', 'gi');
const reglastmeasurevi2 = new RegExp(' vi\\.', 'gi');
const reglastmeasurevi3 = new RegExp(' vi,', 'gi');
const reglastmeasurevi4 = new RegExp(' vi!', 'gi');
const reglastmeasurevi5 = new RegExp(' vi\\?', 'gi');
const reglastmeasurevislashafter = new RegExp(' vi/', 'gi');

const reglastmeasurevii1 = new RegExp(' vii ', 'gi');
const reglastmeasurevii2 = new RegExp(' vii\\.', 'gi');
const reglastmeasurevii3 = new RegExp(' vii,', 'gi');
const reglastmeasurevii4 = new RegExp(' vii!', 'gi');
const reglastmeasurevii5 = new RegExp(' vii\\?', 'gi');
const reglastmeasureviislashafter = new RegExp(' vii/', 'gi');

const reglastmeasureviii1 = new RegExp(' viii ', 'gi');
const reglastmeasureviii2 = new RegExp(' viii\\.', 'gi');
const reglastmeasureviii3 = new RegExp(' viii,', 'gi');
const reglastmeasureviii4 = new RegExp(' viii!', 'gi');
const reglastmeasureviii5 = new RegExp(' viii\\?', 'gi');
const reglastmeasureviiislashafter = new RegExp(' viii/', 'gi');

const reglastmeasureix1 = new RegExp(' ix ', 'gi');
const reglastmeasureix2 = new RegExp(' ix\\.', 'gi');
const reglastmeasureix3 = new RegExp(' ix,', 'gi');
const reglastmeasureix4 = new RegExp(' ix!', 'gi');
const reglastmeasureix5 = new RegExp(' ix\\?', 'gi');
const reglastmeasureixslashafter = new RegExp(' ix/', 'gi');

const reglastmeasurexi1 = new RegExp(' xi ', 'gi');
const reglastmeasurexi2 = new RegExp(' xi\\.', 'gi');
const reglastmeasurexi3 = new RegExp(' xi,', 'gi');
const reglastmeasurexi4 = new RegExp(' xi!', 'gi');
const reglastmeasurexi5 = new RegExp(' xi\\?', 'gi');
const reglastmeasurexislashafter = new RegExp(' xi/', 'gi');

const reglastmeasurexii1 = new RegExp(' xii ', 'gi');
const reglastmeasurexii2 = new RegExp(' xii\\.', 'gi');
const reglastmeasurexii3 = new RegExp(' xii,', 'gi');
const reglastmeasurexii4 = new RegExp(' xii!', 'gi');
const reglastmeasurexii5 = new RegExp(' xii\\?', 'gi');
const reglastmeasurexiislashafter = new RegExp(' xii/', 'gi');

const reglastmeasurexiii1 = new RegExp(' xiii ', 'gi');
const reglastmeasurexiii2 = new RegExp(' xiii\\.', 'gi');
const reglastmeasurexiii3 = new RegExp(' xiii,', 'gi');
const reglastmeasurexiii4 = new RegExp(' xiii!', 'gi');
const reglastmeasurexiii5 = new RegExp(' xiii\\?', 'gi');
const reglastmeasurexiiislashafter = new RegExp(' xiii/', 'gi');

const reglastmeasurefwb1 = new RegExp(',fwb ', 'gi');
const reglastmeasurefwbslashfirst = new RegExp('/fwb ', 'gi');
const reglastmeasurefwb2 = new RegExp('!fwb ', 'gi');
const reglastmeasurefwb3 = new RegExp('\\?fwb ', 'gi');
const reglastmeasurefwb4 = new RegExp('\\.fwb ', 'gi');
const reglastmeasurefwb5 = new RegExp(' fwb ', 'gi');
const reglastmeasurefwb6 = new RegExp(' fwb\\.', 'gi');
const reglastmeasurefwb7 = new RegExp(' fwb,', 'gi');
const reglastmeasurefwb8 = new RegExp(' fwb!', 'gi');
const reglastmeasurefwb9 = new RegExp(' fwb\\?', 'gi');
const reglastmeasurefwbslashafter = new RegExp(' fwb/', 'gi');

const reglastmeasureirs1 = new RegExp(',irs ', 'gi');
const reglastmeasureirsslashfirst = new RegExp('/irs ', 'gi');
const reglastmeasureirs2 = new RegExp('!irs ', 'gi');
const reglastmeasureirs3 = new RegExp('\\?irs ', 'gi');
const reglastmeasureirs4 = new RegExp('\\.irs ', 'gi');
const reglastmeasureirs5 = new RegExp(' irs ', 'gi');
const reglastmeasureirs6 = new RegExp(' irs\\.', 'gi');
const reglastmeasureirs7 = new RegExp(' irs,', 'gi');
const reglastmeasureirs8 = new RegExp(' irs!', 'gi');
const reglastmeasureirs9 = new RegExp(' irs\\?', 'gi');
const reglastmeasureirsslashafter = new RegExp(' irs/', 'gi');

const reglastmeasurerrv1 = new RegExp(',rrv ', 'gi');
const reglastmeasurerrvslashfirst = new RegExp('/rrv ', 'gi');
const reglastmeasurerrv2 = new RegExp('!rrv ', 'gi');
const reglastmeasurerrv3 = new RegExp('\\?rrv ', 'gi');
const reglastmeasurerrv4 = new RegExp('\\.rrv ', 'gi');
const reglastmeasurerrv5 = new RegExp(' rrv ', 'gi');
const reglastmeasurerrv6 = new RegExp(' rrv\\.', 'gi');
const reglastmeasurerrv7 = new RegExp(' rrv,', 'gi');
const reglastmeasurerrv8 = new RegExp(' rrv!', 'gi');
const reglastmeasurerrv9 = new RegExp(' rrv\\?', 'gi');
const reglastmeasurerrvslashafter = new RegExp(' rrv/', 'gi');

const reglastmeasureeg1 = new RegExp(',eg ', 'gi');
const reglastmeasureegslashfirst = new RegExp('/eg ', 'gi');
const reglastmeasureeg2 = new RegExp('!eg ', 'gi');
const reglastmeasureeg3 = new RegExp('\\?eg ', 'gi');
const reglastmeasureeg4 = new RegExp('\\.eg ', 'gi');
const reglastmeasureeg5 = new RegExp(' eg ', 'gi');
const reglastmeasureeg6 = new RegExp(' eg\\.', 'gi');
const reglastmeasureeg7 = new RegExp(' eg,', 'gi');
const reglastmeasureeg8 = new RegExp(' eg!', 'gi');
const reglastmeasureeg9 = new RegExp(' eg\\?', 'gi');
const reglastmeasureegslashafter = new RegExp(' eg/', 'gi');

const reglastmeasureegpoint1 = new RegExp(',e\\.g\\. ', 'gi');
const reglastmeasureegpointslashfirst = new RegExp('/e\\.g\\. ', 'gi');
const reglastmeasureegpoint2 = new RegExp('!e\\.g\\. ', 'gi');
const reglastmeasureegpoint3 = new RegExp('\\?e\\.g\\. ', 'gi');
const reglastmeasureegpoint4 = new RegExp('\\.e\\.g\\. ', 'gi');
const reglastmeasureegpoint5 = new RegExp(' e\\.g\\. ', 'gi');
const reglastmeasureegpoint6 = new RegExp(' e\\.g\\.', 'gi');
const reglastmeasureegpoint7 = new RegExp(' e\\.g\\.,', 'gi');
const reglastmeasureegpoint8 = new RegExp(' e\\.g\\.!', 'gi');
const reglastmeasureegpoint9 = new RegExp(' e\\.g\\.\\?', 'gi');
const reglastmeasureegpointslashafter = new RegExp(' e\\.g\\./', 'gi');

const reglastmeasureie1 = new RegExp(',i\\.e\\. ', 'gi');
const reglastmeasureieslashfirst = new RegExp('/i\\.e\\. ', 'gi');
const reglastmeasureie2 = new RegExp('!i\\.e\\. ', 'gi');
const reglastmeasureie3 = new RegExp('\\?i\\.e\\. ', 'gi');
const reglastmeasureie4 = new RegExp('\\.i\\.e\\. ', 'gi');
const reglastmeasureie5 = new RegExp(' i\\.e\\. ', 'gi');
const reglastmeasureie6 = new RegExp(' i\\.e\\.\\.', 'gi');
const reglastmeasureie7 = new RegExp(' i\\.e\\.,', 'gi');
const reglastmeasureie8 = new RegExp(' i\\.e\\.!', 'gi');
const reglastmeasureie9 = new RegExp(' i\\.e\\.\\?', 'gi');
const reglastmeasureieslashafter = new RegExp(' i\\.e\\./', 'gi');

const reglastmeasureegfr1 = new RegExp(',egfr ', 'gi');
const reglastmeasureegfrslashfirst = new RegExp('/egfr ', 'gi');
const reglastmeasureegfr2 = new RegExp('!egfr ', 'gi');
const reglastmeasureegfr3 = new RegExp('\\?egfr ', 'gi');
const reglastmeasureegfr4 = new RegExp('\\.egfr ', 'gi');
const reglastmeasureegfr5 = new RegExp(' egfr ', 'gi');
const reglastmeasureegfr6 = new RegExp(' egfr\\.', 'gi');
const reglastmeasureegfr7 = new RegExp(' egfr,', 'gi');
const reglastmeasureegfr8 = new RegExp(' egfr!', 'gi');
const reglastmeasureegfr9 = new RegExp(' egfr\\?', 'gi');
const reglastmeasureegfrslashafter = new RegExp(' egfr/', 'gi');

const reglastmeasurebf1 = new RegExp(',bf ', 'gi');
const reglastmeasurebfslashfirst = new RegExp('/bf ', 'gi');
const reglastmeasurebf2 = new RegExp('!bf ', 'gi');
const reglastmeasurebf3 = new RegExp('\\?bf ', 'gi');
const reglastmeasurebf4 = new RegExp('\\.bf ', 'gi');
const reglastmeasurebf5 = new RegExp(' bf ', 'gi');
const reglastmeasurebf6 = new RegExp(' bf\\.', 'gi');
const reglastmeasurebf7 = new RegExp(' bf,', 'gi');
const reglastmeasurebf8 = new RegExp(' bf!', 'gi');
const reglastmeasurebf9 = new RegExp(' bf\\?', 'gi');
const reglastmeasurebfslashafter = new RegExp(' bf/', 'gi');

const reglastmeasuregf1 = new RegExp(',gf ', 'gi');
const reglastmeasuregfslashfirst = new RegExp('/gf ', 'gi');
const reglastmeasuregf2 = new RegExp('!gf ', 'gi');
const reglastmeasuregf3 = new RegExp('\\?gf ', 'gi');
const reglastmeasuregf4 = new RegExp('\\.gf ', 'gi');
const reglastmeasuregf5 = new RegExp(' gf ', 'gi');
const reglastmeasuregf6 = new RegExp(' gf\\.', 'gi');
const reglastmeasuregf7 = new RegExp(' gf,', 'gi');
const reglastmeasuregf8 = new RegExp(' gf!', 'gi');
const reglastmeasuregf9 = new RegExp(' gf\\?', 'gi');
const reglastmeasuregfslashafter = new RegExp(' gf/', 'gi');

const reglastmeasureftw1 = new RegExp(',ftw ', 'gi');
const reglastmeasureftwslashfirst = new RegExp('/ftw ', 'gi');
const reglastmeasureftw2 = new RegExp('!ftw ', 'gi');
const reglastmeasureftw3 = new RegExp('\\?ftw ', 'gi');
const reglastmeasureftw4 = new RegExp('\\.ftw ', 'gi');
const reglastmeasureftw5 = new RegExp(' ftw ', 'gi');
const reglastmeasureftw6 = new RegExp(' ftw\\.', 'gi');
const reglastmeasureftw7 = new RegExp(' ftw,', 'gi');
const reglastmeasureftw8 = new RegExp(' ftw!', 'gi');
const reglastmeasureftw9 = new RegExp(' ftw\\?', 'gi');
const reglastmeasureftwslashafter = new RegExp(' ftw/', 'gi');

const reglastmeasureone_x1 = new RegExp(',one x ', 'gi');
const reglastmeasureone_xslashfirst = new RegExp('/one x ', 'gi');
const reglastmeasureone_x2 = new RegExp('!one x ', 'gi');
const reglastmeasureone_x3 = new RegExp('\\?one x ', 'gi');
const reglastmeasureone_x4 = new RegExp('\\.one x ', 'gi');
const reglastmeasureone_x5 = new RegExp(' one x ', 'gi');
const reglastmeasureone_x6 = new RegExp(' one x\\.', 'gi');
const reglastmeasureone_x7 = new RegExp(' one x,', 'gi');
const reglastmeasureone_x8 = new RegExp(' one x!', 'gi');
const reglastmeasureone_x9 = new RegExp(' one x\\?', 'gi');
const reglastmeasureone_xslashafter = new RegExp(' one x/', 'gi');

const reglastmeasurefgth1 = new RegExp(',fgth ', 'gi');
const reglastmeasurefgthslashfirst = new RegExp('/fgth ', 'gi');
const reglastmeasurefgth2 = new RegExp('!fgth ', 'gi');
const reglastmeasurefgth3 = new RegExp('\\?fgth ', 'gi');
const reglastmeasurefgth4 = new RegExp('\\.fgth ', 'gi');
const reglastmeasurefgth5 = new RegExp(' fgth ', 'gi');
const reglastmeasurefgth6 = new RegExp(' fgth\\.', 'gi');
const reglastmeasurefgth7 = new RegExp(' fgth,', 'gi');
const reglastmeasurefgth8 = new RegExp(' fgth!', 'gi');
const reglastmeasurefgth9 = new RegExp(' fgth\\?', 'gi');
const reglastmeasurefgthslashafter = new RegExp(' fgth/', 'gi');

const reglastmeasures_x1 = new RegExp(',s x ', 'gi');
const reglastmeasures_xslashfirst = new RegExp('/s x ', 'gi');
const reglastmeasures_x2 = new RegExp('!s x ', 'gi');
const reglastmeasures_x3 = new RegExp('\\?s x ', 'gi');
const reglastmeasures_x4 = new RegExp('\\.s x ', 'gi');
const reglastmeasures_x5 = new RegExp(' s x ', 'gi');
const reglastmeasures_x6 = new RegExp(' s x\\.', 'gi');
const reglastmeasures_x7 = new RegExp(' s x,', 'gi');
const reglastmeasures_x8 = new RegExp(' s x!', 'gi');
const reglastmeasures_x9 = new RegExp(' s x\\?', 'gi');
const reglastmeasures_xslashafter = new RegExp(' s x/', 'gi');

const reglastmeasuref_ck1 = new RegExp(',f ck ', 'gi');
const reglastmeasuref_ckslashfirst = new RegExp('/f ck ', 'gi');
const reglastmeasuref_ck2 = new RegExp('!f ck ', 'gi');
const reglastmeasuref_ck3 = new RegExp('\\?f ck ', 'gi');
const reglastmeasuref_ck4 = new RegExp('\\.f ck ', 'gi');
const reglastmeasuref_ck5 = new RegExp(' f ck ', 'gi');
const reglastmeasuref_ck6 = new RegExp(' f ck\\.', 'gi');
const reglastmeasuref_ck7 = new RegExp(' f ck,', 'gi');
const reglastmeasuref_ck8 = new RegExp(' f ck!', 'gi');
const reglastmeasuref_ck9 = new RegExp(' f ck\\?', 'gi');
const reglastmeasuref_ckslashafter = new RegExp(' f ck/', 'gi');

const reglastmeasuresh_t1 = new RegExp(',sh t ', 'gi');
const reglastmeasuresh_tslashfirst = new RegExp('/sh t ', 'gi');
const reglastmeasuresh_t2 = new RegExp('!sh t ', 'gi');
const reglastmeasuresh_t3 = new RegExp('\\?sh t ', 'gi');
const reglastmeasuresh_t4 = new RegExp('\\.sh t ', 'gi');
const reglastmeasuresh_t5 = new RegExp(' sh t ', 'gi');
const reglastmeasuresh_t6 = new RegExp(' sh t\\.', 'gi');
const reglastmeasuresh_t7 = new RegExp(' sh t,', 'gi');
const reglastmeasuresh_t8 = new RegExp(' sh t!', 'gi');
const reglastmeasuresh_t9 = new RegExp(' sh t\\?', 'gi');
const reglastmeasuresh_tslashafter = new RegExp(' sh t/', 'gi');

const reglastmeasureptsd1 = new RegExp(',ptsd ', 'gi');
const reglastmeasureptsdslashfirst = new RegExp('/ptsd ', 'gi');
const reglastmeasureptsd2 = new RegExp('!ptsd ', 'gi');
const reglastmeasureptsd3 = new RegExp('\\?ptsd ', 'gi');
const reglastmeasureptsd4 = new RegExp('\\.ptsd ', 'gi');
const reglastmeasureptsd5 = new RegExp(' ptsd ', 'gi');
const reglastmeasureptsd6 = new RegExp(' ptsd\\.', 'gi');
const reglastmeasureptsd7 = new RegExp(' ptsd,', 'gi');
const reglastmeasureptsd8 = new RegExp(' ptsd!', 'gi');
const reglastmeasureptsd9 = new RegExp(' ptsd\\?', 'gi');
const reglastmeasureptsdslashafter = new RegExp(' ptsd/', 'gi');

const reglastmeasuressri1 = new RegExp(',ssri ', 'gi');
const reglastmeasuressrislashfirst = new RegExp('/ssri ', 'gi');
const reglastmeasuressri2 = new RegExp('!ssri ', 'gi');
const reglastmeasuressri3 = new RegExp('\\?ssri ', 'gi');
const reglastmeasuressri4 = new RegExp('\\.ssri ', 'gi');
const reglastmeasuressri5 = new RegExp(' ssri ', 'gi');
const reglastmeasuressri6 = new RegExp(' ssri\\.', 'gi');
const reglastmeasuressri7 = new RegExp(' ssri,', 'gi');
const reglastmeasuressri8 = new RegExp(' ssri!', 'gi');
const reglastmeasuressri9 = new RegExp(' ssri\\?', 'gi');
const reglastmeasuressrislashafter = new RegExp(' ssri/', 'gi');

const reglastmeasureomg1 = new RegExp(',omg ', 'gi');
const reglastmeasureomgslashfirst = new RegExp('/omg ', 'gi');
const reglastmeasureomg2 = new RegExp('!omg ', 'gi');
const reglastmeasureomg3 = new RegExp('\\?omg ', 'gi');
const reglastmeasureomg4 = new RegExp('\\.omg ', 'gi');
const reglastmeasureomg5 = new RegExp(' omg ', 'gi');
const reglastmeasureomg6 = new RegExp(' omg\\.', 'gi');
const reglastmeasureomg7 = new RegExp(' omg,', 'gi');
const reglastmeasureomg8 = new RegExp(' omg!', 'gi');
const reglastmeasureomg9 = new RegExp(' omg\\?', 'gi');
const reglastmeasureomgslashafter = new RegExp(' omg/', 'gi');

const reglastmeasureomfg1 = new RegExp(',omfg ', 'gi');
const reglastmeasureomfgslashfirst = new RegExp('/omfg ', 'gi');
const reglastmeasureomfg2 = new RegExp('!omfg ', 'gi');
const reglastmeasureomfg3 = new RegExp('\\?omfg ', 'gi');
const reglastmeasureomfg4 = new RegExp('\\.omfg ', 'gi');
const reglastmeasureomfg5 = new RegExp(' omfg ', 'gi');
const reglastmeasureomfg6 = new RegExp(' omfg\\.', 'gi');
const reglastmeasureomfg7 = new RegExp(' omfg,', 'gi');
const reglastmeasureomfg8 = new RegExp(' omfg!', 'gi');
const reglastmeasureomfg9 = new RegExp(' omfg\\?', 'gi');
const reglastmeasureomfgslashafter = new RegExp(' omfg/', 'gi');

const reglastmeasuregwtw1 = new RegExp(',gwtw ', 'gi');
const reglastmeasuregwtwslashfirst = new RegExp('/gwtw ', 'gi');
const reglastmeasuregwtw2 = new RegExp('!gwtw ', 'gi');
const reglastmeasuregwtw3 = new RegExp('\\?gwtw ', 'gi');
const reglastmeasuregwtw4 = new RegExp('\\.gwtw ', 'gi');
const reglastmeasuregwtw5 = new RegExp(' gwtw ', 'gi');
const reglastmeasuregwtw6 = new RegExp(' gwtw\\.', 'gi');
const reglastmeasuregwtw7 = new RegExp(' gwtw,', 'gi');
const reglastmeasuregwtw8 = new RegExp(' gwtw!', 'gi');
const reglastmeasuregwtw9 = new RegExp(' gwtw\\?', 'gi');
const reglastmeasuregwtwslashafter = new RegExp(' gwtw/', 'gi');

const reglastmeasureidk1 = new RegExp(',idk ', 'gi');
const reglastmeasureidkslashfirst = new RegExp('/idk ', 'gi');
const reglastmeasureidk2 = new RegExp('!idk ', 'gi');
const reglastmeasureidk3 = new RegExp('\\?idk ', 'gi');
const reglastmeasureidk4 = new RegExp('\\.idk ', 'gi');
const reglastmeasureidk5 = new RegExp(' idk ', 'gi');
const reglastmeasureidk6 = new RegExp(' idk\\.', 'gi');
const reglastmeasureidk7 = new RegExp(' idk,', 'gi');
const reglastmeasureidk8 = new RegExp(' idk!', 'gi');
const reglastmeasureidk9 = new RegExp(' idk\\?', 'gi');
const reglastmeasureidkslashafter = new RegExp(' idk/', 'gi');

const reglastmeasureimo1 = new RegExp(',imo ', 'gi');
const reglastmeasureimoslashfirst = new RegExp('/imo ', 'gi');
const reglastmeasureimo2 = new RegExp('!imo ', 'gi');
const reglastmeasureimo3 = new RegExp('\\?imo ', 'gi');
const reglastmeasureimo4 = new RegExp('\\.imo ', 'gi');
const reglastmeasureimo5 = new RegExp(' imo ', 'gi');
const reglastmeasureimo6 = new RegExp(' imo\\.', 'gi');
const reglastmeasureimo7 = new RegExp(' imo,', 'gi');
const reglastmeasureimo8 = new RegExp(' imo!', 'gi');
const reglastmeasureimo9 = new RegExp(' imo\\?', 'gi');
const reglastmeasureimoslashafter = new RegExp(' imo/', 'gi');

const reglastmeasureimho1 = new RegExp(',imho ', 'gi');
const reglastmeasureimhoslashfirst = new RegExp('/imho ', 'gi');
const reglastmeasureimho2 = new RegExp('!imho ', 'gi');
const reglastmeasureimho3 = new RegExp('\\?imho ', 'gi');
const reglastmeasureimho4 = new RegExp('\\.imho ', 'gi');
const reglastmeasureimho5 = new RegExp(' imho ', 'gi');
const reglastmeasureimho6 = new RegExp(' imho\\.', 'gi');
const reglastmeasureimho7 = new RegExp(' imho,', 'gi');
const reglastmeasureimho8 = new RegExp(' imho!', 'gi');
const reglastmeasureimho9 = new RegExp(' imho\\?', 'gi');
const reglastmeasureimhoslashafter = new RegExp(' imho/', 'gi');

const reglastmeasurewtf1 = new RegExp(',wtf ', 'gi');
const reglastmeasurewtfslashfirst = new RegExp('/wtf ', 'gi');
const reglastmeasurewtf2 = new RegExp('!wtf ', 'gi');
const reglastmeasurewtf3 = new RegExp('\\?wtf ', 'gi');
const reglastmeasurewtf4 = new RegExp('\\.wtf ', 'gi');
const reglastmeasurewtf5 = new RegExp(' wtf ', 'gi');
const reglastmeasurewtf6 = new RegExp(' wtf\\.', 'gi');
const reglastmeasurewtf7 = new RegExp(' wtf,', 'gi');
const reglastmeasurewtf8 = new RegExp(' wtf!', 'gi');
const reglastmeasurewtf9 = new RegExp(' wtf\\?', 'gi');
const reglastmeasurewtfslashafter = new RegExp(' wtf/', 'gi');

const reglastmeasurebtw1 = new RegExp(',btw ', 'gi');
const reglastmeasurebtwslashfirst = new RegExp('/btw ', 'gi');
const reglastmeasurebtw2 = new RegExp('!btw ', 'gi');
const reglastmeasurebtw3 = new RegExp('\\?btw ', 'gi');
const reglastmeasurebtw4 = new RegExp('\\.btw ', 'gi');
const reglastmeasurebtw5 = new RegExp(' btw ', 'gi');
const reglastmeasurebtw6 = new RegExp(' btw\\.', 'gi');
const reglastmeasurebtw7 = new RegExp(' btw,', 'gi');
const reglastmeasurebtw8 = new RegExp(' btw!', 'gi');
const reglastmeasurebtw9 = new RegExp(' btw\\?', 'gi');
const reglastmeasurebtwslashafter = new RegExp(' btw/', 'gi');

const reglastmeasurelol1 = new RegExp(',lol ', 'gi');
const reglastmeasurelolslashfirst = new RegExp('/lol ', 'gi');
const reglastmeasurelol2 = new RegExp('!lol ', 'gi');
const reglastmeasurelol3 = new RegExp('\\?lol ', 'gi');
const reglastmeasurelol4 = new RegExp('\\.lol ', 'gi');
const reglastmeasurelol5 = new RegExp(' lol ', 'gi');
const reglastmeasurelol6 = new RegExp(' lol\\.', 'gi');
const reglastmeasurelol7 = new RegExp(' lol,', 'gi');
const reglastmeasurelol8 = new RegExp(' lol!', 'gi');
const reglastmeasurelol9 = new RegExp(' lol\\?', 'gi');
const reglastmeasurelolslashafter = new RegExp(' lol/', 'gi');

const reglastmeasurefyi1 = new RegExp(',fyi ', 'gi');
const reglastmeasurefyislashfirst = new RegExp('/fyi ', 'gi');
const reglastmeasurefyi2 = new RegExp('!fyi ', 'gi');
const reglastmeasurefyi3 = new RegExp('\\?fyi ', 'gi');
const reglastmeasurefyi4 = new RegExp('\\.fyi ', 'gi');
const reglastmeasurefyi5 = new RegExp(' fyi ', 'gi');
const reglastmeasurefyi6 = new RegExp(' fyi\\.', 'gi');
const reglastmeasurefyi7 = new RegExp(' fyi,', 'gi');
const reglastmeasurefyi8 = new RegExp(' fyi!', 'gi');
const reglastmeasurefyi9 = new RegExp(' fyi\\?', 'gi');
const reglastmeasurefyislashafter = new RegExp(' fyi/', 'gi');

const reglastmeasurestds1 = new RegExp(',stds ', 'gi');
const reglastmeasurestdsslashfirst = new RegExp('/stds ', 'gi');
const reglastmeasurestds2 = new RegExp('!stds ', 'gi');
const reglastmeasurestds3 = new RegExp('\\?stds ', 'gi');
const reglastmeasurestds4 = new RegExp('\\.stds ', 'gi');
const reglastmeasurestds5 = new RegExp(' stds ', 'gi');
const reglastmeasurestds6 = new RegExp(' stds\\.', 'gi');
const reglastmeasurestds7 = new RegExp(' stds,', 'gi');
const reglastmeasurestds8 = new RegExp(' stds!', 'gi');
const reglastmeasurestds9 = new RegExp(' stds\\?', 'gi');
const reglastmeasurestdsslashafter = new RegExp(' stds/', 'gi');

const reglastmeasurebdsm1 = new RegExp(',bdsm ', 'gi');
const reglastmeasurebdsmslashfirst = new RegExp('/bdsm ', 'gi');
const reglastmeasurebdsm2 = new RegExp('!bdsm ', 'gi');
const reglastmeasurebdsm3 = new RegExp('\\?bdsm ', 'gi');
const reglastmeasurebdsm4 = new RegExp('\\.bdsm ', 'gi');
const reglastmeasurebdsm5 = new RegExp(' bdsm ', 'gi');
const reglastmeasurebdsm6 = new RegExp(' bdsm\\.', 'gi');
const reglastmeasurebdsm7 = new RegExp(' bdsm,', 'gi');
const reglastmeasurebdsm8 = new RegExp(' bdsm!', 'gi');
const reglastmeasurebdsm9 = new RegExp(' bdsm\\?', 'gi');
const reglastmeasurebdsmslashafter = new RegExp(' bdsm/', 'gi');

const reglastmeasurebs1 = new RegExp(',bs ', 'gi');
const reglastmeasurebsslashfirst = new RegExp('/bs ', 'gi');
const reglastmeasurebs2 = new RegExp('!bs ', 'gi');
const reglastmeasurebs3 = new RegExp('\\?bs ', 'gi');
const reglastmeasurebs4 = new RegExp('\\.bs ', 'gi');
const reglastmeasurebs5 = new RegExp(' bs ', 'gi');
const reglastmeasurebs6 = new RegExp(' bs\\.', 'gi');
const reglastmeasurebs7 = new RegExp(' bs,', 'gi');
const reglastmeasurebs8 = new RegExp(' bs!', 'gi');
const reglastmeasurebs9 = new RegExp(' bs\\?', 'gi');
const reglastmeasurebsslashafter = new RegExp(' bs/', 'gi');

const reglastmeasureeeg1 = new RegExp(',eeg ', 'gi');
const reglastmeasureeegslashfirst = new RegExp('/eeg ', 'gi');
const reglastmeasureeeg2 = new RegExp('!eeg ', 'gi');
const reglastmeasureeeg3 = new RegExp('\\?eeg ', 'gi');
const reglastmeasureeeg4 = new RegExp('\\.eeg ', 'gi');
const reglastmeasureeeg5 = new RegExp(' eeg ', 'gi');
const reglastmeasureeeg6 = new RegExp(' eeg\\.', 'gi');
const reglastmeasureeeg7 = new RegExp(' eeg,', 'gi');
const reglastmeasureeeg8 = new RegExp(' eeg!', 'gi');
const reglastmeasureeeg9 = new RegExp(' eeg\\?', 'gi');
const reglastmeasureeegslashafter = new RegExp(' eeg/', 'gi');

const reglastmeasureedm1 = new RegExp(',edm ', 'gi');
const reglastmeasureedmslashfirst = new RegExp('/edm ', 'gi');
const reglastmeasureedm2 = new RegExp('!edm ', 'gi');
const reglastmeasureedm3 = new RegExp('\\?edm ', 'gi');
const reglastmeasureedm4 = new RegExp('\\.edm ', 'gi');
const reglastmeasureedm5 = new RegExp(' edm ', 'gi');
const reglastmeasureedm6 = new RegExp(' edm\\.', 'gi');
const reglastmeasureedm7 = new RegExp(' edm,', 'gi');
const reglastmeasureedm8 = new RegExp(' edm!', 'gi');
const reglastmeasureedm9 = new RegExp(' edm\\?', 'gi');
const reglastmeasureedmslashafter = new RegExp(' edm/', 'gi');

const reglastmeasuremlk1 = new RegExp(',mlk ', 'gi');
const reglastmeasuremlkslashfirst = new RegExp('/mlk ', 'gi');
const reglastmeasuremlk2 = new RegExp('!mlk ', 'gi');
const reglastmeasuremlk3 = new RegExp('\\?mlk ', 'gi');
const reglastmeasuremlk4 = new RegExp('\\.mlk ', 'gi');
const reglastmeasuremlk5 = new RegExp(' mlk ', 'gi');
const reglastmeasuremlk6 = new RegExp(' mlk\\.', 'gi');
const reglastmeasuremlk7 = new RegExp(' mlk,', 'gi');
const reglastmeasuremlk8 = new RegExp(' mlk!', 'gi');
const reglastmeasuremlk9 = new RegExp(' mlk\\?', 'gi');
const reglastmeasuremlkslashafter = new RegExp(' mlk/', 'gi');

const reglastmeasurey2k1 = new RegExp(',y2k ', 'gi');
const reglastmeasurey2kslashfirst = new RegExp('/y2k ', 'gi');
const reglastmeasurey2k2 = new RegExp('!y2k ', 'gi');
const reglastmeasurey2k3 = new RegExp('\\?y2k ', 'gi');
const reglastmeasurey2k4 = new RegExp('\\.y2k ', 'gi');
const reglastmeasurey2k5 = new RegExp(' y2k ', 'gi');
const reglastmeasurey2k6 = new RegExp(' y2k\\.', 'gi');
const reglastmeasurey2k7 = new RegExp(' y2k,', 'gi');
const reglastmeasurey2k8 = new RegExp(' y2k!', 'gi');
const reglastmeasurey2k9 = new RegExp(' y2k\\?', 'gi');
const reglastmeasurey2kslashafter = new RegExp(' y2k/', 'gi');

const reglastmeasureekcg1 = new RegExp(',ekcg ', 'gi');
const reglastmeasureekcgslashfirst = new RegExp('/ekcg ', 'gi');
const reglastmeasureekcg2 = new RegExp('!ekcg ', 'gi');
const reglastmeasureekcg3 = new RegExp('\\?ekcg ', 'gi');
const reglastmeasureekcg4 = new RegExp('\\.ekcg ', 'gi');
const reglastmeasureekcg5 = new RegExp(' ekcg ', 'gi');
const reglastmeasureekcg6 = new RegExp(' ekcg\\.', 'gi');
const reglastmeasureekcg7 = new RegExp(' ekcg,', 'gi');
const reglastmeasureekcg8 = new RegExp(' ekcg!', 'gi');
const reglastmeasureekcg9 = new RegExp(' ekcg\\?', 'gi');
const reglastmeasureekcgslashafter = new RegExp(' ekcg/', 'gi');

const reglastmeasureekgs1 = new RegExp(',ekgs ', 'gi');
const reglastmeasureekgsslashfirst = new RegExp('/ekgs ', 'gi');
const reglastmeasureekgs2 = new RegExp('!ekgs ', 'gi');
const reglastmeasureekgs3 = new RegExp('\\?ekgs ', 'gi');
const reglastmeasureekgs4 = new RegExp('\\.ekgs ', 'gi');
const reglastmeasureekgs5 = new RegExp(' ekgs ', 'gi');
const reglastmeasureekgs6 = new RegExp(' ekgs\\.', 'gi');
const reglastmeasureekgs7 = new RegExp(' ekgs,', 'gi');
const reglastmeasureekgs8 = new RegExp(' ekgs!', 'gi');
const reglastmeasureekgs9 = new RegExp(' ekgs\\?', 'gi');
const reglastmeasureekgsslashafter = new RegExp(' ekgs/', 'gi');

const reglastmeasurepov1 = new RegExp(',pov ', 'gi');
const reglastmeasurepovslashfirst = new RegExp('/pov ', 'gi');
const reglastmeasurepov2 = new RegExp('!pov ', 'gi');
const reglastmeasurepov3 = new RegExp('\\?pov ', 'gi');
const reglastmeasurepov4 = new RegExp('\\.pov ', 'gi');
const reglastmeasurepov5 = new RegExp(' pov ', 'gi');
const reglastmeasurepov6 = new RegExp(' pov\\.', 'gi');
const reglastmeasurepov7 = new RegExp(' pov,', 'gi');
const reglastmeasurepov8 = new RegExp(' pov!', 'gi');
const reglastmeasurepov9 = new RegExp(' pov\\?', 'gi');
const reglastmeasurepovslashafter = new RegExp(' pov/', 'gi');

const reglastmeasurepcos1 = new RegExp(',pcos ', 'gi');
const reglastmeasurepcosslashfirst = new RegExp('/pcos ', 'gi');
const reglastmeasurepcos2 = new RegExp('!pcos ', 'gi');
const reglastmeasurepcos3 = new RegExp('\\?pcos ', 'gi');
const reglastmeasurepcos4 = new RegExp('\\.pcos ', 'gi');
const reglastmeasurepcos5 = new RegExp(' pcos ', 'gi');
const reglastmeasurepcos6 = new RegExp(' pcos\\.', 'gi');
const reglastmeasurepcos7 = new RegExp(' pcos,', 'gi');
const reglastmeasurepcos8 = new RegExp(' pcos!', 'gi');
const reglastmeasurepcos9 = new RegExp(' pcos\\?', 'gi');
const reglastmeasurepcosslashafter = new RegExp(' pcos/', 'gi');

const reglastmeasuretbh1 = new RegExp(',tbh ', 'gi');
const reglastmeasuretbhslashfirst = new RegExp('/tbh ', 'gi');
const reglastmeasuretbh2 = new RegExp('!tbh ', 'gi');
const reglastmeasuretbh3 = new RegExp('\\?tbh ', 'gi');
const reglastmeasuretbh4 = new RegExp('\\.tbh ', 'gi');
const reglastmeasuretbh5 = new RegExp(' tbh ', 'gi');
const reglastmeasuretbh6 = new RegExp(' tbh\\.', 'gi');
const reglastmeasuretbh7 = new RegExp(' tbh,', 'gi');
const reglastmeasuretbh8 = new RegExp(' tbh!', 'gi');
const reglastmeasuretbh9 = new RegExp(' tbh\\?', 'gi');
const reglastmeasuretbhslashafter = new RegExp(' tbh/', 'gi');

const reglastmeasurebrb1 = new RegExp(',brb ', 'gi');
const reglastmeasurebrbslashfirst = new RegExp('/brb ', 'gi');
const reglastmeasurebrb2 = new RegExp('!brb ', 'gi');
const reglastmeasurebrb3 = new RegExp('\\?brb ', 'gi');
const reglastmeasurebrb4 = new RegExp('\\.brb ', 'gi');
const reglastmeasurebrb5 = new RegExp(' brb ', 'gi');
const reglastmeasurebrb6 = new RegExp(' brb\\.', 'gi');
const reglastmeasurebrb7 = new RegExp(' brb,', 'gi');
const reglastmeasurebrb8 = new RegExp(' brb!', 'gi');
const reglastmeasurebrb9 = new RegExp(' brb\\?', 'gi');
const reglastmeasurebrbslashafter = new RegExp(' brb/', 'gi');

const reglastmeasuretbf1 = new RegExp(',tbf ', 'gi');
const reglastmeasuretbfslashfirst = new RegExp('/tbf ', 'gi');
const reglastmeasuretbf2 = new RegExp('!tbf ', 'gi');
const reglastmeasuretbf3 = new RegExp('\\?tbf ', 'gi');
const reglastmeasuretbf4 = new RegExp('\\.tbf ', 'gi');
const reglastmeasuretbf5 = new RegExp(' tbf ', 'gi');
const reglastmeasuretbf6 = new RegExp(' tbf\\.', 'gi');
const reglastmeasuretbf7 = new RegExp(' tbf,', 'gi');
const reglastmeasuretbf8 = new RegExp(' tbf!', 'gi');
const reglastmeasuretbf9 = new RegExp(' tbf\\?', 'gi');
const reglastmeasuretbfslashafter = new RegExp(' tbf/', 'gi');

const reglastmeasure401k = new RegExp('401000', 'gi');
const reglastmeasure1099k = new RegExp('1099000', 'gi');
const reglastmeasuregidoctor = new RegExp('gi doctor', 'gi');
const reglastmeasuregispecialist = new RegExp('gi specialist', 'gi');
const reglastmeasurefidelity_roth_ira = new RegExp('fidelity roth ira', 'gi');
const reglastmeasurensfw = new RegExp('nsfw', 'gi');
const reglastmeasureroflmao = new RegExp('roflmao', 'gi');
const reglastmeasureroflol = new RegExp('roflol', 'gi');
const reglastmeasurelmfao = new RegExp('lmfao', 'gi');
const reglastmeasurelmao = new RegExp('lmao', 'gi');

/*Url extraction regex*/
const expressionUrl = /(https?:\/\/)?[\w\-~]+(\.[\w\-~]+)+(\/[\w\-~@:%]*)*(#[\w\-]*)?(\?[^\s]*)?/gi;
const topDomains = [/\.com/, /\.org/, /\.net/, /\.edu/, /\.gov/, /\.biz/, /\.info/, /\.cc/, /\.cn/, /\.jp/, /\.nl/];
const regexUrl = new RegExp(expressionUrl);
const expressionEmail = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/gi;
const regexEmail = new RegExp(expressionEmail);
/*Token for recaptcha service. I use 2captcha*/
const Token = 'TOKEN';
/*Fetch headers for stack API*/
const headers = {
       'Content-Type' : 'application/json',
	   'Accept-Encoding' : 'gzip',
	   'Host' : 'api.stackexchange.com'
	   };
/*CSV writer configuration*/
const optionCsv = {
  headers: 'Item',
  quoted: false,
  delimiter: ''
};
/*Puppeteer configuration*/
const optionPPT = {
  headless: false,
  ignoreHTTPSErrors: true,
  args : [
  '--disable-extensions-except=' + cookieIgnorePath,
  '-load-extension=' + cookieIgnorePath,
  '--no-sandbox',
  '--disable-dev-shm-usage',
  '--ignore-certificate-errors'
  ]
};
/*Snoowrap configuration. Search for reddit app info*/
const r = new snoowrap({
  userAgent: 'APPNAME by USERNAME',
  clientId: 'APPID',
  clientSecret: 'APPSECRET',
  username: 'USERNAME',
  password: 'PASSWORD'
});
var requestprocessing = false;
var sessionID = 0;
var myF;
var myF2;
var proxyArray;
var portArray;

mongoose.Promise = global.Promise;
/*Puppeteer plugins*/
puppeteer.use(StealthPlugin());
puppeteer.use(RecaptchaPlugin({
			provider: { id: '2captcha', token: Token },
			visualFeedback: true
		}));
/*Mongodb connection*/
getConnection = async () => {
	mongoose.connection.on("open", err => {
  if (err) console.log("Error connecting to our mongo database");
  console.log("Connected to mongo database successfully");
});
  try {
    await mongoose.connect(
      'mongodb://172.17.0.2:27017',
      { useCreateIndex: true, useNewUrlParser: true, poolSize: 8, useUnifiedTopology: true, socketTimeoutMS: 3000000 }
    );
    console.log('Connection to DB Successful');
  } catch (err) {
    console.log('Connection to DB Failed');
  }
};

getConnection();

/*Mongodb collections*/	
const questionAnswerSchema = new mongoose.Schema({
    Item: String
});	
questionAnswerSchema.plugin(mongooseToCsv, optionCsv);	
const questionAnswer1 = mongoose.model('questionAnswer1', questionAnswerSchema);
const questionAnswer2 = mongoose.model('questionAnswer2', questionAnswerSchema);
const questionAnswer3 = mongoose.model('questionAnswer3', questionAnswerSchema);
const questionAnswer4 = mongoose.model('questionAnswer4', questionAnswerSchema);
const questionAnswer5 = mongoose.model('questionAnswer5', questionAnswerSchema);
const questionAnswer6 = mongoose.model('questionAnswer6', questionAnswerSchema);
const questionAnswer7 = mongoose.model('questionAnswer7', questionAnswerSchema);
const questionAnswer8 = mongoose.model('questionAnswer8', questionAnswerSchema);
const questionAnswer9 = mongoose.model('questionAnswer9', questionAnswerSchema);
const questionAnswer10 = mongoose.model('questionAnswer10', questionAnswerSchema);
const questionAnswer11 = mongoose.model('questionAnswer11', questionAnswerSchema);
const questionAnswer12 = mongoose.model('questionAnswer12', questionAnswerSchema);
const questionAnswer13 = mongoose.model('questionAnswer13', questionAnswerSchema);
const questionAnswer14 = mongoose.model('questionAnswer14', questionAnswerSchema);
const questionAnswer15 = mongoose.model('questionAnswer15', questionAnswerSchema);
const questionAnswer16 = mongoose.model('questionAnswer16', questionAnswerSchema);
const questionAnswer17 = mongoose.model('questionAnswer17', questionAnswerSchema);
const questionAnswer18 = mongoose.model('questionAnswer18', questionAnswerSchema);
const questionBase = mongoose.model('questionBase', questionAnswerSchema);
const questionMaster = mongoose.model('questionMaster', questionAnswerSchema);
const questionMasterBase = mongoose.model('questionMasterBase', questionAnswerSchema);

async function wait(ms) {
  return new Promise(resolve => {
    setTimeout(resolve, ms);
  });
}

/*Recaptcha handler method*/
async function recaptchaHandler(page) {
		try {
			await page.waitForSelector('.error-content-block', { timeout: 1400 });
			await page.solveRecaptchas();
			await Promise.all([
      page.waitForNavigation({ waitUntil: 'networkidle2' }),
      page.click('[type="submit"]')
]);
			console.log('we found a recaptcha!');
			await wait(2000);
		}
		catch (e) {
			console.log('no recaptcha found');
		}
		}

/*Url extractions methods*/
function urlRegexTest(textToCheck) {
let testUrl = false;
let match = '';
let domainMatch	= '';
let urlLength = 0;
												
while ((match = regexUrl.exec(textToCheck)) != null) {
testUrl = false;	
for	(var i=0; i < topDomains.length; i++) {
domainMatch	= match[0].match(topDomains[i]);
if	(domainMatch) {
testUrl =	true;
}
}
if ((match.index != 0) && (textToCheck[match.index - 1] == '@')) {
testUrl = false;
}
if (testUrl) {
return	testUrl;
}
}
return	testUrl;
}

function url_extract(textToCheck) {
let splitText = [];
let abort = true;
let match = '';
let domainMatch	= '';
let urlLength = 0;
												
while ((match = regexUrl.exec(textToCheck)) != null) {
abort = true;	
for	(var i=0; i < topDomains.length; i++) {
domainMatch	= match[0].match(topDomains[i]);
if	(domainMatch) {
abort =	false;
urlLength =	domainMatch[0].length +	domainMatch.index;	
if (match[0].length	> urlLength) {
match[0] = match[0].substr(0, urlLength);
break;		
}
}
}
if ((match.index != 0) && (textToCheck[match.index - 1] == '@')) {
abort = true;
}
if (!abort) {
let	cleanedLink	= textToCheck.substr(match.index, (match[0].length));
cleanedLink	= cleanedLink.replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
splitText.push(cleanedLink);															
}															
}
return	splitText;
}

function clearUrl(array){
if (array.length){
for (var i=0; i < array.length ; i++) {
	array[i] = array[i].replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
if (array[i].includes('twitch') || array[i].includes('img') || array[i].includes('vimeo') || array[i].includes('dailymotion') || array[i].includes('yahoo') || array[i].includes('quora') || array[i].includes('answerscom') || array[i].includes('fluther') || array[i].includes('google') || array[i].includes('stack') || array[i].includes('facebook') || array[i].includes('reddit') || array[i].includes('Twitch') || array[i].includes('Vimeo') || array[i].includes('Dailymotion') || array[i].includes('Yahoo') || array[i].includes('Quora') || array[i].includes('Answerscom') || array[i].includes('Fluther') || array[i].includes('Google') || array[i].includes('Stack') || array[i].includes('Facebook') || array[i].includes('Reddit') || array[i].includes('Imgbb') || array[i].includes('Imgur') || array[i].includes('Postimages') || array[i].includes('Pasteboard') || array[i].includes('Imageupload') || array[i].includes('Photobox') || array[i].includes('Linkpicture') || array[i].includes('Linguee') || array[i].includes('Bbcode0') || array[i].includes('Kek.gg') || array[i].includes('Imageshack') || array[i].includes('Imgbox') || array[i].includes('Picpasteplus') || array[i].includes('Unsee') || array[i].includes('Imgpile') || array[i].includes('imgbb') || array[i].includes('imgur') || array[i].includes('postimages') || array[i].includes('pasteboard') || array[i].includes('imageupload') || array[i].includes('photobox') || array[i].includes('linkpicture') || array[i].includes('linguee') || array[i].includes('bbcode0') || array[i].includes('kek.gg') || array[i].includes('imageshack') || array[i].includes('imgbox') || array[i].includes('picpasteplus') || array[i].includes('unsee') || array[i].includes('imgpile')) {
var trash = array.splice(i,1); 
}
}
if (array.length){
return array;
} else {
return 'null';
}
} else {
return 'null';
}
}

function checkAccepted(array){
	if (array.length) {
for (var i=0; i < array.length ; i++) {
if (array[i].includes('twitch') || array[i].includes('img') || array[i].includes('vimeo') || array[i].includes('dailymotion') || array[i].includes('yahoo') || array[i].includes('quora') || array[i].includes('answerscom') || array[i].includes('fluther') || array[i].includes('google') || array[i].includes('stack') || array[i].includes('facebook') || array[i].includes('reddit') || array[i].includes('Twitch') || array[i].includes('Vimeo') || array[i].includes('Dailymotion') || array[i].includes('Yahoo') || array[i].includes('Quora') || array[i].includes('Answerscom') || array[i].includes('Fluther') || array[i].includes('Google') || array[i].includes('Stack') || array[i].includes('Facebook') || array[i].includes('Reddit') || array[i].includes('Imgbb') || array[i].includes('Imgur') || array[i].includes('Postimages') || array[i].includes('Pasteboard') || array[i].includes('Imageupload') || array[i].includes('Photobox') || array[i].includes('Linkpicture') || array[i].includes('Linguee') || array[i].includes('Bbcode0') || array[i].includes('Kek.gg') || array[i].includes('Imageshack') || array[i].includes('Imgbox') || array[i].includes('Picpasteplus') || array[i].includes('Unsee') || array[i].includes('Imgpile') || array[i].includes('imgbb') || array[i].includes('imgur') || array[i].includes('postimages') || array[i].includes('pasteboard') || array[i].includes('imageupload') || array[i].includes('photobox') || array[i].includes('linkpicture') || array[i].includes('linguee') || array[i].includes('bbcode0') || array[i].includes('kek.gg') || array[i].includes('imageshack') || array[i].includes('imgbox') || array[i].includes('picpasteplus') || array[i].includes('unsee') || array[i].includes('imgpile')) {
return true;
}
}
} else {
return false;
	}
return false;
}

function pushCheck(array, bigarray){
	try {
if (array.length) {
for (var i=0; i < array.length ; i++) {
let clean = false;
if (bigarray.length) {
for (var k=0; k < bigarray.length ; k++) {
if (array[i] !== bigarray[k]) {
clean = true;
} else { 
clean = false;
break;
}
}
} else { 
clean = true;
}
if (clean) {
bigarray.push(array[i]);
}
}
}
return true;
} catch(e) {
return false;
}
}

/*Collection to csv methods*/
async function clearWrite() {
try {
	let modelCount1 = await questionAnswer1.countDocuments({});
	let modelCount2 = await questionAnswer2.countDocuments({});
	let modelCount3 = await questionAnswer3.countDocuments({});
	let modelCount4 = await questionAnswer4.countDocuments({});
	let modelCount5 = await questionAnswer5.countDocuments({});
	let modelCount6 = await questionAnswer6.countDocuments({});
	let modelCount7 = await questionAnswer7.countDocuments({});
	let modelCount8 = await questionAnswer8.countDocuments({});
	let modelCount9 = await questionAnswer9.countDocuments({});
	let modelCount10 = await questionAnswer10.countDocuments({});
	let modelCount11 = await questionAnswer11.countDocuments({});
	let modelCount12 = await questionAnswer12.countDocuments({});
	let modelCount13 = await questionAnswer13.countDocuments({});
	let modelCount14 = await questionAnswer14.countDocuments({});
	let modelCount15 = await questionAnswer15.countDocuments({});
	let modelCount16 = await questionAnswer16.countDocuments({});
	let modelCount17 = await questionAnswer17.countDocuments({});
	let modelCount18 = await questionAnswer18.countDocuments({});
	let modelCountBase = await questionBase.countDocuments({});
       if (modelCount1 > 0) { 
await questionAnswer1.find({})
.stream()
  .pipe(questionAnswer1.csvTransformStream())
  .pipe(fs.createWriteStream('/data/english.csv'));
  } 
	   if (modelCount2 > 0) { 
await questionAnswer2.find({})
.stream()
  .pipe(questionAnswer2.csvTransformStream())
  .pipe(fs.createWriteStream('/data/medicalsciences.csv'));
  } 
	   if (modelCount3 > 0) { 
await questionAnswer3.find({})
.stream()
  .pipe(questionAnswer3.csvTransformStream())
  .pipe(fs.createWriteStream('/data/travel.csv'));
  }
	  if (modelCount4 > 0) { 
await questionAnswer4.find({})
.stream()
  .pipe(questionAnswer4.csvTransformStream())
  .pipe(fs.createWriteStream('/data/cooking.csv'));
  } 
	  if (modelCount5 > 0) { 
await questionAnswer5.find({})
.stream()
  .pipe(questionAnswer5.csvTransformStream())
  .pipe(fs.createWriteStream('/data/gaming.csv'));
  } 
	  if (modelCount6 > 0) { 
await questionAnswer6.find({})
.stream()
  .pipe(questionAnswer6.csvTransformStream())
  .pipe(fs.createWriteStream('/data/movies.csv'));
  }  
	   if (modelCount7 > 0) { 
await questionAnswer7.find({})
.stream()
  .pipe(questionAnswer7.csvTransformStream())
  .pipe(fs.createWriteStream('/data/music.csv'));
  }
	  if (modelCount8 > 0) { 
await questionAnswer8.find({})
.stream()
  .pipe(questionAnswer8.csvTransformStream())
  .pipe(fs.createWriteStream('/data/scifi.csv'));
  }
     if (modelCount9 > 0) { 
await questionAnswer9.find({})
.stream()
  .pipe(questionAnswer9.csvTransformStream())
  .pipe(fs.createWriteStream('/data/pets.csv'));
  }
		 if (modelCount10 > 0) { 
await questionAnswer10.find({})
.stream()
  .pipe(questionAnswer10.csvTransformStream())
  .pipe(fs.createWriteStream('/data/technology.csv'));
  }
		if (modelCount11 > 0) { 
await questionAnswer11.find({})
.stream()
  .pipe(questionAnswer11.csvTransformStream())
  .pipe(fs.createWriteStream('/data/ask.csv'));
  }
	   if (modelCount12 > 0) { 
await questionAnswer12.find({})
.stream()
  .pipe(questionAnswer12.csvTransformStream())
  .pipe(fs.createWriteStream('/data/askdark.csv'));
  }
	  if (modelCount13 > 0) { 
await questionAnswer13.find({})
.stream()
  .pipe(questionAnswer13.csvTransformStream())
  .pipe(fs.createWriteStream('/data/literature.csv'));
  }
	 if (modelCount14 > 0) { 
await questionAnswer14.find({})
.stream()
  .pipe(questionAnswer14.csvTransformStream())
  .pipe(fs.createWriteStream('/data/history.csv'));
  }
	if (modelCount15 > 0) { 
await questionAnswer15.find({})
.stream()
  .pipe(questionAnswer15.csvTransformStream())
  .pipe(fs.createWriteStream('/data/sports.csv'));
  }
   if (modelCount16 > 0) { 
await questionAnswer16.find({})
.stream()
  .pipe(questionAnswer16.csvTransformStream())
  .pipe(fs.createWriteStream('/data/finance.csv'));
  }
  if (modelCount17 > 0) { 
await questionAnswer17.find({})
.stream()
  .pipe(questionAnswer17.csvTransformStream())
  .pipe(fs.createWriteStream('/data/philosophy.csv'));
  }
 if (modelCount18 > 0) { 
await questionAnswer18.find({})
.stream()
  .pipe(questionAnswer18.csvTransformStream())
  .pipe(fs.createWriteStream('/data/mythology.csv'));
  }
  if (modelCountBase > 0) {
  await questionBase.find({})
.stream()
  .pipe(questionBase.csvTransformStream())
  .pipe(fs.createWriteStream('/data/masterbase.csv'));
  }
  console.log('clearwrite success');
return 'clearWrite success!';
} catch(e) {console.log('clearwrite error ' + e.message); return 'clearWrite failed';}
}

/*Cleaning text methods*/
function all_replace_reddit2(str){
return str.replace(regTags, ' ').replace(regTagsReddit2, ' ').replace('redditor', ' ').replace('redditors', 'people').replace('Redditor', ' ').replace('Redditors', 'people').replace('of reddit', ' ').replace('of Reddit', ' ').replace(regApex, ' ').replace(regApex2, ' ').replace(reg1, ' ').replace(reg2, ' ').replace(reg31, ' ').replace(reg32, ' ').replace(reg4, ' ').replace(regMore5, '>').replace(regLess6, '<').replace(regLessThan7, ' less than ').replace(regMoreThan8, ' more than ').replace(regPlus9, ' plus ').replace(regUnicode, ' ').replace(regAnd10, ' and ').replace(regAnd11, ' and ').replace(reglastReddit2, ' ').replace(reglastDot, '.').replace(reglastQuest, '?').replace(reglastExclam, '!').replace(reglastVirg, ',').replace(reglastmeasureAM2, 'i am ').replace(reglastmeasureAM3, 'i am ').replace(reglastmeasureAM, 'i am ').replace(regexEmail, function (x) {
let question = false;
if (x[x.length - 1] == '?') {
question = true;
}
if (question) {
return ' email ?';
} else {
return ' email ';
}
}).replace(regexUrl, function (x) {
let abort =	true;
let question = false;
if (x[x.length - 1] == '?') {
x = x.substr(0, x.length - 1);
question = true;
}
for	(var i=0; i < topDomains.length; i++) {
let domainMatch	= x.match(topDomains[i]);
if	(domainMatch) {
abort =	false;
let urlLength =	domainMatch[0].length +	domainMatch.index;	
if (x.length > urlLength) {
x = x.substr(0, urlLength);
break;		
}
}
}
if (!abort) {
if (x.includes('twitch') || x.includes('img') || x.includes('vimeo') || x.includes('dailymotion') || x.includes('yahoo') || x.includes('quora') || x.includes('answerscom') || x.includes('fluther') || x.includes('google') || x.includes('stack') || x.includes('facebook') || x.includes('reddit') || x.includes('Twitch') || x.includes('Vimeo') || x.includes('Dailymotion') || x.includes('Yahoo') || x.includes('Quora') || x.includes('Answerscom') || x.includes('Fluther') || x.includes('Google') || x.includes('Stack') || x.includes('Facebook') || x.includes('Reddit') || x.includes('Imgbb') || x.includes('Imgur') || x.includes('Postimages') || x.includes('Pasteboard') || x.includes('Imageupload') || x.includes('Photobox') || x.includes('Linkpicture') || x.includes('Linguee') || x.includes('Bbcode0') || x.includes('Kek.gg') || x.includes('Imageshack') || x.includes('Imgbox') || x.includes('Picpasteplus') || x.includes('Unsee') || x.includes('Imgpile') || x.includes('imgbb') || x.includes('imgur') || x.includes('postimages') || x.includes('pasteboard') || x.includes('imageupload') || x.includes('photobox') || x.includes('linkpicture') || x.includes('linguee') || x.includes('bbcode0') || x.includes('kek.gg') || x.includes('imageshack') || x.includes('imgbox') || x.includes('picpasteplus') || x.includes('unsee') || x.includes('imgpile')) {
if (question) {
return ' web ?';
} else {
return ' web ';
}
} else {
let cleanedLink	= x.replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
if (question) {
return ' ' + cleanedLink + ' ?';
} else {
return ' ' + cleanedLink + ' ';
}
}
} else {
return x.replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
}
}).replace(reg12, ' ');
}

function all_replace(str){
return str.replace(regTags, ' ').replace(regTagsReddit, ' ').replace(regTagsReddit2, ' ').replace(regApex, ' ').replace(regApex2, ' ').replace(reg1, ' ').replace(reg2, ' ').replace(reg3, '').replace(reg31, ' ').replace(reg32, ' ').replace(reg4, ' ').replace(regMore5, '>').replace(regLess6, '<').replace(regLessThan7, ' less than ').replace(regMoreThan8, ' more than ').replace(regPlus9, ' plus ').replace(regUnicode, ' ').replace(regAnd10, ' and ').replace(regAnd11, ' and ').replace(reglast, ' ').replace(reglastDot, '.').replace(reglastQuest, '?').replace(reglastExclam, '!').replace(reglastVirg, ',').replace(reglastmeasureAM2, 'i am ').replace(reglastmeasureAM3, 'i am ').replace(reglastmeasureAM, 'i am ').replace(regexEmail, function (x) {
let question = false;
if (x[x.length - 1] == '?') {
question = true;
}
if (question) {
return ' email ?';
} else {
return ' email ';
}
}).replace(regexUrl, function (x) {
let abort =	true;
let question = false;
if (x[x.length - 1] == '?') {
x = x.substr(0, x.length - 1);
question = true;
}
for	(var i=0; i < topDomains.length; i++) {
let domainMatch	= x.match(topDomains[i]);
if	(domainMatch) {
abort =	false;
let urlLength =	domainMatch[0].length +	domainMatch.index;	
if (x.length > urlLength) {
x = x.substr(0, urlLength);
break;		
}
}
}
if (!abort) {
if (x.includes('twitch') || x.includes('img') || x.includes('vimeo') || x.includes('dailymotion') || x.includes('yahoo') || x.includes('quora') || x.includes('answerscom') || x.includes('fluther') || x.includes('google') || x.includes('stack') || x.includes('facebook') || x.includes('reddit') || x.includes('Twitch') || x.includes('Vimeo') || x.includes('Dailymotion') || x.includes('Yahoo') || x.includes('Quora') || x.includes('Answerscom') || x.includes('Fluther') || x.includes('Google') || x.includes('Stack') || x.includes('Facebook') || x.includes('Reddit') || x.includes('Imgbb') || x.includes('Imgur') || x.includes('Postimages') || x.includes('Pasteboard') || x.includes('Imageupload') || x.includes('Photobox') || x.includes('Linkpicture') || x.includes('Linguee') || x.includes('Bbcode0') || x.includes('Kek.gg') || x.includes('Imageshack') || x.includes('Imgbox') || x.includes('Picpasteplus') || x.includes('Unsee') || x.includes('Imgpile') || x.includes('imgbb') || x.includes('imgur') || x.includes('postimages') || x.includes('pasteboard') || x.includes('imageupload') || x.includes('photobox') || x.includes('linkpicture') || x.includes('linguee') || x.includes('bbcode0') || x.includes('kek.gg') || x.includes('imageshack') || x.includes('imgbox') || x.includes('picpasteplus') || x.includes('unsee') || x.includes('imgpile')) {
if (question) {
return ' web ?';
} else {
return ' web ';
}
} else {
let cleanedLink	= x.replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
if (question) {
return ' ' + cleanedLink + ' ?';
} else {
return ' ' + cleanedLink + ' ';
}
}
} else {
return x.replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
}
}).replace(reg12, ' ');
}

function all_replace_reddit(str){
return str.replace(regSquare, '').replace(regSquare2, '');
}

function all_replace_questions_reddit(str){
return str.replace(regTags, ' ').replace(regTagsReddit, ' ').replace(regTagsReddit2, ' ').replace('redditor', ' ').replace('redditors', 'people').replace('Redditor', ' ').replace('Redditors', 'people').replace('of reddit', ' ').replace('of Reddit', ' ').replace(regApex, ' ').replace(regApex2, ' ').replace(reg1, ' ').replace(reg2, ' ').replace(reg3, '').replace(reg31, ' ').replace(reg32, ' ').replace(reg4, ' ').replace(regMore5, '>').replace(regLess6, '<').replace(regLessThan7, ' less than ').replace(regMoreThan8, ' more than ').replace(regPlus9, ' plus ').replace(regUnicode, ' ').replace(regAnd10, ' and ').replace(regAnd11, ' and ').replace(reglast, ' ').replace(reglastDot, '.').replace(reglastQuest, '?').replace(reglastExclam, '!').replace(reglastVirg, ',').replace(reglastmeasureAM2, 'i am ').replace(reglastmeasureAM3, 'i am ').replace(reglastmeasureAM, 'i am ').replace(regexEmail, function (x) {
let question = false;
if (x[x.length - 1] == '?') {
question = true;
}
if (question) {
return ' email ?';
} else {
return ' email ';
}
}).replace(regexUrl, function (x) {
let abort =	true;
let question = false;
if (x[x.length - 1] == '?') {
x = x.substr(0, x.length - 1);
question = true;
}
for	(var i=0; i < topDomains.length; i++) {
let domainMatch	= x.match(topDomains[i]);
if	(domainMatch) {
abort =	false;
let urlLength =	domainMatch[0].length +	domainMatch.index;	
if (x.length > urlLength) {
x = x.substr(0, urlLength);
break;		
}
}
}
if (!abort) {
if (x.includes('twitch') || x.includes('img') || x.includes('vimeo') || x.includes('dailymotion') || x.includes('yahoo') || x.includes('quora') || x.includes('answerscom') || x.includes('fluther') || x.includes('google') || x.includes('stack') || x.includes('facebook') || x.includes('reddit') || x.includes('Twitch') || x.includes('Vimeo') || x.includes('Dailymotion') || x.includes('Yahoo') || x.includes('Quora') || x.includes('Answerscom') || x.includes('Fluther') || x.includes('Google') || x.includes('Stack') || x.includes('Facebook') || x.includes('Reddit') || x.includes('Imgbb') || x.includes('Imgur') || x.includes('Postimages') || x.includes('Pasteboard') || x.includes('Imageupload') || x.includes('Photobox') || x.includes('Linkpicture') || x.includes('Linguee') || x.includes('Bbcode0') || x.includes('Kek.gg') || x.includes('Imageshack') || x.includes('Imgbox') || x.includes('Picpasteplus') || x.includes('Unsee') || x.includes('Imgpile') || x.includes('imgbb') || x.includes('imgur') || x.includes('postimages') || x.includes('pasteboard') || x.includes('imageupload') || x.includes('photobox') || x.includes('linkpicture') || x.includes('linguee') || x.includes('bbcode0') || x.includes('kek.gg') || x.includes('imageshack') || x.includes('imgbox') || x.includes('picpasteplus') || x.includes('unsee') || x.includes('imgpile')) {
if (question) {
return ' web ?';
} else {
return ' web ';
}
} else {
let cleanedLink	= x.replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
if (question) {
return ' ' + cleanedLink + ' ?';
} else {
return ' ' + cleanedLink + ' ';
}
}
} else {
return x.replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
}
}).replace(reg12, ' ');
}

function all_replace_fluther(str){
return str.replace(regTags, ' ').replace(regTagsReddit, ' ').replace(regTagsReddit2, ' ').replace('Jellies', 'people').replace('jellies', 'people').replace('flutherers', 'people').replace('flutherer', ' ').replace('Flutherers', 'people').replace('Flutherer', ' ').replace('of fluther', ' ').replace('of Fluther', ' ').replace(regApex, ' ').replace(regApex2, ' ').replace(reg1, ' ').replace(reg2, ' ').replace(reg3, '').replace(reg31, ' ').replace(reg32, ' ').replace(reg4, ' ').replace(regMore5, '>').replace(regLess6, '<').replace(regLessThan7, ' less than ').replace(regMoreThan8, ' more than ').replace(regPlus9, ' plus ').replace(regUnicode, ' ').replace(regAnd10, ' and ').replace(regAnd11, ' and ').replace(reglast, ' ').replace(reglastDot, '.').replace(reglastQuest, '?').replace(reglastExclam, '!').replace(reglastVirg, ',').replace(reglastmeasureAM2, 'i am ').replace(reglastmeasureAM3, 'i am ').replace(reglastmeasureAM, 'i am ').replace(regexEmail, function (x) {
let question = false;
if (x[x.length - 1] == '?') {
question = true;
}
if (question) {
return ' email ?';
} else {
return ' email ';
}
}).replace(regexUrl, function (x) {
let abort =	true;
let question = false;
if (x[x.length - 1] == '?') {
x = x.substr(0, x.length - 1);
question = true;
}
for	(var i=0; i < topDomains.length; i++) {
let domainMatch	= x.match(topDomains[i]);
if	(domainMatch) {
abort =	false;
let urlLength =	domainMatch[0].length +	domainMatch.index;	
if (x.length > urlLength) {
x = x.substr(0, urlLength);
break;		
}
}
}
if (!abort) {
if (x.includes('twitch') || x.includes('img') || x.includes('vimeo') || x.includes('dailymotion') || x.includes('yahoo') || x.includes('quora') || x.includes('answerscom') || x.includes('fluther') || x.includes('google') || x.includes('stack') || x.includes('facebook') || x.includes('reddit') || x.includes('Twitch') || x.includes('Vimeo') || x.includes('Dailymotion') || x.includes('Yahoo') || x.includes('Quora') || x.includes('Answerscom') || x.includes('Fluther') || x.includes('Google') || x.includes('Stack') || x.includes('Facebook') || x.includes('Reddit') || x.includes('Imgbb') || x.includes('Imgur') || x.includes('Postimages') || x.includes('Pasteboard') || x.includes('Imageupload') || x.includes('Photobox') || x.includes('Linkpicture') || x.includes('Linguee') || x.includes('Bbcode0') || x.includes('Kek.gg') || x.includes('Imageshack') || x.includes('Imgbox') || x.includes('Picpasteplus') || x.includes('Unsee') || x.includes('Imgpile') || x.includes('imgbb') || x.includes('imgur') || x.includes('postimages') || x.includes('pasteboard') || x.includes('imageupload') || x.includes('photobox') || x.includes('linkpicture') || x.includes('linguee') || x.includes('bbcode0') || x.includes('kek.gg') || x.includes('imageshack') || x.includes('imgbox') || x.includes('picpasteplus') || x.includes('unsee') || x.includes('imgpile')) {
if (question) {
return ' web ?';
} else {
return ' web ';
}
} else {
let cleanedLink	= x.replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
if (question) {
return ' ' + cleanedLink + ' ?';
} else {
return ' ' + cleanedLink + ' ';
}
}
} else {
return x.replace('relnoreferrer','').replace('srchttps','').replace('srchttp','').replace('hrefhttps','').replace('hrefhttp','').replace('https','').replace('http','').replace(/^https?:\/\//,'').replace('www.','');
}
}).replace(reg12, ' ');
}

async function replacefinal(str){
str = replacefinalpart1(str);
str = replacefinalpart2(str);
str = replacefinalpart3(str);
str = replacefinalpart4(str);
str = replacefinalpart5(str);
str = replacefinalpart6(str);
str = replacefinalpart7(str);
str = replacefinalpart8(str);
str = replacefinalpart9(str);
str = replacefinalpart10(str);
str = replacefinalpart11(str);
str = replacefinalpart12(str);
str = replacefinalpart13(str);
str = replacefinalpart14(str);
str = replacefinalpart15(str);
str = replacefinalpart16(str);
str = replacefinalpart17(str);
str = replacefinalpart18(str);
str = replacefinalpart19(str);
str = replacefinalpart20(str);
str = replacefinalpart21(str);
str = replacefinalpart22(str);
str = replacefinalpart21(str);
str = replacefinalpart22(str);
str = replacefinalpart23(str);
str = replacefinalpart24(str);
str = replacefinalpart25(str);
str = replacefinalpart26(str);
str = replacefinalpart27(str);
str = replacefinalpart28(str);
str = replacefinalpart29(str);
str = replacefinalpart30(str);
str = replacefinalpart31(str);
str = replacefinalpart32(str);
str = replacefinalpart33(str);
str = replacefinalpart34(str);
str = replacefinalpart35(str);
str = replacefinalpart36(str);
str = replacefinalpart37(str);
str = replacefinalpart38(str);
str = replacefinalpart39(str);
str = replacefinalpart40(str);
str = replacefinalpart41(str);
str = replacefinalpart42(str);
str = replacefinalpart43(str);
await wait(800);
return str;
}

async function replacefinaltech(str){
str = replacefinalpart1(str);
str = replacefinalpart2(str);
str = replacefinalpart3(str);
str = replacefinalpart4(str);
str = replacefinalpart5(str);
str = replacefinalpart6(str);
str = replacefinalpart7(str);
str = replacefinalpart8(str);
str = replacefinalpart9(str);
str = replacefinalpart10(str);
str = replacefinalpart11(str);
str = replacefinalpart12(str);
str = replacefinalpart13(str);
str = replacefinalpart14(str);
str = replacefinalpart15(str);
str = replacefinalpart16(str);
str = replacefinalpart17(str);
str = replacefinalparttech(str);
str = replacefinalpart19(str);
str = replacefinalpart20(str);
str = replacefinalpart21(str);
str = replacefinalpart22(str);
str = replacefinalpart21(str);
str = replacefinalpart22(str);
str = replacefinalpart23(str);
str = replacefinalpart24(str);
str = replacefinalpart25(str);
str = replacefinalpart26(str);
str = replacefinalpart27(str);
str = replacefinalpart28(str);
str = replacefinalpart29(str);
str = replacefinalpart30(str);
str = replacefinalpart31(str);
str = replacefinalpart32(str);
str = replacefinalpart33(str);
str = replacefinalpart34(str);
str = replacefinalpart35(str);
str = replacefinalpart36(str);
str = replacefinalpart37(str);
str = replacefinalpart38(str);
str = replacefinalpart39(str);
str = replacefinalpart40(str);
str = replacefinalpart41(str);
str = replacefinalpart42(str);
str = replacefinalpart43(str);
await wait(800);
return str;
}

function replacefinalparttech(str){
return str.replace(reglastmeasurethousand1, '1000 ').replace(reglastmeasurethousand3, '3000 ').replace(reglastmeasurethousand5, '5000 ').replace(reglastmeasurethousand7, '7000 ').replace(reglastmeasurethousand9, '9000 ').replace(reglastmeasurethousand0, '0000 ').replace(reglastmeasurethousand1point, '1000 ').replace(reglastmeasurethousand3point, '3000 ').replace(reglastmeasurethousand5point, '5000 ').replace(reglastmeasurethousand7point, '7000 ').replace(reglastmeasurethousand9point, '9000 ').replace(reglastmeasurethousand0point, '0000 ').replace(reglastmeasurethousand1virgola, '1000 ').replace(reglastmeasurethousand3virgola, '3000 ').replace(reglastmeasurethousand5virgola, '5000 ').replace(reglastmeasurethousand7virgola, '7000 ').replace(reglastmeasurethousand9virgola, '9000 ').replace(reglastmeasurethousand0virgola, '0000 ').replace(reglastmeasurethousand1slash, '1000 /').replace(reglastmeasurethousand3slash, '3000 /').replace(reglastmeasurethousand5slash, '5000 /').replace(reglastmeasurethousand7slash, '7000 /').replace(reglastmeasurethousand9slash, '9000 /').replace(reglastmeasurethousand0slash, '0000 /').replace(reglastmeasurethousand1question, '1000 ').replace(reglastmeasurethousand3question, '3000 ').replace(reglastmeasurethousand5question, '5000 ').replace(reglastmeasurethousand7question, '7000 ').replace(reglastmeasurethousand9question, '9000 ').replace(reglastmeasurethousand0question, '0000 ').replace(reglastmeasurethousand1exclam, '1000 ').replace(reglastmeasurethousand3exclam, '3000 ').replace(reglastmeasurethousand5exclam, '5000 ').replace(reglastmeasurethousand7exclam, '7000 ').replace(reglastmeasurethousand9exclam, '9000 ').replace(reglastmeasurethousand0exclam, '0000 ');
}

function replacefinalpart1(str){
return str.replace(reglastmeasureCentimeters1, '1centimeters ').replace(reglastmeasureCentimeters2, '2centimeters ').replace(reglastmeasureCentimeters3, '3centimeters ').replace(reglastmeasureCentimeters4, '4centimeters ').replace(reglastmeasureCentimeters5, '5centimeters ').replace(reglastmeasureCentimeters6, '6centimeters ').replace(reglastmeasureCentimeters7, '7centimeters ').replace(reglastmeasureCentimeters8, '8centimeters ').replace(reglastmeasureCentimeters9, '9centimeters ').replace(reglastmeasureCentimeters0, '0centimeters ').replace(reglastmeasureCentimeters1point, '1centimeters ').replace(reglastmeasureCentimeters2point, '2centimeters ').replace(reglastmeasureCentimeters3point, '3centimeters ').replace(reglastmeasureCentimeters4point, '4centimeters ').replace(reglastmeasureCentimeters5point, '5centimeters ').replace(reglastmeasureCentimeters6point, '6centimeters ').replace(reglastmeasureCentimeters7point, '7centimeters ').replace(reglastmeasureCentimeters8point, '8centimeters ').replace(reglastmeasureCentimeters9point, '9centimeters ').replace(reglastmeasureCentimeters0point, '0centimeters ').replace(reglastmeasureCentimeters1virgola, '1centimeters ').replace(reglastmeasureCentimeters2virgola, '2centimeters ').replace(reglastmeasureCentimeters3virgola, '3centimeters ').replace(reglastmeasureCentimeters4virgola, '4centimeters ').replace(reglastmeasureCentimeters5virgola, '5centimeters ').replace(reglastmeasureCentimeters6virgola, '6centimeters ').replace(reglastmeasureCentimeters7virgola, '7centimeters ').replace(reglastmeasureCentimeters8virgola, '8centimeters ').replace(reglastmeasureCentimeters9virgola, '9centimeters ').replace(reglastmeasureCentimeters0virgola, '0centimeters ').replace(reglastmeasureCentimeters1slash, '1centimeters /').replace(reglastmeasureCentimeters2slash, '2centimeters /').replace(reglastmeasureCentimeters3slash, '3centimeters /').replace(reglastmeasureCentimeters4slash, '4centimeters /').replace(reglastmeasureCentimeters5slash, '5centimeters /').replace(reglastmeasureCentimeters6slash, '6centimeters /').replace(reglastmeasureCentimeters7slash, '7centimeters /').replace(reglastmeasureCentimeters8slash, '8centimeters /').replace(reglastmeasureCentimeters9slash, '9centimeters /').replace(reglastmeasureCentimeters0slash, '0centimeters /').replace(reglastmeasureCentimeters1question, '1centimeters ').replace(reglastmeasureCentimeters2question, '2centimeters ').replace(reglastmeasureCentimeters3question, '3centimeters ').replace(reglastmeasureCentimeters4question, '4centimeters ').replace(reglastmeasureCentimeters5question, '5centimeters ').replace(reglastmeasureCentimeters6question, '6centimeters ').replace(reglastmeasureCentimeters7question, '7centimeters ').replace(reglastmeasureCentimeters8question, '8centimeters ').replace(reglastmeasureCentimeters9question, '9centimeters ').replace(reglastmeasureCentimeters0question, '0centimeters ').replace(reglastmeasureCentimeters1exclam, '1centimeters ').replace(reglastmeasureCentimeters2exclam, '2centimeters ').replace(reglastmeasureCentimeters3exclam, '3centimeters ').replace(reglastmeasureCentimeters4exclam, '4centimeters ').replace(reglastmeasureCentimeters5exclam, '5centimeters ').replace(reglastmeasureCentimeters6exclam, '6centimeters ').replace(reglastmeasureCentimeters7exclam, '7centimeters ').replace(reglastmeasureCentimeters8exclam, '8centimeters ').replace(reglastmeasureCentimeters9exclam, '9centimeters ').replace(reglastmeasureCentimeters0exclam, '0centimeters ').replace(reglastmeasureCentimeters1space, '1centimeters ').replace(reglastmeasureCentimeters2space, '2centimeters ').replace(reglastmeasureCentimeters3space, '3centimeters ').replace(reglastmeasureCentimeters4space, '4centimeters ').replace(reglastmeasureCentimeters5space, '5centimeters ').replace(reglastmeasureCentimeters6space, '6centimeters ').replace(reglastmeasureCentimeters7space, '7centimeters ').replace(reglastmeasureCentimeters8space, '8centimeters ').replace(reglastmeasureCentimeters9space, '9centimeters ').replace(reglastmeasureCentimeters0space, '0centimeters ').replace(reglastmeasureCentimeters1exclamspace, '1centimeters ').replace(reglastmeasureCentimeters2exclamspace, '2centimeters ').replace(reglastmeasureCentimeters3exclamspace, '3centimeters ').replace(reglastmeasureCentimeters4exclamspace, '4centimeters ').replace(reglastmeasureCentimeters5exclamspace, '5centimeters ').replace(reglastmeasureCentimeters6exclamspace, '6centimeters ').replace(reglastmeasureCentimeters7exclamspace, '7centimeters ').replace(reglastmeasureCentimeters8exclamspace, '8centimeters ').replace(reglastmeasureCentimeters9exclamspace, '9centimeters ').replace(reglastmeasureCentimeters0exclamspace, '0centimeters ').replace(reglastmeasureCentimeters1slashspace, '1centimeters /').replace(reglastmeasureCentimeters2slashspace, '2centimeters /').replace(reglastmeasureCentimeters3slashspace, '3centimeters /').replace(reglastmeasureCentimeters4slashspace, '4centimeters /').replace(reglastmeasureCentimeters5slashspace, '5centimeters /').replace(reglastmeasureCentimeters6slashspace, '6centimeters /').replace(reglastmeasureCentimeters7slashspace, '7centimeters /').replace(reglastmeasureCentimeters8slashspace, '8centimeters /').replace(reglastmeasureCentimeters9slashspace, '9centimeters /').replace(reglastmeasureCentimeters0slashspace, '0centimeters /').replace(reglastmeasureCentimeters1virgolaspace, '1centimeters ').replace(reglastmeasureCentimeters2virgolaspace, '2centimeters ').replace(reglastmeasureCentimeters3virgolaspace, '3centimeters ').replace(reglastmeasureCentimeters4virgolaspace, '4centimeters ').replace(reglastmeasureCentimeters5virgolaspace, '5centimeters ').replace(reglastmeasureCentimeters6virgolaspace, '6centimeters ').replace(reglastmeasureCentimeters7virgolaspace, '7centimeters ').replace(reglastmeasureCentimeters8virgolaspace, '8centimeters ').replace(reglastmeasureCentimeters9virgolaspace, '9centimeters ').replace(reglastmeasureCentimeters0virgolaspace, '0centimeters ').replace(reglastmeasureCentimeters1pointspace, '1centimeters ').replace(reglastmeasureCentimeters2pointspace, '2centimeters ').replace(reglastmeasureCentimeters3pointspace, '3centimeters ').replace(reglastmeasureCentimeters4pointspace, '4centimeters ').replace(reglastmeasureCentimeters5pointspace, '5centimeters ').replace(reglastmeasureCentimeters6pointspace, '6centimeters ').replace(reglastmeasureCentimeters7pointspace, '7centimeters ').replace(reglastmeasureCentimeters8pointspace, '8centimeters ').replace(reglastmeasureCentimeters9pointspace, '9centimeters ').replace(reglastmeasureCentimeters0pointspace, '0centimeters ').replace(reglastmeasureCentimeters1questionspace, '1centimeters ').replace(reglastmeasureCentimeters2questionspace, '2centimeters ').replace(reglastmeasureCentimeters3questionspace, '3centimeters ').replace(reglastmeasureCentimeters4questionspace, '4centimeters ').replace(reglastmeasureCentimeters5questionspace, '5centimeters ').replace(reglastmeasureCentimeters6questionspace, '6centimeters ').replace(reglastmeasureCentimeters7questionspace, '7centimeters ').replace(reglastmeasureCentimeters8questionspace, '8centimeters ').replace(reglastmeasureCentimeters9questionspace, '9centimeters ').replace(reglastmeasureCentimeters0questionspace, '0centimeters ');
}

function replacefinalpart2(str){
return str.replace(reglastmeasureounces1, '1ounces ').replace(reglastmeasureounces2, '2ounces ').replace(reglastmeasureounces3, '3ounces ').replace(reglastmeasureounces4, '4ounces ').replace(reglastmeasureounces5, '5ounces ').replace(reglastmeasureounces6, '6ounces ').replace(reglastmeasureounces7, '7ounces ').replace(reglastmeasureounces8, '8ounces ').replace(reglastmeasureounces9, '9ounces ').replace(reglastmeasureounces0, '0ounces ').replace(reglastmeasureounces1point, '1ounces ').replace(reglastmeasureounces2point, '2ounces ').replace(reglastmeasureounces3point, '3ounces ').replace(reglastmeasureounces4point, '4ounces ').replace(reglastmeasureounces5point, '5ounces ').replace(reglastmeasureounces6point, '6ounces ').replace(reglastmeasureounces7point, '7ounces ').replace(reglastmeasureounces8point, '8ounces ').replace(reglastmeasureounces9point, '9ounces ').replace(reglastmeasureounces0point, '0ounces ').replace(reglastmeasureounces1virgola, '1ounces ').replace(reglastmeasureounces2virgola, '2ounces ').replace(reglastmeasureounces3virgola, '3ounces ').replace(reglastmeasureounces4virgola, '4ounces ').replace(reglastmeasureounces5virgola, '5ounces ').replace(reglastmeasureounces6virgola, '6ounces ').replace(reglastmeasureounces7virgola, '7ounces ').replace(reglastmeasureounces8virgola, '8ounces ').replace(reglastmeasureounces9virgola, '9ounces ').replace(reglastmeasureounces0virgola, '0ounces ').replace(reglastmeasureounces1slash, '1ounces /').replace(reglastmeasureounces2slash, '2ounces /').replace(reglastmeasureounces3slash, '3ounces /').replace(reglastmeasureounces4slash, '4ounces /').replace(reglastmeasureounces5slash, '5ounces /').replace(reglastmeasureounces6slash, '6ounces /').replace(reglastmeasureounces7slash, '7ounces /').replace(reglastmeasureounces8slash, '8ounces /').replace(reglastmeasureounces9slash, '9ounces /').replace(reglastmeasureounces0slash, '0ounces /').replace(reglastmeasureounces1question, '1ounces ').replace(reglastmeasureounces2question, '2ounces ').replace(reglastmeasureounces3question, '3ounces ').replace(reglastmeasureounces4question, '4ounces ').replace(reglastmeasureounces5question, '5ounces ').replace(reglastmeasureounces6question, '6ounces ').replace(reglastmeasureounces7question, '7ounces ').replace(reglastmeasureounces8question, '8ounces ').replace(reglastmeasureounces9question, '9ounces ').replace(reglastmeasureounces0question, '0ounces ').replace(reglastmeasureounces1exclam, '1ounces ').replace(reglastmeasureounces2exclam, '2ounces ').replace(reglastmeasureounces3exclam, '3ounces ').replace(reglastmeasureounces4exclam, '4ounces ').replace(reglastmeasureounces5exclam, '5ounces ').replace(reglastmeasureounces6exclam, '6ounces ').replace(reglastmeasureounces7exclam, '7ounces ').replace(reglastmeasureounces8exclam, '8ounces ').replace(reglastmeasureounces9exclam, '9ounces ').replace(reglastmeasureounces0exclam, '0ounces ').replace(reglastmeasureounces1space, '1ounces ').replace(reglastmeasureounces2space, '2ounces ').replace(reglastmeasureounces3space, '3ounces ').replace(reglastmeasureounces4space, '4ounces ').replace(reglastmeasureounces5space, '5ounces ').replace(reglastmeasureounces6space, '6ounces ').replace(reglastmeasureounces7space, '7ounces ').replace(reglastmeasureounces8space, '8ounces ').replace(reglastmeasureounces9space, '9ounces ').replace(reglastmeasureounces0space, '0ounces ').replace(reglastmeasureounces1exclamspace, '1ounces ').replace(reglastmeasureounces2exclamspace, '2ounces ').replace(reglastmeasureounces3exclamspace, '3ounces ').replace(reglastmeasureounces4exclamspace, '4ounces ').replace(reglastmeasureounces5exclamspace, '5ounces ').replace(reglastmeasureounces6exclamspace, '6ounces ').replace(reglastmeasureounces7exclamspace, '7ounces ').replace(reglastmeasureounces8exclamspace, '8ounces ').replace(reglastmeasureounces9exclamspace, '9ounces ').replace(reglastmeasureounces0exclamspace, '0ounces ').replace(reglastmeasureounces1slashspace, '1ounces /').replace(reglastmeasureounces2slashspace, '2ounces /').replace(reglastmeasureounces3slashspace, '3ounces /').replace(reglastmeasureounces4slashspace, '4ounces /').replace(reglastmeasureounces5slashspace, '5ounces /').replace(reglastmeasureounces6slashspace, '6ounces /').replace(reglastmeasureounces7slashspace, '7ounces /').replace(reglastmeasureounces8slashspace, '8ounces /').replace(reglastmeasureounces9slashspace, '9ounces /').replace(reglastmeasureounces0slashspace, '0ounces /').replace(reglastmeasureounces1virgolaspace, '1ounces ').replace(reglastmeasureounces2virgolaspace, '2ounces ').replace(reglastmeasureounces3virgolaspace, '3ounces ').replace(reglastmeasureounces4virgolaspace, '4ounces ').replace(reglastmeasureounces5virgolaspace, '5ounces ').replace(reglastmeasureounces6virgolaspace, '6ounces ').replace(reglastmeasureounces7virgolaspace, '7ounces ').replace(reglastmeasureounces8virgolaspace, '8ounces ').replace(reglastmeasureounces9virgolaspace, '9ounces ').replace(reglastmeasureounces0virgolaspace, '0ounces ').replace(reglastmeasureounces1pointspace, '1ounces ').replace(reglastmeasureounces2pointspace, '2ounces ').replace(reglastmeasureounces3pointspace, '3ounces ').replace(reglastmeasureounces4pointspace, '4ounces ').replace(reglastmeasureounces5pointspace, '5ounces ').replace(reglastmeasureounces6pointspace, '6ounces ').replace(reglastmeasureounces7pointspace, '7ounces ').replace(reglastmeasureounces8pointspace, '8ounces ').replace(reglastmeasureounces9pointspace, '9ounces ').replace(reglastmeasureounces0pointspace, '0ounces ').replace(reglastmeasureounces1questionspace, '1ounces ').replace(reglastmeasureounces2questionspace, '2ounces ').replace(reglastmeasureounces3questionspace, '3ounces ').replace(reglastmeasureounces4questionspace, '4ounces ').replace(reglastmeasureounces5questionspace, '5ounces ').replace(reglastmeasureounces6questionspace, '6ounces ').replace(reglastmeasureounces7questionspace, '7ounces ').replace(reglastmeasureounces8questionspace, '8ounces ').replace(reglastmeasureounces9questionspace, '9ounces ').replace(reglastmeasureounces0questionspace, '0ounces ');
}
	
function replacefinalpart3(str){
return str.replace(reglastmeasureliters1, '1liters ').replace(reglastmeasureliters2, '2liters ').replace(reglastmeasureliters3, '3liters ').replace(reglastmeasureliters4, '4liters ').replace(reglastmeasureliters5, '5liters ').replace(reglastmeasureliters6, '6liters ').replace(reglastmeasureliters7, '7liters ').replace(reglastmeasureliters8, '8liters ').replace(reglastmeasureliters9, '9liters ').replace(reglastmeasureliters0, '0liters ').replace(reglastmeasureliters1point, '1liters ').replace(reglastmeasureliters2point, '2liters ').replace(reglastmeasureliters3point, '3liters ').replace(reglastmeasureliters4point, '4liters ').replace(reglastmeasureliters5point, '5liters ').replace(reglastmeasureliters6point, '6liters ').replace(reglastmeasureliters7point, '7liters ').replace(reglastmeasureliters8point, '8liters ').replace(reglastmeasureliters9point, '9liters ').replace(reglastmeasureliters0point, '0liters ').replace(reglastmeasureliters1virgola, '1liters ').replace(reglastmeasureliters2virgola, '2liters ').replace(reglastmeasureliters3virgola, '3liters ').replace(reglastmeasureliters4virgola, '4liters ').replace(reglastmeasureliters5virgola, '5liters ').replace(reglastmeasureliters6virgola, '6liters ').replace(reglastmeasureliters7virgola, '7liters ').replace(reglastmeasureliters8virgola, '8liters ').replace(reglastmeasureliters9virgola, '9liters ').replace(reglastmeasureliters0virgola, '0liters ').replace(reglastmeasureliters1slash, '1liters /').replace(reglastmeasureliters2slash, '2liters /').replace(reglastmeasureliters3slash, '3liters /').replace(reglastmeasureliters4slash, '4liters /').replace(reglastmeasureliters5slash, '5liters /').replace(reglastmeasureliters6slash, '6liters /').replace(reglastmeasureliters7slash, '7liters /').replace(reglastmeasureliters8slash, '8liters /').replace(reglastmeasureliters9slash, '9liters /').replace(reglastmeasureliters0slash, '0liters /').replace(reglastmeasureliters1question, '1liters ').replace(reglastmeasureliters2question, '2liters ').replace(reglastmeasureliters3question, '3liters ').replace(reglastmeasureliters4question, '4liters ').replace(reglastmeasureliters5question, '5liters ').replace(reglastmeasureliters6question, '6liters ').replace(reglastmeasureliters7question, '7liters ').replace(reglastmeasureliters8question, '8liters ').replace(reglastmeasureliters9question, '9liters ').replace(reglastmeasureliters0question, '0liters ').replace(reglastmeasureliters1exclam, '1liters ').replace(reglastmeasureliters2exclam, '2liters ').replace(reglastmeasureliters3exclam, '3liters ').replace(reglastmeasureliters4exclam, '4liters ').replace(reglastmeasureliters5exclam, '5liters ').replace(reglastmeasureliters6exclam, '6liters ').replace(reglastmeasureliters7exclam, '7liters ').replace(reglastmeasureliters8exclam, '8liters ').replace(reglastmeasureliters9exclam, '9liters ').replace(reglastmeasureliters0exclam, '0liters ').replace(reglastmeasureliters1space, '1liters ').replace(reglastmeasureliters2space, '2liters ').replace(reglastmeasureliters3space, '3liters ').replace(reglastmeasureliters4space, '4liters ').replace(reglastmeasureliters5space, '5liters ').replace(reglastmeasureliters6space, '6liters ').replace(reglastmeasureliters7space, '7liters ').replace(reglastmeasureliters8space, '8liters ').replace(reglastmeasureliters9space, '9liters ').replace(reglastmeasureliters0space, '0liters ').replace(reglastmeasureliters1exclamspace, '1liters ').replace(reglastmeasureliters2exclamspace, '2liters ').replace(reglastmeasureliters3exclamspace, '3liters ').replace(reglastmeasureliters4exclamspace, '4liters ').replace(reglastmeasureliters5exclamspace, '5liters ').replace(reglastmeasureliters6exclamspace, '6liters ').replace(reglastmeasureliters7exclamspace, '7liters ').replace(reglastmeasureliters8exclamspace, '8liters ').replace(reglastmeasureliters9exclamspace, '9liters ').replace(reglastmeasureliters0exclamspace, '0liters ').replace(reglastmeasureliters1slashspace, '1liters /').replace(reglastmeasureliters2slashspace, '2liters /').replace(reglastmeasureliters3slashspace, '3liters /').replace(reglastmeasureliters4slashspace, '4liters /').replace(reglastmeasureliters5slashspace, '5liters /').replace(reglastmeasureliters6slashspace, '6liters /').replace(reglastmeasureliters7slashspace, '7liters /').replace(reglastmeasureliters8slashspace, '8liters /').replace(reglastmeasureliters9slashspace, '9liters /').replace(reglastmeasureliters0slashspace, '0liters /').replace(reglastmeasureliters1virgolaspace, '1liters ').replace(reglastmeasureliters2virgolaspace, '2liters ').replace(reglastmeasureliters3virgolaspace, '3liters ').replace(reglastmeasureliters4virgolaspace, '4liters ').replace(reglastmeasureliters5virgolaspace, '5liters ').replace(reglastmeasureliters6virgolaspace, '6liters ').replace(reglastmeasureliters7virgolaspace, '7liters ').replace(reglastmeasureliters8virgolaspace, '8liters ').replace(reglastmeasureliters9virgolaspace, '9liters ').replace(reglastmeasureliters0virgolaspace, '0liters ').replace(reglastmeasureliters1pointspace, '1liters ').replace(reglastmeasureliters2pointspace, '2liters ').replace(reglastmeasureliters3pointspace, '3liters ').replace(reglastmeasureliters4pointspace, '4liters ').replace(reglastmeasureliters5pointspace, '5liters ').replace(reglastmeasureliters6pointspace, '6liters ').replace(reglastmeasureliters7pointspace, '7liters ').replace(reglastmeasureliters8pointspace, '8liters ').replace(reglastmeasureliters9pointspace, '9liters ').replace(reglastmeasureliters0pointspace, '0liters ').replace(reglastmeasureliters1questionspace, '1liters ').replace(reglastmeasureliters2questionspace, '2liters ').replace(reglastmeasureliters3questionspace, '3liters ').replace(reglastmeasureliters4questionspace, '4liters ').replace(reglastmeasureliters5questionspace, '5liters ').replace(reglastmeasureliters6questionspace, '6liters ').replace(reglastmeasureliters7questionspace, '7liters ').replace(reglastmeasureliters8questionspace, '8liters ').replace(reglastmeasureliters9questionspace, '9liters ').replace(reglastmeasureliters0questionspace, '0liters ');
}
	
function replacefinalpart4(str){
return str.replace(reglastmeasurepints1, '1pints ').replace(reglastmeasurepints2, '2pints ').replace(reglastmeasurepints3, '3pints ').replace(reglastmeasurepints4, '4pints ').replace(reglastmeasurepints5, '5pints ').replace(reglastmeasurepints6, '6pints ').replace(reglastmeasurepints7, '7pints ').replace(reglastmeasurepints8, '8pints ').replace(reglastmeasurepints9, '9pints ').replace(reglastmeasurepints0, '0pints ').replace(reglastmeasurepints1point, '1pints ').replace(reglastmeasurepints2point, '2pints ').replace(reglastmeasurepints3point, '3pints ').replace(reglastmeasurepints4point, '4pints ').replace(reglastmeasurepints5point, '5pints ').replace(reglastmeasurepints6point, '6pints ').replace(reglastmeasurepints7point, '7pints ').replace(reglastmeasurepints8point, '8pints ').replace(reglastmeasurepints9point, '9pints ').replace(reglastmeasurepints0point, '0pints ').replace(reglastmeasurepints1virgola, '1pints ').replace(reglastmeasurepints2virgola, '2pints ').replace(reglastmeasurepints3virgola, '3pints ').replace(reglastmeasurepints4virgola, '4pints ').replace(reglastmeasurepints5virgola, '5pints ').replace(reglastmeasurepints6virgola, '6pints ').replace(reglastmeasurepints7virgola, '7pints ').replace(reglastmeasurepints8virgola, '8pints ').replace(reglastmeasurepints9virgola, '9pints ').replace(reglastmeasurepints0virgola, '0pints ').replace(reglastmeasurepints1slash, '1pints /').replace(reglastmeasurepints2slash, '2pints /').replace(reglastmeasurepints3slash, '3pints /').replace(reglastmeasurepints4slash, '4pints /').replace(reglastmeasurepints5slash, '5pints /').replace(reglastmeasurepints6slash, '6pints /').replace(reglastmeasurepints7slash, '7pints /').replace(reglastmeasurepints8slash, '8pints /').replace(reglastmeasurepints9slash, '9pints /').replace(reglastmeasurepints0slash, '0pints /').replace(reglastmeasurepints1question, '1pints ').replace(reglastmeasurepints2question, '2pints ').replace(reglastmeasurepints3question, '3pints ').replace(reglastmeasurepints4question, '4pints ').replace(reglastmeasurepints5question, '5pints ').replace(reglastmeasurepints6question, '6pints ').replace(reglastmeasurepints7question, '7pints ').replace(reglastmeasurepints8question, '8pints ').replace(reglastmeasurepints9question, '9pints ').replace(reglastmeasurepints0question, '0pints ').replace(reglastmeasurepints1exclam, '1pints ').replace(reglastmeasurepints2exclam, '2pints ').replace(reglastmeasurepints3exclam, '3pints ').replace(reglastmeasurepints4exclam, '4pints ').replace(reglastmeasurepints5exclam, '5pints ').replace(reglastmeasurepints6exclam, '6pints ').replace(reglastmeasurepints7exclam, '7pints ').replace(reglastmeasurepints8exclam, '8pints ').replace(reglastmeasurepints9exclam, '9pints ').replace(reglastmeasurepints0exclam, '0pints ').replace(reglastmeasurepints1space, '1pints ').replace(reglastmeasurepints2space, '2pints ').replace(reglastmeasurepints3space, '3pints ').replace(reglastmeasurepints4space, '4pints ').replace(reglastmeasurepints5space, '5pints ').replace(reglastmeasurepints6space, '6pints ').replace(reglastmeasurepints7space, '7pints ').replace(reglastmeasurepints8space, '8pints ').replace(reglastmeasurepints9space, '9pints ').replace(reglastmeasurepints0space, '0pints ').replace(reglastmeasurepints1exclamspace, '1pints ').replace(reglastmeasurepints2exclamspace, '2pints ').replace(reglastmeasurepints3exclamspace, '3pints ').replace(reglastmeasurepints4exclamspace, '4pints ').replace(reglastmeasurepints5exclamspace, '5pints ').replace(reglastmeasurepints6exclamspace, '6pints ').replace(reglastmeasurepints7exclamspace, '7pints ').replace(reglastmeasurepints8exclamspace, '8pints ').replace(reglastmeasurepints9exclamspace, '9pints ').replace(reglastmeasurepints0exclamspace, '0pints ').replace(reglastmeasurepints1slashspace, '1pints /').replace(reglastmeasurepints2slashspace, '2pints /').replace(reglastmeasurepints3slashspace, '3pints /').replace(reglastmeasurepints4slashspace, '4pints /').replace(reglastmeasurepints5slashspace, '5pints /').replace(reglastmeasurepints6slashspace, '6pints /').replace(reglastmeasurepints7slashspace, '7pints /').replace(reglastmeasurepints8slashspace, '8pints /').replace(reglastmeasurepints9slashspace, '9pints /').replace(reglastmeasurepints0slashspace, '0pints /').replace(reglastmeasurepints1virgolaspace, '1pints ').replace(reglastmeasurepints2virgolaspace, '2pints ').replace(reglastmeasurepints3virgolaspace, '3pints ').replace(reglastmeasurepints4virgolaspace, '4pints ').replace(reglastmeasurepints5virgolaspace, '5pints ').replace(reglastmeasurepints6virgolaspace, '6pints ').replace(reglastmeasurepints7virgolaspace, '7pints ').replace(reglastmeasurepints8virgolaspace, '8pints ').replace(reglastmeasurepints9virgolaspace, '9pints ').replace(reglastmeasurepints0virgolaspace, '0pints ').replace(reglastmeasurepints1pointspace, '1pints ').replace(reglastmeasurepints2pointspace, '2pints ').replace(reglastmeasurepints3pointspace, '3pints ').replace(reglastmeasurepints4pointspace, '4pints ').replace(reglastmeasurepints5pointspace, '5pints ').replace(reglastmeasurepints6pointspace, '6pints ').replace(reglastmeasurepints7pointspace, '7pints ').replace(reglastmeasurepints8pointspace, '8pints ').replace(reglastmeasurepints9pointspace, '9pints ').replace(reglastmeasurepints0pointspace, '0pints ').replace(reglastmeasurepints1questionspace, '1pints ').replace(reglastmeasurepints2questionspace, '2pints ').replace(reglastmeasurepints3questionspace, '3pints ').replace(reglastmeasurepints4questionspace, '4pints ').replace(reglastmeasurepints5questionspace, '5pints ').replace(reglastmeasurepints6questionspace, '6pints ').replace(reglastmeasurepints7questionspace, '7pints ').replace(reglastmeasurepints8questionspace, '8pints ').replace(reglastmeasurepints9questionspace, '9pints ').replace(reglastmeasurepints0questionspace, '0pints ');
}

function replacefinalpart5(str){
return str.replace(reglastmeasuregrams1, '1grams ').replace(reglastmeasuregrams2, '2grams ').replace(reglastmeasuregrams3, '3grams ').replace(reglastmeasuregrams4, '4grams ').replace(reglastmeasuregrams5, '5grams ').replace(reglastmeasuregrams6, '6grams ').replace(reglastmeasuregrams7, '7grams ').replace(reglastmeasuregrams8, '8grams ').replace(reglastmeasuregrams9, '9grams ').replace(reglastmeasuregrams0, '0grams ').replace(reglastmeasuregrams1point, '1grams ').replace(reglastmeasuregrams2point, '2grams ').replace(reglastmeasuregrams3point, '3grams ').replace(reglastmeasuregrams4point, '4grams ').replace(reglastmeasuregrams5point, '5grams ').replace(reglastmeasuregrams6point, '6grams ').replace(reglastmeasuregrams7point, '7grams ').replace(reglastmeasuregrams8point, '8grams ').replace(reglastmeasuregrams9point, '9grams ').replace(reglastmeasuregrams0point, '0grams ').replace(reglastmeasuregrams1virgola, '1grams ').replace(reglastmeasuregrams2virgola, '2grams ').replace(reglastmeasuregrams3virgola, '3grams ').replace(reglastmeasuregrams4virgola, '4grams ').replace(reglastmeasuregrams5virgola, '5grams ').replace(reglastmeasuregrams6virgola, '6grams ').replace(reglastmeasuregrams7virgola, '7grams ').replace(reglastmeasuregrams8virgola, '8grams ').replace(reglastmeasuregrams9virgola, '9grams ').replace(reglastmeasuregrams0virgola, '0grams ').replace(reglastmeasuregrams1slash, '1grams /').replace(reglastmeasuregrams2slash, '2grams /').replace(reglastmeasuregrams3slash, '3grams /').replace(reglastmeasuregrams4slash, '4grams /').replace(reglastmeasuregrams5slash, '5grams /').replace(reglastmeasuregrams6slash, '6grams /').replace(reglastmeasuregrams7slash, '7grams /').replace(reglastmeasuregrams8slash, '8grams /').replace(reglastmeasuregrams9slash, '9grams /').replace(reglastmeasuregrams0slash, '0grams /').replace(reglastmeasuregrams1question, '1grams ').replace(reglastmeasuregrams2question, '2grams ').replace(reglastmeasuregrams3question, '3grams ').replace(reglastmeasuregrams4question, '4grams ').replace(reglastmeasuregrams5question, '5grams ').replace(reglastmeasuregrams6question, '6grams ').replace(reglastmeasuregrams7question, '7grams ').replace(reglastmeasuregrams8question, '8grams ').replace(reglastmeasuregrams9question, '9grams ').replace(reglastmeasuregrams0question, '0grams ').replace(reglastmeasuregrams1exclam, '1grams ').replace(reglastmeasuregrams2exclam, '2grams ').replace(reglastmeasuregrams3exclam, '3grams ').replace(reglastmeasuregrams4exclam, '4grams ').replace(reglastmeasuregrams5exclam, '5grams ').replace(reglastmeasuregrams6exclam, '6grams ').replace(reglastmeasuregrams7exclam, '7grams ').replace(reglastmeasuregrams8exclam, '8grams ').replace(reglastmeasuregrams9exclam, '9grams ').replace(reglastmeasuregrams0exclam, '0grams ').replace(reglastmeasuregrams1space, '1grams ').replace(reglastmeasuregrams2space, '2grams ').replace(reglastmeasuregrams3space, '3grams ').replace(reglastmeasuregrams4space, '4grams ').replace(reglastmeasuregrams5space, '5grams ').replace(reglastmeasuregrams6space, '6grams ').replace(reglastmeasuregrams7space, '7grams ').replace(reglastmeasuregrams8space, '8grams ').replace(reglastmeasuregrams9space, '9grams ').replace(reglastmeasuregrams0space, '0grams ').replace(reglastmeasuregrams1exclamspace, '1grams ').replace(reglastmeasuregrams2exclamspace, '2grams ').replace(reglastmeasuregrams3exclamspace, '3grams ').replace(reglastmeasuregrams4exclamspace, '4grams ').replace(reglastmeasuregrams5exclamspace, '5grams ').replace(reglastmeasuregrams6exclamspace, '6grams ').replace(reglastmeasuregrams7exclamspace, '7grams ').replace(reglastmeasuregrams8exclamspace, '8grams ').replace(reglastmeasuregrams9exclamspace, '9grams ').replace(reglastmeasuregrams0exclamspace, '0grams ').replace(reglastmeasuregrams1slashspace, '1grams /').replace(reglastmeasuregrams2slashspace, '2grams /').replace(reglastmeasuregrams3slashspace, '3grams /').replace(reglastmeasuregrams4slashspace, '4grams /').replace(reglastmeasuregrams5slashspace, '5grams /').replace(reglastmeasuregrams6slashspace, '6grams /').replace(reglastmeasuregrams7slashspace, '7grams /').replace(reglastmeasuregrams8slashspace, '8grams /').replace(reglastmeasuregrams9slashspace, '9grams /').replace(reglastmeasuregrams0slashspace, '0grams /').replace(reglastmeasuregrams1virgolaspace, '1grams ').replace(reglastmeasuregrams2virgolaspace, '2grams ').replace(reglastmeasuregrams3virgolaspace, '3grams ').replace(reglastmeasuregrams4virgolaspace, '4grams ').replace(reglastmeasuregrams5virgolaspace, '5grams ').replace(reglastmeasuregrams6virgolaspace, '6grams ').replace(reglastmeasuregrams7virgolaspace, '7grams ').replace(reglastmeasuregrams8virgolaspace, '8grams ').replace(reglastmeasuregrams9virgolaspace, '9grams ').replace(reglastmeasuregrams0virgolaspace, '0grams ').replace(reglastmeasuregrams1pointspace, '1grams ').replace(reglastmeasuregrams2pointspace, '2grams ').replace(reglastmeasuregrams3pointspace, '3grams ').replace(reglastmeasuregrams4pointspace, '4grams ').replace(reglastmeasuregrams5pointspace, '5grams ').replace(reglastmeasuregrams6pointspace, '6grams ').replace(reglastmeasuregrams7pointspace, '7grams ').replace(reglastmeasuregrams8pointspace, '8grams ').replace(reglastmeasuregrams9pointspace, '9grams ').replace(reglastmeasuregrams0pointspace, '0grams ').replace(reglastmeasuregrams1questionspace, '1grams ').replace(reglastmeasuregrams2questionspace, '2grams ').replace(reglastmeasuregrams3questionspace, '3grams ').replace(reglastmeasuregrams4questionspace, '4grams ').replace(reglastmeasuregrams5questionspace, '5grams ').replace(reglastmeasuregrams6questionspace, '6grams ').replace(reglastmeasuregrams7questionspace, '7grams ').replace(reglastmeasuregrams8questionspace, '8grams ').replace(reglastmeasuregrams9questionspace, '9grams ').replace(reglastmeasuregrams0questionspace, '0grams ');
}

function replacefinalpart6(str){
return str.replace(reglastmeasuremetrexx1, '1metrexx ').replace(reglastmeasuremetrexx2, '2metrexx ').replace(reglastmeasuremetrexx3, '3metrexx ').replace(reglastmeasuremetrexx4, '4metrexx ').replace(reglastmeasuremetrexx5, '5metrexx ').replace(reglastmeasuremetrexx6, '6metrexx ').replace(reglastmeasuremetrexx7, '7metrexx ').replace(reglastmeasuremetrexx8, '8metrexx ').replace(reglastmeasuremetrexx9, '9metrexx ').replace(reglastmeasuremetrexx0, '0metrexx ').replace(reglastmeasuremetrexx1point, '1metrexx ').replace(reglastmeasuremetrexx2point, '2metrexx ').replace(reglastmeasuremetrexx3point, '3metrexx ').replace(reglastmeasuremetrexx4point, '4metrexx ').replace(reglastmeasuremetrexx5point, '5metrexx ').replace(reglastmeasuremetrexx6point, '6metrexx ').replace(reglastmeasuremetrexx7point, '7metrexx ').replace(reglastmeasuremetrexx8point, '8metrexx ').replace(reglastmeasuremetrexx9point, '9metrexx ').replace(reglastmeasuremetrexx0point, '0metrexx ').replace(reglastmeasuremetrexx1virgola, '1metrexx ').replace(reglastmeasuremetrexx2virgola, '2metrexx ').replace(reglastmeasuremetrexx3virgola, '3metrexx ').replace(reglastmeasuremetrexx4virgola, '4metrexx ').replace(reglastmeasuremetrexx5virgola, '5metrexx ').replace(reglastmeasuremetrexx6virgola, '6metrexx ').replace(reglastmeasuremetrexx7virgola, '7metrexx ').replace(reglastmeasuremetrexx8virgola, '8metrexx ').replace(reglastmeasuremetrexx9virgola, '9metrexx ').replace(reglastmeasuremetrexx0virgola, '0metrexx ').replace(reglastmeasuremetrexx1slash, '1metrexx /').replace(reglastmeasuremetrexx2slash, '2metrexx /').replace(reglastmeasuremetrexx3slash, '3metrexx /').replace(reglastmeasuremetrexx4slash, '4metrexx /').replace(reglastmeasuremetrexx5slash, '5metrexx /').replace(reglastmeasuremetrexx6slash, '6metrexx /').replace(reglastmeasuremetrexx7slash, '7metrexx /').replace(reglastmeasuremetrexx8slash, '8metrexx /').replace(reglastmeasuremetrexx9slash, '9metrexx /').replace(reglastmeasuremetrexx0slash, '0metrexx /').replace(reglastmeasuremetrexx1question, '1metrexx ').replace(reglastmeasuremetrexx2question, '2metrexx ').replace(reglastmeasuremetrexx3question, '3metrexx ').replace(reglastmeasuremetrexx4question, '4metrexx ').replace(reglastmeasuremetrexx5question, '5metrexx ').replace(reglastmeasuremetrexx6question, '6metrexx ').replace(reglastmeasuremetrexx7question, '7metrexx ').replace(reglastmeasuremetrexx8question, '8metrexx ').replace(reglastmeasuremetrexx9question, '9metrexx ').replace(reglastmeasuremetrexx0question, '0metrexx ').replace(reglastmeasuremetrexx1exclam, '1metrexx ').replace(reglastmeasuremetrexx2exclam, '2metrexx ').replace(reglastmeasuremetrexx3exclam, '3metrexx ').replace(reglastmeasuremetrexx4exclam, '4metrexx ').replace(reglastmeasuremetrexx5exclam, '5metrexx ').replace(reglastmeasuremetrexx6exclam, '6metrexx ').replace(reglastmeasuremetrexx7exclam, '7metrexx ').replace(reglastmeasuremetrexx8exclam, '8metrexx ').replace(reglastmeasuremetrexx9exclam, '9metrexx ').replace(reglastmeasuremetrexx0exclam, '0metrexx ').replace(reglastmeasuremetrexx1space, '1metrexx ').replace(reglastmeasuremetrexx2space, '2metrexx ').replace(reglastmeasuremetrexx3space, '3metrexx ').replace(reglastmeasuremetrexx4space, '4metrexx ').replace(reglastmeasuremetrexx5space, '5metrexx ').replace(reglastmeasuremetrexx6space, '6metrexx ').replace(reglastmeasuremetrexx7space, '7metrexx ').replace(reglastmeasuremetrexx8space, '8metrexx ').replace(reglastmeasuremetrexx9space, '9metrexx ').replace(reglastmeasuremetrexx0space, '0metrexx ').replace(reglastmeasuremetrexx1exclamspace, '1metrexx ').replace(reglastmeasuremetrexx2exclamspace, '2metrexx ').replace(reglastmeasuremetrexx3exclamspace, '3metrexx ').replace(reglastmeasuremetrexx4exclamspace, '4metrexx ').replace(reglastmeasuremetrexx5exclamspace, '5metrexx ').replace(reglastmeasuremetrexx6exclamspace, '6metrexx ').replace(reglastmeasuremetrexx7exclamspace, '7metrexx ').replace(reglastmeasuremetrexx8exclamspace, '8metrexx ').replace(reglastmeasuremetrexx9exclamspace, '9metrexx ').replace(reglastmeasuremetrexx0exclamspace, '0metrexx ').replace(reglastmeasuremetrexx1slashspace, '1metrexx /').replace(reglastmeasuremetrexx2slashspace, '2metrexx /').replace(reglastmeasuremetrexx3slashspace, '3metrexx /').replace(reglastmeasuremetrexx4slashspace, '4metrexx /').replace(reglastmeasuremetrexx5slashspace, '5metrexx /').replace(reglastmeasuremetrexx6slashspace, '6metrexx /').replace(reglastmeasuremetrexx7slashspace, '7metrexx /').replace(reglastmeasuremetrexx8slashspace, '8metrexx /').replace(reglastmeasuremetrexx9slashspace, '9metrexx /').replace(reglastmeasuremetrexx0slashspace, '0metrexx /').replace(reglastmeasuremetrexx1virgolaspace, '1metrexx ').replace(reglastmeasuremetrexx2virgolaspace, '2metrexx ').replace(reglastmeasuremetrexx3virgolaspace, '3metrexx ').replace(reglastmeasuremetrexx4virgolaspace, '4metrexx ').replace(reglastmeasuremetrexx5virgolaspace, '5metrexx ').replace(reglastmeasuremetrexx6virgolaspace, '6metrexx ').replace(reglastmeasuremetrexx7virgolaspace, '7metrexx ').replace(reglastmeasuremetrexx8virgolaspace, '8metrexx ').replace(reglastmeasuremetrexx9virgolaspace, '9metrexx ').replace(reglastmeasuremetrexx0virgolaspace, '0metrexx ').replace(reglastmeasuremetrexx1pointspace, '1metrexx ').replace(reglastmeasuremetrexx2pointspace, '2metrexx ').replace(reglastmeasuremetrexx3pointspace, '3metrexx ').replace(reglastmeasuremetrexx4pointspace, '4metrexx ').replace(reglastmeasuremetrexx5pointspace, '5metrexx ').replace(reglastmeasuremetrexx6pointspace, '6metrexx ').replace(reglastmeasuremetrexx7pointspace, '7metrexx ').replace(reglastmeasuremetrexx8pointspace, '8metrexx ').replace(reglastmeasuremetrexx9pointspace, '9metrexx ').replace(reglastmeasuremetrexx0pointspace, '0metrexx ').replace(reglastmeasuremetrexx1questionspace, '1metrexx ').replace(reglastmeasuremetrexx2questionspace, '2metrexx ').replace(reglastmeasuremetrexx3questionspace, '3metrexx ').replace(reglastmeasuremetrexx4questionspace, '4metrexx ').replace(reglastmeasuremetrexx5questionspace, '5metrexx ').replace(reglastmeasuremetrexx6questionspace, '6metrexx ').replace(reglastmeasuremetrexx7questionspace, '7metrexx ').replace(reglastmeasuremetrexx8questionspace, '8metrexx ').replace(reglastmeasuremetrexx9questionspace, '9metrexx ').replace(reglastmeasuremetrexx0questionspace, '0metrexx ');
}
	
function replacefinalpart7(str){
return str.replace(reglastmeasuremiles1, '1miles ').replace(reglastmeasuremiles2, '2miles ').replace(reglastmeasuremiles3, '3miles ').replace(reglastmeasuremiles4, '4miles ').replace(reglastmeasuremiles5, '5miles ').replace(reglastmeasuremiles6, '6miles ').replace(reglastmeasuremiles7, '7miles ').replace(reglastmeasuremiles8, '8miles ').replace(reglastmeasuremiles9, '9miles ').replace(reglastmeasuremiles0, '0miles ').replace(reglastmeasuremiles1point, '1miles ').replace(reglastmeasuremiles2point, '2miles ').replace(reglastmeasuremiles3point, '3miles ').replace(reglastmeasuremiles4point, '4miles ').replace(reglastmeasuremiles5point, '5miles ').replace(reglastmeasuremiles6point, '6miles ').replace(reglastmeasuremiles7point, '7miles ').replace(reglastmeasuremiles8point, '8miles ').replace(reglastmeasuremiles9point, '9miles ').replace(reglastmeasuremiles0point, '0miles ').replace(reglastmeasuremiles1virgola, '1miles ').replace(reglastmeasuremiles2virgola, '2miles ').replace(reglastmeasuremiles3virgola, '3miles ').replace(reglastmeasuremiles4virgola, '4miles ').replace(reglastmeasuremiles5virgola, '5miles ').replace(reglastmeasuremiles6virgola, '6miles ').replace(reglastmeasuremiles7virgola, '7miles ').replace(reglastmeasuremiles8virgola, '8miles ').replace(reglastmeasuremiles9virgola, '9miles ').replace(reglastmeasuremiles0virgola, '0miles ').replace(reglastmeasuremiles1slash, '1miles /').replace(reglastmeasuremiles2slash, '2miles /').replace(reglastmeasuremiles3slash, '3miles /').replace(reglastmeasuremiles4slash, '4miles /').replace(reglastmeasuremiles5slash, '5miles /').replace(reglastmeasuremiles6slash, '6miles /').replace(reglastmeasuremiles7slash, '7miles /').replace(reglastmeasuremiles8slash, '8miles /').replace(reglastmeasuremiles9slash, '9miles /').replace(reglastmeasuremiles0slash, '0miles /').replace(reglastmeasuremiles1question, '1miles ').replace(reglastmeasuremiles2question, '2miles ').replace(reglastmeasuremiles3question, '3miles ').replace(reglastmeasuremiles4question, '4miles ').replace(reglastmeasuremiles5question, '5miles ').replace(reglastmeasuremiles6question, '6miles ').replace(reglastmeasuremiles7question, '7miles ').replace(reglastmeasuremiles8question, '8miles ').replace(reglastmeasuremiles9question, '9miles ').replace(reglastmeasuremiles0question, '0miles ').replace(reglastmeasuremiles1exclam, '1miles ').replace(reglastmeasuremiles2exclam, '2miles ').replace(reglastmeasuremiles3exclam, '3miles ').replace(reglastmeasuremiles4exclam, '4miles ').replace(reglastmeasuremiles5exclam, '5miles ').replace(reglastmeasuremiles6exclam, '6miles ').replace(reglastmeasuremiles7exclam, '7miles ').replace(reglastmeasuremiles8exclam, '8miles ').replace(reglastmeasuremiles9exclam, '9miles ').replace(reglastmeasuremiles0exclam, '0miles ').replace(reglastmeasuremiles1space, '1miles ').replace(reglastmeasuremiles2space, '2miles ').replace(reglastmeasuremiles3space, '3miles ').replace(reglastmeasuremiles4space, '4miles ').replace(reglastmeasuremiles5space, '5miles ').replace(reglastmeasuremiles6space, '6miles ').replace(reglastmeasuremiles7space, '7miles ').replace(reglastmeasuremiles8space, '8miles ').replace(reglastmeasuremiles9space, '9miles ').replace(reglastmeasuremiles0space, '0miles ').replace(reglastmeasuremiles1exclamspace, '1miles ').replace(reglastmeasuremiles2exclamspace, '2miles ').replace(reglastmeasuremiles3exclamspace, '3miles ').replace(reglastmeasuremiles4exclamspace, '4miles ').replace(reglastmeasuremiles5exclamspace, '5miles ').replace(reglastmeasuremiles6exclamspace, '6miles ').replace(reglastmeasuremiles7exclamspace, '7miles ').replace(reglastmeasuremiles8exclamspace, '8miles ').replace(reglastmeasuremiles9exclamspace, '9miles ').replace(reglastmeasuremiles0exclamspace, '0miles ').replace(reglastmeasuremiles1slashspace, '1miles /').replace(reglastmeasuremiles2slashspace, '2miles /').replace(reglastmeasuremiles3slashspace, '3miles /').replace(reglastmeasuremiles4slashspace, '4miles /').replace(reglastmeasuremiles5slashspace, '5miles /').replace(reglastmeasuremiles6slashspace, '6miles /').replace(reglastmeasuremiles7slashspace, '7miles /').replace(reglastmeasuremiles8slashspace, '8miles /').replace(reglastmeasuremiles9slashspace, '9miles /').replace(reglastmeasuremiles0slashspace, '0miles /').replace(reglastmeasuremiles1virgolaspace, '1miles ').replace(reglastmeasuremiles2virgolaspace, '2miles ').replace(reglastmeasuremiles3virgolaspace, '3miles ').replace(reglastmeasuremiles4virgolaspace, '4miles ').replace(reglastmeasuremiles5virgolaspace, '5miles ').replace(reglastmeasuremiles6virgolaspace, '6miles ').replace(reglastmeasuremiles7virgolaspace, '7miles ').replace(reglastmeasuremiles8virgolaspace, '8miles ').replace(reglastmeasuremiles9virgolaspace, '9miles ').replace(reglastmeasuremiles0virgolaspace, '0miles ').replace(reglastmeasuremiles1pointspace, '1miles ').replace(reglastmeasuremiles2pointspace, '2miles ').replace(reglastmeasuremiles3pointspace, '3miles ').replace(reglastmeasuremiles4pointspace, '4miles ').replace(reglastmeasuremiles5pointspace, '5miles ').replace(reglastmeasuremiles6pointspace, '6miles ').replace(reglastmeasuremiles7pointspace, '7miles ').replace(reglastmeasuremiles8pointspace, '8miles ').replace(reglastmeasuremiles9pointspace, '9miles ').replace(reglastmeasuremiles0pointspace, '0miles ').replace(reglastmeasuremiles1questionspace, '1miles ').replace(reglastmeasuremiles2questionspace, '2miles ').replace(reglastmeasuremiles3questionspace, '3miles ').replace(reglastmeasuremiles4questionspace, '4miles ').replace(reglastmeasuremiles5questionspace, '5miles ').replace(reglastmeasuremiles6questionspace, '6miles ').replace(reglastmeasuremiles7questionspace, '7miles ').replace(reglastmeasuremiles8questionspace, '8miles ').replace(reglastmeasuremiles9questionspace, '9miles ').replace(reglastmeasuremiles0questionspace, '0miles ');
}
	
function replacefinalpart8(str){
return str.replace(reglastmeasurepounds1, '1pounds ').replace(reglastmeasurepounds2, '2pounds ').replace(reglastmeasurepounds3, '3pounds ').replace(reglastmeasurepounds4, '4pounds ').replace(reglastmeasurepounds5, '5pounds ').replace(reglastmeasurepounds6, '6pounds ').replace(reglastmeasurepounds7, '7pounds ').replace(reglastmeasurepounds8, '8pounds ').replace(reglastmeasurepounds9, '9pounds ').replace(reglastmeasurepounds0, '0pounds ').replace(reglastmeasurepounds1point, '1pounds ').replace(reglastmeasurepounds2point, '2pounds ').replace(reglastmeasurepounds3point, '3pounds ').replace(reglastmeasurepounds4point, '4pounds ').replace(reglastmeasurepounds5point, '5pounds ').replace(reglastmeasurepounds6point, '6pounds ').replace(reglastmeasurepounds7point, '7pounds ').replace(reglastmeasurepounds8point, '8pounds ').replace(reglastmeasurepounds9point, '9pounds ').replace(reglastmeasurepounds0point, '0pounds ').replace(reglastmeasurepounds1virgola, '1pounds ').replace(reglastmeasurepounds2virgola, '2pounds ').replace(reglastmeasurepounds3virgola, '3pounds ').replace(reglastmeasurepounds4virgola, '4pounds ').replace(reglastmeasurepounds5virgola, '5pounds ').replace(reglastmeasurepounds6virgola, '6pounds ').replace(reglastmeasurepounds7virgola, '7pounds ').replace(reglastmeasurepounds8virgola, '8pounds ').replace(reglastmeasurepounds9virgola, '9pounds ').replace(reglastmeasurepounds0virgola, '0pounds ').replace(reglastmeasurepounds1slash, '1pounds /').replace(reglastmeasurepounds2slash, '2pounds /').replace(reglastmeasurepounds3slash, '3pounds /').replace(reglastmeasurepounds4slash, '4pounds /').replace(reglastmeasurepounds5slash, '5pounds /').replace(reglastmeasurepounds6slash, '6pounds /').replace(reglastmeasurepounds7slash, '7pounds /').replace(reglastmeasurepounds8slash, '8pounds /').replace(reglastmeasurepounds9slash, '9pounds /').replace(reglastmeasurepounds0slash, '0pounds /').replace(reglastmeasurepounds1question, '1pounds ').replace(reglastmeasurepounds2question, '2pounds ').replace(reglastmeasurepounds3question, '3pounds ').replace(reglastmeasurepounds4question, '4pounds ').replace(reglastmeasurepounds5question, '5pounds ').replace(reglastmeasurepounds6question, '6pounds ').replace(reglastmeasurepounds7question, '7pounds ').replace(reglastmeasurepounds8question, '8pounds ').replace(reglastmeasurepounds9question, '9pounds ').replace(reglastmeasurepounds0question, '0pounds ').replace(reglastmeasurepounds1exclam, '1pounds ').replace(reglastmeasurepounds2exclam, '2pounds ').replace(reglastmeasurepounds3exclam, '3pounds ').replace(reglastmeasurepounds4exclam, '4pounds ').replace(reglastmeasurepounds5exclam, '5pounds ').replace(reglastmeasurepounds6exclam, '6pounds ').replace(reglastmeasurepounds7exclam, '7pounds ').replace(reglastmeasurepounds8exclam, '8pounds ').replace(reglastmeasurepounds9exclam, '9pounds ').replace(reglastmeasurepounds0exclam, '0pounds ').replace(reglastmeasurepounds1space, '1pounds ').replace(reglastmeasurepounds2space, '2pounds ').replace(reglastmeasurepounds3space, '3pounds ').replace(reglastmeasurepounds4space, '4pounds ').replace(reglastmeasurepounds5space, '5pounds ').replace(reglastmeasurepounds6space, '6pounds ').replace(reglastmeasurepounds7space, '7pounds ').replace(reglastmeasurepounds8space, '8pounds ').replace(reglastmeasurepounds9space, '9pounds ').replace(reglastmeasurepounds0space, '0pounds ').replace(reglastmeasurepounds1exclamspace, '1pounds ').replace(reglastmeasurepounds2exclamspace, '2pounds ').replace(reglastmeasurepounds3exclamspace, '3pounds ').replace(reglastmeasurepounds4exclamspace, '4pounds ').replace(reglastmeasurepounds5exclamspace, '5pounds ').replace(reglastmeasurepounds6exclamspace, '6pounds ').replace(reglastmeasurepounds7exclamspace, '7pounds ').replace(reglastmeasurepounds8exclamspace, '8pounds ').replace(reglastmeasurepounds9exclamspace, '9pounds ').replace(reglastmeasurepounds0exclamspace, '0pounds ').replace(reglastmeasurepounds1slashspace, '1pounds /').replace(reglastmeasurepounds2slashspace, '2pounds /').replace(reglastmeasurepounds3slashspace, '3pounds /').replace(reglastmeasurepounds4slashspace, '4pounds /').replace(reglastmeasurepounds5slashspace, '5pounds /').replace(reglastmeasurepounds6slashspace, '6pounds /').replace(reglastmeasurepounds7slashspace, '7pounds /').replace(reglastmeasurepounds8slashspace, '8pounds /').replace(reglastmeasurepounds9slashspace, '9pounds /').replace(reglastmeasurepounds0slashspace, '0pounds /').replace(reglastmeasurepounds1virgolaspace, '1pounds ').replace(reglastmeasurepounds2virgolaspace, '2pounds ').replace(reglastmeasurepounds3virgolaspace, '3pounds ').replace(reglastmeasurepounds4virgolaspace, '4pounds ').replace(reglastmeasurepounds5virgolaspace, '5pounds ').replace(reglastmeasurepounds6virgolaspace, '6pounds ').replace(reglastmeasurepounds7virgolaspace, '7pounds ').replace(reglastmeasurepounds8virgolaspace, '8pounds ').replace(reglastmeasurepounds9virgolaspace, '9pounds ').replace(reglastmeasurepounds0virgolaspace, '0pounds ').replace(reglastmeasurepounds1pointspace, '1pounds ').replace(reglastmeasurepounds2pointspace, '2pounds ').replace(reglastmeasurepounds3pointspace, '3pounds ').replace(reglastmeasurepounds4pointspace, '4pounds ').replace(reglastmeasurepounds5pointspace, '5pounds ').replace(reglastmeasurepounds6pointspace, '6pounds ').replace(reglastmeasurepounds7pointspace, '7pounds ').replace(reglastmeasurepounds8pointspace, '8pounds ').replace(reglastmeasurepounds9pointspace, '9pounds ').replace(reglastmeasurepounds0pointspace, '0pounds ').replace(reglastmeasurepounds1questionspace, '1pounds ').replace(reglastmeasurepounds2questionspace, '2pounds ').replace(reglastmeasurepounds3questionspace, '3pounds ').replace(reglastmeasurepounds4questionspace, '4pounds ').replace(reglastmeasurepounds5questionspace, '5pounds ').replace(reglastmeasurepounds6questionspace, '6pounds ').replace(reglastmeasurepounds7questionspace, '7pounds ').replace(reglastmeasurepounds8questionspace, '8pounds ').replace(reglastmeasurepounds9questionspace, '9pounds ').replace(reglastmeasurepounds0questionspace, '0pounds ');
}
	
function replacefinalpart9(str){
return str.replace(reglastmeasurevolt1, '1volt ').replace(reglastmeasurevolt2, '2volt ').replace(reglastmeasurevolt3, '3volt ').replace(reglastmeasurevolt4, '4volt ').replace(reglastmeasurevolt5, '5volt ').replace(reglastmeasurevolt6, '6volt ').replace(reglastmeasurevolt7, '7volt ').replace(reglastmeasurevolt8, '8volt ').replace(reglastmeasurevolt9, '9volt ').replace(reglastmeasurevolt0, '0volt ').replace(reglastmeasurevolt1point, '1volt ').replace(reglastmeasurevolt2point, '2volt ').replace(reglastmeasurevolt3point, '3volt ').replace(reglastmeasurevolt4point, '4volt ').replace(reglastmeasurevolt5point, '5volt ').replace(reglastmeasurevolt6point, '6volt ').replace(reglastmeasurevolt7point, '7volt ').replace(reglastmeasurevolt8point, '8volt ').replace(reglastmeasurevolt9point, '9volt ').replace(reglastmeasurevolt0point, '0volt ').replace(reglastmeasurevolt1virgola, '1volt ').replace(reglastmeasurevolt2virgola, '2volt ').replace(reglastmeasurevolt3virgola, '3volt ').replace(reglastmeasurevolt4virgola, '4volt ').replace(reglastmeasurevolt5virgola, '5volt ').replace(reglastmeasurevolt6virgola, '6volt ').replace(reglastmeasurevolt7virgola, '7volt ').replace(reglastmeasurevolt8virgola, '8volt ').replace(reglastmeasurevolt9virgola, '9volt ').replace(reglastmeasurevolt0virgola, '0volt ').replace(reglastmeasurevolt1slash, '1volt /').replace(reglastmeasurevolt2slash, '2volt /').replace(reglastmeasurevolt3slash, '3volt /').replace(reglastmeasurevolt4slash, '4volt /').replace(reglastmeasurevolt5slash, '5volt /').replace(reglastmeasurevolt6slash, '6volt /').replace(reglastmeasurevolt7slash, '7volt /').replace(reglastmeasurevolt8slash, '8volt /').replace(reglastmeasurevolt9slash, '9volt /').replace(reglastmeasurevolt0slash, '0volt /').replace(reglastmeasurevolt1question, '1volt ').replace(reglastmeasurevolt2question, '2volt ').replace(reglastmeasurevolt3question, '3volt ').replace(reglastmeasurevolt4question, '4volt ').replace(reglastmeasurevolt5question, '5volt ').replace(reglastmeasurevolt6question, '6volt ').replace(reglastmeasurevolt7question, '7volt ').replace(reglastmeasurevolt8question, '8volt ').replace(reglastmeasurevolt9question, '9volt ').replace(reglastmeasurevolt0question, '0volt ').replace(reglastmeasurevolt1exclam, '1volt ').replace(reglastmeasurevolt2exclam, '2volt ').replace(reglastmeasurevolt3exclam, '3volt ').replace(reglastmeasurevolt4exclam, '4volt ').replace(reglastmeasurevolt5exclam, '5volt ').replace(reglastmeasurevolt6exclam, '6volt ').replace(reglastmeasurevolt7exclam, '7volt ').replace(reglastmeasurevolt8exclam, '8volt ').replace(reglastmeasurevolt9exclam, '9volt ').replace(reglastmeasurevolt0exclam, '0volt ').replace(reglastmeasurevolt1space, '1volt ').replace(reglastmeasurevolt2space, '2volt ').replace(reglastmeasurevolt3space, '3volt ').replace(reglastmeasurevolt4space, '4volt ').replace(reglastmeasurevolt5space, '5volt ').replace(reglastmeasurevolt6space, '6volt ').replace(reglastmeasurevolt7space, '7volt ').replace(reglastmeasurevolt8space, '8volt ').replace(reglastmeasurevolt9space, '9volt ').replace(reglastmeasurevolt0space, '0volt ').replace(reglastmeasurevolt1exclamspace, '1volt ').replace(reglastmeasurevolt2exclamspace, '2volt ').replace(reglastmeasurevolt3exclamspace, '3volt ').replace(reglastmeasurevolt4exclamspace, '4volt ').replace(reglastmeasurevolt5exclamspace, '5volt ').replace(reglastmeasurevolt6exclamspace, '6volt ').replace(reglastmeasurevolt7exclamspace, '7volt ').replace(reglastmeasurevolt8exclamspace, '8volt ').replace(reglastmeasurevolt9exclamspace, '9volt ').replace(reglastmeasurevolt0exclamspace, '0volt ').replace(reglastmeasurevolt1slashspace, '1volt /').replace(reglastmeasurevolt2slashspace, '2volt /').replace(reglastmeasurevolt3slashspace, '3volt /').replace(reglastmeasurevolt4slashspace, '4volt /').replace(reglastmeasurevolt5slashspace, '5volt /').replace(reglastmeasurevolt6slashspace, '6volt /').replace(reglastmeasurevolt7slashspace, '7volt /').replace(reglastmeasurevolt8slashspace, '8volt /').replace(reglastmeasurevolt9slashspace, '9volt /').replace(reglastmeasurevolt0slashspace, '0volt /').replace(reglastmeasurevolt1virgolaspace, '1volt ').replace(reglastmeasurevolt2virgolaspace, '2volt ').replace(reglastmeasurevolt3virgolaspace, '3volt ').replace(reglastmeasurevolt4virgolaspace, '4volt ').replace(reglastmeasurevolt5virgolaspace, '5volt ').replace(reglastmeasurevolt6virgolaspace, '6volt ').replace(reglastmeasurevolt7virgolaspace, '7volt ').replace(reglastmeasurevolt8virgolaspace, '8volt ').replace(reglastmeasurevolt9virgolaspace, '9volt ').replace(reglastmeasurevolt0virgolaspace, '0volt ').replace(reglastmeasurevolt1pointspace, '1volt ').replace(reglastmeasurevolt2pointspace, '2volt ').replace(reglastmeasurevolt3pointspace, '3volt ').replace(reglastmeasurevolt4pointspace, '4volt ').replace(reglastmeasurevolt5pointspace, '5volt ').replace(reglastmeasurevolt6pointspace, '6volt ').replace(reglastmeasurevolt7pointspace, '7volt ').replace(reglastmeasurevolt8pointspace, '8volt ').replace(reglastmeasurevolt9pointspace, '9volt ').replace(reglastmeasurevolt0pointspace, '0volt ').replace(reglastmeasurevolt1questionspace, '1volt ').replace(reglastmeasurevolt2questionspace, '2volt ').replace(reglastmeasurevolt3questionspace, '3volt ').replace(reglastmeasurevolt4questionspace, '4volt ').replace(reglastmeasurevolt5questionspace, '5volt ').replace(reglastmeasurevolt6questionspace, '6volt ').replace(reglastmeasurevolt7questionspace, '7volt ').replace(reglastmeasurevolt8questionspace, '8volt ').replace(reglastmeasurevolt9questionspace, '9volt ').replace(reglastmeasurevolt0questionspace, '0volt ');
}

function replacefinalpart10(str){
return str.replace(reglastmeasurewatts1, '1watts ').replace(reglastmeasurewatts2, '2watts ').replace(reglastmeasurewatts3, '3watts ').replace(reglastmeasurewatts4, '4watts ').replace(reglastmeasurewatts5, '5watts ').replace(reglastmeasurewatts6, '6watts ').replace(reglastmeasurewatts7, '7watts ').replace(reglastmeasurewatts8, '8watts ').replace(reglastmeasurewatts9, '9watts ').replace(reglastmeasurewatts0, '0watts ').replace(reglastmeasurewatts1point, '1watts ').replace(reglastmeasurewatts2point, '2watts ').replace(reglastmeasurewatts3point, '3watts ').replace(reglastmeasurewatts4point, '4watts ').replace(reglastmeasurewatts5point, '5watts ').replace(reglastmeasurewatts6point, '6watts ').replace(reglastmeasurewatts7point, '7watts ').replace(reglastmeasurewatts8point, '8watts ').replace(reglastmeasurewatts9point, '9watts ').replace(reglastmeasurewatts0point, '0watts ').replace(reglastmeasurewatts1virgola, '1watts ').replace(reglastmeasurewatts2virgola, '2watts ').replace(reglastmeasurewatts3virgola, '3watts ').replace(reglastmeasurewatts4virgola, '4watts ').replace(reglastmeasurewatts5virgola, '5watts ').replace(reglastmeasurewatts6virgola, '6watts ').replace(reglastmeasurewatts7virgola, '7watts ').replace(reglastmeasurewatts8virgola, '8watts ').replace(reglastmeasurewatts9virgola, '9watts ').replace(reglastmeasurewatts0virgola, '0watts ').replace(reglastmeasurewatts1slash, '1watts /').replace(reglastmeasurewatts2slash, '2watts /').replace(reglastmeasurewatts3slash, '3watts /').replace(reglastmeasurewatts4slash, '4watts /').replace(reglastmeasurewatts5slash, '5watts /').replace(reglastmeasurewatts6slash, '6watts /').replace(reglastmeasurewatts7slash, '7watts /').replace(reglastmeasurewatts8slash, '8watts /').replace(reglastmeasurewatts9slash, '9watts /').replace(reglastmeasurewatts0slash, '0watts /').replace(reglastmeasurewatts1question, '1watts ').replace(reglastmeasurewatts2question, '2watts ').replace(reglastmeasurewatts3question, '3watts ').replace(reglastmeasurewatts4question, '4watts ').replace(reglastmeasurewatts5question, '5watts ').replace(reglastmeasurewatts6question, '6watts ').replace(reglastmeasurewatts7question, '7watts ').replace(reglastmeasurewatts8question, '8watts ').replace(reglastmeasurewatts9question, '9watts ').replace(reglastmeasurewatts0question, '0watts ').replace(reglastmeasurewatts1exclam, '1watts ').replace(reglastmeasurewatts2exclam, '2watts ').replace(reglastmeasurewatts3exclam, '3watts ').replace(reglastmeasurewatts4exclam, '4watts ').replace(reglastmeasurewatts5exclam, '5watts ').replace(reglastmeasurewatts6exclam, '6watts ').replace(reglastmeasurewatts7exclam, '7watts ').replace(reglastmeasurewatts8exclam, '8watts ').replace(reglastmeasurewatts9exclam, '9watts ').replace(reglastmeasurewatts0exclam, '0watts ').replace(reglastmeasurewatts1space, '1watts ').replace(reglastmeasurewatts2space, '2watts ').replace(reglastmeasurewatts3space, '3watts ').replace(reglastmeasurewatts4space, '4watts ').replace(reglastmeasurewatts5space, '5watts ').replace(reglastmeasurewatts6space, '6watts ').replace(reglastmeasurewatts7space, '7watts ').replace(reglastmeasurewatts8space, '8watts ').replace(reglastmeasurewatts9space, '9watts ').replace(reglastmeasurewatts0space, '0watts ').replace(reglastmeasurewatts1exclamspace, '1watts ').replace(reglastmeasurewatts2exclamspace, '2watts ').replace(reglastmeasurewatts3exclamspace, '3watts ').replace(reglastmeasurewatts4exclamspace, '4watts ').replace(reglastmeasurewatts5exclamspace, '5watts ').replace(reglastmeasurewatts6exclamspace, '6watts ').replace(reglastmeasurewatts7exclamspace, '7watts ').replace(reglastmeasurewatts8exclamspace, '8watts ').replace(reglastmeasurewatts9exclamspace, '9watts ').replace(reglastmeasurewatts0exclamspace, '0watts ').replace(reglastmeasurewatts1slashspace, '1watts /').replace(reglastmeasurewatts2slashspace, '2watts /').replace(reglastmeasurewatts3slashspace, '3watts /').replace(reglastmeasurewatts4slashspace, '4watts /').replace(reglastmeasurewatts5slashspace, '5watts /').replace(reglastmeasurewatts6slashspace, '6watts /').replace(reglastmeasurewatts7slashspace, '7watts /').replace(reglastmeasurewatts8slashspace, '8watts /').replace(reglastmeasurewatts9slashspace, '9watts /').replace(reglastmeasurewatts0slashspace, '0watts /').replace(reglastmeasurewatts1virgolaspace, '1watts ').replace(reglastmeasurewatts2virgolaspace, '2watts ').replace(reglastmeasurewatts3virgolaspace, '3watts ').replace(reglastmeasurewatts4virgolaspace, '4watts ').replace(reglastmeasurewatts5virgolaspace, '5watts ').replace(reglastmeasurewatts6virgolaspace, '6watts ').replace(reglastmeasurewatts7virgolaspace, '7watts ').replace(reglastmeasurewatts8virgolaspace, '8watts ').replace(reglastmeasurewatts9virgolaspace, '9watts ').replace(reglastmeasurewatts0virgolaspace, '0watts ').replace(reglastmeasurewatts1pointspace, '1watts ').replace(reglastmeasurewatts2pointspace, '2watts ').replace(reglastmeasurewatts3pointspace, '3watts ').replace(reglastmeasurewatts4pointspace, '4watts ').replace(reglastmeasurewatts5pointspace, '5watts ').replace(reglastmeasurewatts6pointspace, '6watts ').replace(reglastmeasurewatts7pointspace, '7watts ').replace(reglastmeasurewatts8pointspace, '8watts ').replace(reglastmeasurewatts9pointspace, '9watts ').replace(reglastmeasurewatts0pointspace, '0watts ').replace(reglastmeasurewatts1questionspace, '1watts ').replace(reglastmeasurewatts2questionspace, '2watts ').replace(reglastmeasurewatts3questionspace, '3watts ').replace(reglastmeasurewatts4questionspace, '4watts ').replace(reglastmeasurewatts5questionspace, '5watts ').replace(reglastmeasurewatts6questionspace, '6watts ').replace(reglastmeasurewatts7questionspace, '7watts ').replace(reglastmeasurewatts8questionspace, '8watts ').replace(reglastmeasurewatts9questionspace, '9watts ').replace(reglastmeasurewatts0questionspace, '0watts ');
}

function replacefinalpart11(str){
return str.replace(reglastmeasuregallons1, '1gallons ').replace(reglastmeasuregallons2, '2gallons ').replace(reglastmeasuregallons3, '3gallons ').replace(reglastmeasuregallons4, '4gallons ').replace(reglastmeasuregallons5, '5gallons ').replace(reglastmeasuregallons6, '6gallons ').replace(reglastmeasuregallons7, '7gallons ').replace(reglastmeasuregallons8, '8gallons ').replace(reglastmeasuregallons9, '9gallons ').replace(reglastmeasuregallons0, '0gallons ').replace(reglastmeasuregallons1point, '1gallons ').replace(reglastmeasuregallons2point, '2gallons ').replace(reglastmeasuregallons3point, '3gallons ').replace(reglastmeasuregallons4point, '4gallons ').replace(reglastmeasuregallons5point, '5gallons ').replace(reglastmeasuregallons6point, '6gallons ').replace(reglastmeasuregallons7point, '7gallons ').replace(reglastmeasuregallons8point, '8gallons ').replace(reglastmeasuregallons9point, '9gallons ').replace(reglastmeasuregallons0point, '0gallons ').replace(reglastmeasuregallons1virgola, '1gallons ').replace(reglastmeasuregallons2virgola, '2gallons ').replace(reglastmeasuregallons3virgola, '3gallons ').replace(reglastmeasuregallons4virgola, '4gallons ').replace(reglastmeasuregallons5virgola, '5gallons ').replace(reglastmeasuregallons6virgola, '6gallons ').replace(reglastmeasuregallons7virgola, '7gallons ').replace(reglastmeasuregallons8virgola, '8gallons ').replace(reglastmeasuregallons9virgola, '9gallons ').replace(reglastmeasuregallons0virgola, '0gallons ').replace(reglastmeasuregallons1slash, '1gallons /').replace(reglastmeasuregallons2slash, '2gallons /').replace(reglastmeasuregallons3slash, '3gallons /').replace(reglastmeasuregallons4slash, '4gallons /').replace(reglastmeasuregallons5slash, '5gallons /').replace(reglastmeasuregallons6slash, '6gallons /').replace(reglastmeasuregallons7slash, '7gallons /').replace(reglastmeasuregallons8slash, '8gallons /').replace(reglastmeasuregallons9slash, '9gallons /').replace(reglastmeasuregallons0slash, '0gallons /').replace(reglastmeasuregallons1question, '1gallons ').replace(reglastmeasuregallons2question, '2gallons ').replace(reglastmeasuregallons3question, '3gallons ').replace(reglastmeasuregallons4question, '4gallons ').replace(reglastmeasuregallons5question, '5gallons ').replace(reglastmeasuregallons6question, '6gallons ').replace(reglastmeasuregallons7question, '7gallons ').replace(reglastmeasuregallons8question, '8gallons ').replace(reglastmeasuregallons9question, '9gallons ').replace(reglastmeasuregallons0question, '0gallons ').replace(reglastmeasuregallons1exclam, '1gallons ').replace(reglastmeasuregallons2exclam, '2gallons ').replace(reglastmeasuregallons3exclam, '3gallons ').replace(reglastmeasuregallons4exclam, '4gallons ').replace(reglastmeasuregallons5exclam, '5gallons ').replace(reglastmeasuregallons6exclam, '6gallons ').replace(reglastmeasuregallons7exclam, '7gallons ').replace(reglastmeasuregallons8exclam, '8gallons ').replace(reglastmeasuregallons9exclam, '9gallons ').replace(reglastmeasuregallons0exclam, '0gallons ').replace(reglastmeasuregallons1space, '1gallons ').replace(reglastmeasuregallons2space, '2gallons ').replace(reglastmeasuregallons3space, '3gallons ').replace(reglastmeasuregallons4space, '4gallons ').replace(reglastmeasuregallons5space, '5gallons ').replace(reglastmeasuregallons6space, '6gallons ').replace(reglastmeasuregallons7space, '7gallons ').replace(reglastmeasuregallons8space, '8gallons ').replace(reglastmeasuregallons9space, '9gallons ').replace(reglastmeasuregallons0space, '0gallons ').replace(reglastmeasuregallons1exclamspace, '1gallons ').replace(reglastmeasuregallons2exclamspace, '2gallons ').replace(reglastmeasuregallons3exclamspace, '3gallons ').replace(reglastmeasuregallons4exclamspace, '4gallons ').replace(reglastmeasuregallons5exclamspace, '5gallons ').replace(reglastmeasuregallons6exclamspace, '6gallons ').replace(reglastmeasuregallons7exclamspace, '7gallons ').replace(reglastmeasuregallons8exclamspace, '8gallons ').replace(reglastmeasuregallons9exclamspace, '9gallons ').replace(reglastmeasuregallons0exclamspace, '0gallons ').replace(reglastmeasuregallons1slashspace, '1gallons /').replace(reglastmeasuregallons2slashspace, '2gallons /').replace(reglastmeasuregallons3slashspace, '3gallons /').replace(reglastmeasuregallons4slashspace, '4gallons /').replace(reglastmeasuregallons5slashspace, '5gallons /').replace(reglastmeasuregallons6slashspace, '6gallons /').replace(reglastmeasuregallons7slashspace, '7gallons /').replace(reglastmeasuregallons8slashspace, '8gallons /').replace(reglastmeasuregallons9slashspace, '9gallons /').replace(reglastmeasuregallons0slashspace, '0gallons /').replace(reglastmeasuregallons1virgolaspace, '1gallons ').replace(reglastmeasuregallons2virgolaspace, '2gallons ').replace(reglastmeasuregallons3virgolaspace, '3gallons ').replace(reglastmeasuregallons4virgolaspace, '4gallons ').replace(reglastmeasuregallons5virgolaspace, '5gallons ').replace(reglastmeasuregallons6virgolaspace, '6gallons ').replace(reglastmeasuregallons7virgolaspace, '7gallons ').replace(reglastmeasuregallons8virgolaspace, '8gallons ').replace(reglastmeasuregallons9virgolaspace, '9gallons ').replace(reglastmeasuregallons0virgolaspace, '0gallons ').replace(reglastmeasuregallons1pointspace, '1gallons ').replace(reglastmeasuregallons2pointspace, '2gallons ').replace(reglastmeasuregallons3pointspace, '3gallons ').replace(reglastmeasuregallons4pointspace, '4gallons ').replace(reglastmeasuregallons5pointspace, '5gallons ').replace(reglastmeasuregallons6pointspace, '6gallons ').replace(reglastmeasuregallons7pointspace, '7gallons ').replace(reglastmeasuregallons8pointspace, '8gallons ').replace(reglastmeasuregallons9pointspace, '9gallons ').replace(reglastmeasuregallons0pointspace, '0gallons ').replace(reglastmeasuregallons1questionspace, '1gallons ').replace(reglastmeasuregallons2questionspace, '2gallons ').replace(reglastmeasuregallons3questionspace, '3gallons ').replace(reglastmeasuregallons4questionspace, '4gallons ').replace(reglastmeasuregallons5questionspace, '5gallons ').replace(reglastmeasuregallons6questionspace, '6gallons ').replace(reglastmeasuregallons7questionspace, '7gallons ').replace(reglastmeasuregallons8questionspace, '8gallons ').replace(reglastmeasuregallons9questionspace, '9gallons ').replace(reglastmeasuregallons0questionspace, '0gallons ');
}
	
function replacefinalpart12(str){
return str.replace(reglastmeasurehertz1, '1hertz ').replace(reglastmeasurehertz2, '2hertz ').replace(reglastmeasurehertz3, '3hertz ').replace(reglastmeasurehertz4, '4hertz ').replace(reglastmeasurehertz5, '5hertz ').replace(reglastmeasurehertz6, '6hertz ').replace(reglastmeasurehertz7, '7hertz ').replace(reglastmeasurehertz8, '8hertz ').replace(reglastmeasurehertz9, '9hertz ').replace(reglastmeasurehertz0, '0hertz ').replace(reglastmeasurehertz1point, '1hertz ').replace(reglastmeasurehertz2point, '2hertz ').replace(reglastmeasurehertz3point, '3hertz ').replace(reglastmeasurehertz4point, '4hertz ').replace(reglastmeasurehertz5point, '5hertz ').replace(reglastmeasurehertz6point, '6hertz ').replace(reglastmeasurehertz7point, '7hertz ').replace(reglastmeasurehertz8point, '8hertz ').replace(reglastmeasurehertz9point, '9hertz ').replace(reglastmeasurehertz0point, '0hertz ').replace(reglastmeasurehertz1virgola, '1hertz ').replace(reglastmeasurehertz2virgola, '2hertz ').replace(reglastmeasurehertz3virgola, '3hertz ').replace(reglastmeasurehertz4virgola, '4hertz ').replace(reglastmeasurehertz5virgola, '5hertz ').replace(reglastmeasurehertz6virgola, '6hertz ').replace(reglastmeasurehertz7virgola, '7hertz ').replace(reglastmeasurehertz8virgola, '8hertz ').replace(reglastmeasurehertz9virgola, '9hertz ').replace(reglastmeasurehertz0virgola, '0hertz ').replace(reglastmeasurehertz1slash, '1hertz /').replace(reglastmeasurehertz2slash, '2hertz /').replace(reglastmeasurehertz3slash, '3hertz /').replace(reglastmeasurehertz4slash, '4hertz /').replace(reglastmeasurehertz5slash, '5hertz /').replace(reglastmeasurehertz6slash, '6hertz /').replace(reglastmeasurehertz7slash, '7hertz /').replace(reglastmeasurehertz8slash, '8hertz /').replace(reglastmeasurehertz9slash, '9hertz /').replace(reglastmeasurehertz0slash, '0hertz /').replace(reglastmeasurehertz1question, '1hertz ').replace(reglastmeasurehertz2question, '2hertz ').replace(reglastmeasurehertz3question, '3hertz ').replace(reglastmeasurehertz4question, '4hertz ').replace(reglastmeasurehertz5question, '5hertz ').replace(reglastmeasurehertz6question, '6hertz ').replace(reglastmeasurehertz7question, '7hertz ').replace(reglastmeasurehertz8question, '8hertz ').replace(reglastmeasurehertz9question, '9hertz ').replace(reglastmeasurehertz0question, '0hertz ').replace(reglastmeasurehertz1exclam, '1hertz ').replace(reglastmeasurehertz2exclam, '2hertz ').replace(reglastmeasurehertz3exclam, '3hertz ').replace(reglastmeasurehertz4exclam, '4hertz ').replace(reglastmeasurehertz5exclam, '5hertz ').replace(reglastmeasurehertz6exclam, '6hertz ').replace(reglastmeasurehertz7exclam, '7hertz ').replace(reglastmeasurehertz8exclam, '8hertz ').replace(reglastmeasurehertz9exclam, '9hertz ').replace(reglastmeasurehertz0exclam, '0hertz ').replace(reglastmeasurehertz1space, '1hertz ').replace(reglastmeasurehertz2space, '2hertz ').replace(reglastmeasurehertz3space, '3hertz ').replace(reglastmeasurehertz4space, '4hertz ').replace(reglastmeasurehertz5space, '5hertz ').replace(reglastmeasurehertz6space, '6hertz ').replace(reglastmeasurehertz7space, '7hertz ').replace(reglastmeasurehertz8space, '8hertz ').replace(reglastmeasurehertz9space, '9hertz ').replace(reglastmeasurehertz0space, '0hertz ').replace(reglastmeasurehertz1exclamspace, '1hertz ').replace(reglastmeasurehertz2exclamspace, '2hertz ').replace(reglastmeasurehertz3exclamspace, '3hertz ').replace(reglastmeasurehertz4exclamspace, '4hertz ').replace(reglastmeasurehertz5exclamspace, '5hertz ').replace(reglastmeasurehertz6exclamspace, '6hertz ').replace(reglastmeasurehertz7exclamspace, '7hertz ').replace(reglastmeasurehertz8exclamspace, '8hertz ').replace(reglastmeasurehertz9exclamspace, '9hertz ').replace(reglastmeasurehertz0exclamspace, '0hertz ').replace(reglastmeasurehertz1slashspace, '1hertz /').replace(reglastmeasurehertz2slashspace, '2hertz /').replace(reglastmeasurehertz3slashspace, '3hertz /').replace(reglastmeasurehertz4slashspace, '4hertz /').replace(reglastmeasurehertz5slashspace, '5hertz /').replace(reglastmeasurehertz6slashspace, '6hertz /').replace(reglastmeasurehertz7slashspace, '7hertz /').replace(reglastmeasurehertz8slashspace, '8hertz /').replace(reglastmeasurehertz9slashspace, '9hertz /').replace(reglastmeasurehertz0slashspace, '0hertz /').replace(reglastmeasurehertz1virgolaspace, '1hertz ').replace(reglastmeasurehertz2virgolaspace, '2hertz ').replace(reglastmeasurehertz3virgolaspace, '3hertz ').replace(reglastmeasurehertz4virgolaspace, '4hertz ').replace(reglastmeasurehertz5virgolaspace, '5hertz ').replace(reglastmeasurehertz6virgolaspace, '6hertz ').replace(reglastmeasurehertz7virgolaspace, '7hertz ').replace(reglastmeasurehertz8virgolaspace, '8hertz ').replace(reglastmeasurehertz9virgolaspace, '9hertz ').replace(reglastmeasurehertz0virgolaspace, '0hertz ').replace(reglastmeasurehertz1pointspace, '1hertz ').replace(reglastmeasurehertz2pointspace, '2hertz ').replace(reglastmeasurehertz3pointspace, '3hertz ').replace(reglastmeasurehertz4pointspace, '4hertz ').replace(reglastmeasurehertz5pointspace, '5hertz ').replace(reglastmeasurehertz6pointspace, '6hertz ').replace(reglastmeasurehertz7pointspace, '7hertz ').replace(reglastmeasurehertz8pointspace, '8hertz ').replace(reglastmeasurehertz9pointspace, '9hertz ').replace(reglastmeasurehertz0pointspace, '0hertz ').replace(reglastmeasurehertz1questionspace, '1hertz ').replace(reglastmeasurehertz2questionspace, '2hertz ').replace(reglastmeasurehertz3questionspace, '3hertz ').replace(reglastmeasurehertz4questionspace, '4hertz ').replace(reglastmeasurehertz5questionspace, '5hertz ').replace(reglastmeasurehertz6questionspace, '6hertz ').replace(reglastmeasurehertz7questionspace, '7hertz ').replace(reglastmeasurehertz8questionspace, '8hertz ').replace(reglastmeasurehertz9questionspace, '9hertz ').replace(reglastmeasurehertz0questionspace, '0hertz ');
}
	
function replacefinalpart13(str){
return str.replace(reglastmeasuremilligrams1, '1milligrams ').replace(reglastmeasuremilligrams2, '2milligrams ').replace(reglastmeasuremilligrams3, '3milligrams ').replace(reglastmeasuremilligrams4, '4milligrams ').replace(reglastmeasuremilligrams5, '5milligrams ').replace(reglastmeasuremilligrams6, '6milligrams ').replace(reglastmeasuremilligrams7, '7milligrams ').replace(reglastmeasuremilligrams8, '8milligrams ').replace(reglastmeasuremilligrams9, '9milligrams ').replace(reglastmeasuremilligrams0, '0milligrams ').replace(reglastmeasuremilligrams1point, '1milligrams ').replace(reglastmeasuremilligrams2point, '2milligrams ').replace(reglastmeasuremilligrams3point, '3milligrams ').replace(reglastmeasuremilligrams4point, '4milligrams ').replace(reglastmeasuremilligrams5point, '5milligrams ').replace(reglastmeasuremilligrams6point, '6milligrams ').replace(reglastmeasuremilligrams7point, '7milligrams ').replace(reglastmeasuremilligrams8point, '8milligrams ').replace(reglastmeasuremilligrams9point, '9milligrams ').replace(reglastmeasuremilligrams0point, '0milligrams ').replace(reglastmeasuremilligrams1virgola, '1milligrams ').replace(reglastmeasuremilligrams2virgola, '2milligrams ').replace(reglastmeasuremilligrams3virgola, '3milligrams ').replace(reglastmeasuremilligrams4virgola, '4milligrams ').replace(reglastmeasuremilligrams5virgola, '5milligrams ').replace(reglastmeasuremilligrams6virgola, '6milligrams ').replace(reglastmeasuremilligrams7virgola, '7milligrams ').replace(reglastmeasuremilligrams8virgola, '8milligrams ').replace(reglastmeasuremilligrams9virgola, '9milligrams ').replace(reglastmeasuremilligrams0virgola, '0milligrams ').replace(reglastmeasuremilligrams1slash, '1milligrams /').replace(reglastmeasuremilligrams2slash, '2milligrams /').replace(reglastmeasuremilligrams3slash, '3milligrams /').replace(reglastmeasuremilligrams4slash, '4milligrams /').replace(reglastmeasuremilligrams5slash, '5milligrams /').replace(reglastmeasuremilligrams6slash, '6milligrams /').replace(reglastmeasuremilligrams7slash, '7milligrams /').replace(reglastmeasuremilligrams8slash, '8milligrams /').replace(reglastmeasuremilligrams9slash, '9milligrams /').replace(reglastmeasuremilligrams0slash, '0milligrams /').replace(reglastmeasuremilligrams1question, '1milligrams ').replace(reglastmeasuremilligrams2question, '2milligrams ').replace(reglastmeasuremilligrams3question, '3milligrams ').replace(reglastmeasuremilligrams4question, '4milligrams ').replace(reglastmeasuremilligrams5question, '5milligrams ').replace(reglastmeasuremilligrams6question, '6milligrams ').replace(reglastmeasuremilligrams7question, '7milligrams ').replace(reglastmeasuremilligrams8question, '8milligrams ').replace(reglastmeasuremilligrams9question, '9milligrams ').replace(reglastmeasuremilligrams0question, '0milligrams ').replace(reglastmeasuremilligrams1exclam, '1milligrams ').replace(reglastmeasuremilligrams2exclam, '2milligrams ').replace(reglastmeasuremilligrams3exclam, '3milligrams ').replace(reglastmeasuremilligrams4exclam, '4milligrams ').replace(reglastmeasuremilligrams5exclam, '5milligrams ').replace(reglastmeasuremilligrams6exclam, '6milligrams ').replace(reglastmeasuremilligrams7exclam, '7milligrams ').replace(reglastmeasuremilligrams8exclam, '8milligrams ').replace(reglastmeasuremilligrams9exclam, '9milligrams ').replace(reglastmeasuremilligrams0exclam, '0milligrams ').replace(reglastmeasuremilligrams1space, '1milligrams ').replace(reglastmeasuremilligrams2space, '2milligrams ').replace(reglastmeasuremilligrams3space, '3milligrams ').replace(reglastmeasuremilligrams4space, '4milligrams ').replace(reglastmeasuremilligrams5space, '5milligrams ').replace(reglastmeasuremilligrams6space, '6milligrams ').replace(reglastmeasuremilligrams7space, '7milligrams ').replace(reglastmeasuremilligrams8space, '8milligrams ').replace(reglastmeasuremilligrams9space, '9milligrams ').replace(reglastmeasuremilligrams0space, '0milligrams ').replace(reglastmeasuremilligrams1exclamspace, '1milligrams ').replace(reglastmeasuremilligrams2exclamspace, '2milligrams ').replace(reglastmeasuremilligrams3exclamspace, '3milligrams ').replace(reglastmeasuremilligrams4exclamspace, '4milligrams ').replace(reglastmeasuremilligrams5exclamspace, '5milligrams ').replace(reglastmeasuremilligrams6exclamspace, '6milligrams ').replace(reglastmeasuremilligrams7exclamspace, '7milligrams ').replace(reglastmeasuremilligrams8exclamspace, '8milligrams ').replace(reglastmeasuremilligrams9exclamspace, '9milligrams ').replace(reglastmeasuremilligrams0exclamspace, '0milligrams ').replace(reglastmeasuremilligrams1slashspace, '1milligrams /').replace(reglastmeasuremilligrams2slashspace, '2milligrams /').replace(reglastmeasuremilligrams3slashspace, '3milligrams /').replace(reglastmeasuremilligrams4slashspace, '4milligrams /').replace(reglastmeasuremilligrams5slashspace, '5milligrams /').replace(reglastmeasuremilligrams6slashspace, '6milligrams /').replace(reglastmeasuremilligrams7slashspace, '7milligrams /').replace(reglastmeasuremilligrams8slashspace, '8milligrams /').replace(reglastmeasuremilligrams9slashspace, '9milligrams /').replace(reglastmeasuremilligrams0slashspace, '0milligrams /').replace(reglastmeasuremilligrams1virgolaspace, '1milligrams ').replace(reglastmeasuremilligrams2virgolaspace, '2milligrams ').replace(reglastmeasuremilligrams3virgolaspace, '3milligrams ').replace(reglastmeasuremilligrams4virgolaspace, '4milligrams ').replace(reglastmeasuremilligrams5virgolaspace, '5milligrams ').replace(reglastmeasuremilligrams6virgolaspace, '6milligrams ').replace(reglastmeasuremilligrams7virgolaspace, '7milligrams ').replace(reglastmeasuremilligrams8virgolaspace, '8milligrams ').replace(reglastmeasuremilligrams9virgolaspace, '9milligrams ').replace(reglastmeasuremilligrams0virgolaspace, '0milligrams ').replace(reglastmeasuremilligrams1pointspace, '1milligrams ').replace(reglastmeasuremilligrams2pointspace, '2milligrams ').replace(reglastmeasuremilligrams3pointspace, '3milligrams ').replace(reglastmeasuremilligrams4pointspace, '4milligrams ').replace(reglastmeasuremilligrams5pointspace, '5milligrams ').replace(reglastmeasuremilligrams6pointspace, '6milligrams ').replace(reglastmeasuremilligrams7pointspace, '7milligrams ').replace(reglastmeasuremilligrams8pointspace, '8milligrams ').replace(reglastmeasuremilligrams9pointspace, '9milligrams ').replace(reglastmeasuremilligrams0pointspace, '0milligrams ').replace(reglastmeasuremilligrams1questionspace, '1milligrams ').replace(reglastmeasuremilligrams2questionspace, '2milligrams ').replace(reglastmeasuremilligrams3questionspace, '3milligrams ').replace(reglastmeasuremilligrams4questionspace, '4milligrams ').replace(reglastmeasuremilligrams5questionspace, '5milligrams ').replace(reglastmeasuremilligrams6questionspace, '6milligrams ').replace(reglastmeasuremilligrams7questionspace, '7milligrams ').replace(reglastmeasuremilligrams8questionspace, '8milligrams ').replace(reglastmeasuremilligrams9questionspace, '9milligrams ').replace(reglastmeasuremilligrams0questionspace, '0milligrams ');
}
	
function replacefinalpart14(str){
return str.replace(reglastmeasurehectograms1, '1hectograms ').replace(reglastmeasurehectograms2, '2hectograms ').replace(reglastmeasurehectograms3, '3hectograms ').replace(reglastmeasurehectograms4, '4hectograms ').replace(reglastmeasurehectograms5, '5hectograms ').replace(reglastmeasurehectograms6, '6hectograms ').replace(reglastmeasurehectograms7, '7hectograms ').replace(reglastmeasurehectograms8, '8hectograms ').replace(reglastmeasurehectograms9, '9hectograms ').replace(reglastmeasurehectograms0, '0hectograms ').replace(reglastmeasurehectograms1point, '1hectograms ').replace(reglastmeasurehectograms2point, '2hectograms ').replace(reglastmeasurehectograms3point, '3hectograms ').replace(reglastmeasurehectograms4point, '4hectograms ').replace(reglastmeasurehectograms5point, '5hectograms ').replace(reglastmeasurehectograms6point, '6hectograms ').replace(reglastmeasurehectograms7point, '7hectograms ').replace(reglastmeasurehectograms8point, '8hectograms ').replace(reglastmeasurehectograms9point, '9hectograms ').replace(reglastmeasurehectograms0point, '0hectograms ').replace(reglastmeasurehectograms1virgola, '1hectograms ').replace(reglastmeasurehectograms2virgola, '2hectograms ').replace(reglastmeasurehectograms3virgola, '3hectograms ').replace(reglastmeasurehectograms4virgola, '4hectograms ').replace(reglastmeasurehectograms5virgola, '5hectograms ').replace(reglastmeasurehectograms6virgola, '6hectograms ').replace(reglastmeasurehectograms7virgola, '7hectograms ').replace(reglastmeasurehectograms8virgola, '8hectograms ').replace(reglastmeasurehectograms9virgola, '9hectograms ').replace(reglastmeasurehectograms0virgola, '0hectograms ').replace(reglastmeasurehectograms1slash, '1hectograms /').replace(reglastmeasurehectograms2slash, '2hectograms /').replace(reglastmeasurehectograms3slash, '3hectograms /').replace(reglastmeasurehectograms4slash, '4hectograms /').replace(reglastmeasurehectograms5slash, '5hectograms /').replace(reglastmeasurehectograms6slash, '6hectograms /').replace(reglastmeasurehectograms7slash, '7hectograms /').replace(reglastmeasurehectograms8slash, '8hectograms /').replace(reglastmeasurehectograms9slash, '9hectograms /').replace(reglastmeasurehectograms0slash, '0hectograms /').replace(reglastmeasurehectograms1question, '1hectograms ').replace(reglastmeasurehectograms2question, '2hectograms ').replace(reglastmeasurehectograms3question, '3hectograms ').replace(reglastmeasurehectograms4question, '4hectograms ').replace(reglastmeasurehectograms5question, '5hectograms ').replace(reglastmeasurehectograms6question, '6hectograms ').replace(reglastmeasurehectograms7question, '7hectograms ').replace(reglastmeasurehectograms8question, '8hectograms ').replace(reglastmeasurehectograms9question, '9hectograms ').replace(reglastmeasurehectograms0question, '0hectograms ').replace(reglastmeasurehectograms1exclam, '1hectograms ').replace(reglastmeasurehectograms2exclam, '2hectograms ').replace(reglastmeasurehectograms3exclam, '3hectograms ').replace(reglastmeasurehectograms4exclam, '4hectograms ').replace(reglastmeasurehectograms5exclam, '5hectograms ').replace(reglastmeasurehectograms6exclam, '6hectograms ').replace(reglastmeasurehectograms7exclam, '7hectograms ').replace(reglastmeasurehectograms8exclam, '8hectograms ').replace(reglastmeasurehectograms9exclam, '9hectograms ').replace(reglastmeasurehectograms0exclam, '0hectograms ').replace(reglastmeasurehectograms1space, '1hectograms ').replace(reglastmeasurehectograms2space, '2hectograms ').replace(reglastmeasurehectograms3space, '3hectograms ').replace(reglastmeasurehectograms4space, '4hectograms ').replace(reglastmeasurehectograms5space, '5hectograms ').replace(reglastmeasurehectograms6space, '6hectograms ').replace(reglastmeasurehectograms7space, '7hectograms ').replace(reglastmeasurehectograms8space, '8hectograms ').replace(reglastmeasurehectograms9space, '9hectograms ').replace(reglastmeasurehectograms0space, '0hectograms ').replace(reglastmeasurehectograms1exclamspace, '1hectograms ').replace(reglastmeasurehectograms2exclamspace, '2hectograms ').replace(reglastmeasurehectograms3exclamspace, '3hectograms ').replace(reglastmeasurehectograms4exclamspace, '4hectograms ').replace(reglastmeasurehectograms5exclamspace, '5hectograms ').replace(reglastmeasurehectograms6exclamspace, '6hectograms ').replace(reglastmeasurehectograms7exclamspace, '7hectograms ').replace(reglastmeasurehectograms8exclamspace, '8hectograms ').replace(reglastmeasurehectograms9exclamspace, '9hectograms ').replace(reglastmeasurehectograms0exclamspace, '0hectograms ').replace(reglastmeasurehectograms1slashspace, '1hectograms /').replace(reglastmeasurehectograms2slashspace, '2hectograms /').replace(reglastmeasurehectograms3slashspace, '3hectograms /').replace(reglastmeasurehectograms4slashspace, '4hectograms /').replace(reglastmeasurehectograms5slashspace, '5hectograms /').replace(reglastmeasurehectograms6slashspace, '6hectograms /').replace(reglastmeasurehectograms7slashspace, '7hectograms /').replace(reglastmeasurehectograms8slashspace, '8hectograms /').replace(reglastmeasurehectograms9slashspace, '9hectograms /').replace(reglastmeasurehectograms0slashspace, '0hectograms /').replace(reglastmeasurehectograms1virgolaspace, '1hectograms ').replace(reglastmeasurehectograms2virgolaspace, '2hectograms ').replace(reglastmeasurehectograms3virgolaspace, '3hectograms ').replace(reglastmeasurehectograms4virgolaspace, '4hectograms ').replace(reglastmeasurehectograms5virgolaspace, '5hectograms ').replace(reglastmeasurehectograms6virgolaspace, '6hectograms ').replace(reglastmeasurehectograms7virgolaspace, '7hectograms ').replace(reglastmeasurehectograms8virgolaspace, '8hectograms ').replace(reglastmeasurehectograms9virgolaspace, '9hectograms ').replace(reglastmeasurehectograms0virgolaspace, '0hectograms ').replace(reglastmeasurehectograms1pointspace, '1hectograms ').replace(reglastmeasurehectograms2pointspace, '2hectograms ').replace(reglastmeasurehectograms3pointspace, '3hectograms ').replace(reglastmeasurehectograms4pointspace, '4hectograms ').replace(reglastmeasurehectograms5pointspace, '5hectograms ').replace(reglastmeasurehectograms6pointspace, '6hectograms ').replace(reglastmeasurehectograms7pointspace, '7hectograms ').replace(reglastmeasurehectograms8pointspace, '8hectograms ').replace(reglastmeasurehectograms9pointspace, '9hectograms ').replace(reglastmeasurehectograms0pointspace, '0hectograms ').replace(reglastmeasurehectograms1questionspace, '1hectograms ').replace(reglastmeasurehectograms2questionspace, '2hectograms ').replace(reglastmeasurehectograms3questionspace, '3hectograms ').replace(reglastmeasurehectograms4questionspace, '4hectograms ').replace(reglastmeasurehectograms5questionspace, '5hectograms ').replace(reglastmeasurehectograms6questionspace, '6hectograms ').replace(reglastmeasurehectograms7questionspace, '7hectograms ').replace(reglastmeasurehectograms8questionspace, '8hectograms ').replace(reglastmeasurehectograms9questionspace, '9hectograms ').replace(reglastmeasurehectograms0questionspace, '0hectograms ');
}

function replacefinalpart15(str){
return str.replace(reglastmeasuregigabyte1, '1gigabyte ').replace(reglastmeasuregigabyte2, '2gigabyte ').replace(reglastmeasuregigabyte3, '3gigabyte ').replace(reglastmeasuregigabyte4, '4gigabyte ').replace(reglastmeasuregigabyte5, '5gigabyte ').replace(reglastmeasuregigabyte6, '6gigabyte ').replace(reglastmeasuregigabyte7, '7gigabyte ').replace(reglastmeasuregigabyte8, '8gigabyte ').replace(reglastmeasuregigabyte9, '9gigabyte ').replace(reglastmeasuregigabyte0, '0gigabyte ').replace(reglastmeasuregigabyte1point, '1gigabyte ').replace(reglastmeasuregigabyte2point, '2gigabyte ').replace(reglastmeasuregigabyte3point, '3gigabyte ').replace(reglastmeasuregigabyte4point, '4gigabyte ').replace(reglastmeasuregigabyte5point, '5gigabyte ').replace(reglastmeasuregigabyte6point, '6gigabyte ').replace(reglastmeasuregigabyte7point, '7gigabyte ').replace(reglastmeasuregigabyte8point, '8gigabyte ').replace(reglastmeasuregigabyte9point, '9gigabyte ').replace(reglastmeasuregigabyte0point, '0gigabyte ').replace(reglastmeasuregigabyte1virgola, '1gigabyte ').replace(reglastmeasuregigabyte2virgola, '2gigabyte ').replace(reglastmeasuregigabyte3virgola, '3gigabyte ').replace(reglastmeasuregigabyte4virgola, '4gigabyte ').replace(reglastmeasuregigabyte5virgola, '5gigabyte ').replace(reglastmeasuregigabyte6virgola, '6gigabyte ').replace(reglastmeasuregigabyte7virgola, '7gigabyte ').replace(reglastmeasuregigabyte8virgola, '8gigabyte ').replace(reglastmeasuregigabyte9virgola, '9gigabyte ').replace(reglastmeasuregigabyte0virgola, '0gigabyte ').replace(reglastmeasuregigabyte1slash, '1gigabyte /').replace(reglastmeasuregigabyte2slash, '2gigabyte /').replace(reglastmeasuregigabyte3slash, '3gigabyte /').replace(reglastmeasuregigabyte4slash, '4gigabyte /').replace(reglastmeasuregigabyte5slash, '5gigabyte /').replace(reglastmeasuregigabyte6slash, '6gigabyte /').replace(reglastmeasuregigabyte7slash, '7gigabyte /').replace(reglastmeasuregigabyte8slash, '8gigabyte /').replace(reglastmeasuregigabyte9slash, '9gigabyte /').replace(reglastmeasuregigabyte0slash, '0gigabyte /').replace(reglastmeasuregigabyte1question, '1gigabyte ').replace(reglastmeasuregigabyte2question, '2gigabyte ').replace(reglastmeasuregigabyte3question, '3gigabyte ').replace(reglastmeasuregigabyte4question, '4gigabyte ').replace(reglastmeasuregigabyte5question, '5gigabyte ').replace(reglastmeasuregigabyte6question, '6gigabyte ').replace(reglastmeasuregigabyte7question, '7gigabyte ').replace(reglastmeasuregigabyte8question, '8gigabyte ').replace(reglastmeasuregigabyte9question, '9gigabyte ').replace(reglastmeasuregigabyte0question, '0gigabyte ').replace(reglastmeasuregigabyte1exclam, '1gigabyte ').replace(reglastmeasuregigabyte2exclam, '2gigabyte ').replace(reglastmeasuregigabyte3exclam, '3gigabyte ').replace(reglastmeasuregigabyte4exclam, '4gigabyte ').replace(reglastmeasuregigabyte5exclam, '5gigabyte ').replace(reglastmeasuregigabyte6exclam, '6gigabyte ').replace(reglastmeasuregigabyte7exclam, '7gigabyte ').replace(reglastmeasuregigabyte8exclam, '8gigabyte ').replace(reglastmeasuregigabyte9exclam, '9gigabyte ').replace(reglastmeasuregigabyte0exclam, '0gigabyte ').replace(reglastmeasuregigabyte1space, '1gigabyte ').replace(reglastmeasuregigabyte2space, '2gigabyte ').replace(reglastmeasuregigabyte3space, '3gigabyte ').replace(reglastmeasuregigabyte4space, '4gigabyte ').replace(reglastmeasuregigabyte5space, '5gigabyte ').replace(reglastmeasuregigabyte6space, '6gigabyte ').replace(reglastmeasuregigabyte7space, '7gigabyte ').replace(reglastmeasuregigabyte8space, '8gigabyte ').replace(reglastmeasuregigabyte9space, '9gigabyte ').replace(reglastmeasuregigabyte0space, '0gigabyte ').replace(reglastmeasuregigabyte1exclamspace, '1gigabyte ').replace(reglastmeasuregigabyte2exclamspace, '2gigabyte ').replace(reglastmeasuregigabyte3exclamspace, '3gigabyte ').replace(reglastmeasuregigabyte4exclamspace, '4gigabyte ').replace(reglastmeasuregigabyte5exclamspace, '5gigabyte ').replace(reglastmeasuregigabyte6exclamspace, '6gigabyte ').replace(reglastmeasuregigabyte7exclamspace, '7gigabyte ').replace(reglastmeasuregigabyte8exclamspace, '8gigabyte ').replace(reglastmeasuregigabyte9exclamspace, '9gigabyte ').replace(reglastmeasuregigabyte0exclamspace, '0gigabyte ').replace(reglastmeasuregigabyte1slashspace, '1gigabyte /').replace(reglastmeasuregigabyte2slashspace, '2gigabyte /').replace(reglastmeasuregigabyte3slashspace, '3gigabyte /').replace(reglastmeasuregigabyte4slashspace, '4gigabyte /').replace(reglastmeasuregigabyte5slashspace, '5gigabyte /').replace(reglastmeasuregigabyte6slashspace, '6gigabyte /').replace(reglastmeasuregigabyte7slashspace, '7gigabyte /').replace(reglastmeasuregigabyte8slashspace, '8gigabyte /').replace(reglastmeasuregigabyte9slashspace, '9gigabyte /').replace(reglastmeasuregigabyte0slashspace, '0gigabyte /').replace(reglastmeasuregigabyte1virgolaspace, '1gigabyte ').replace(reglastmeasuregigabyte2virgolaspace, '2gigabyte ').replace(reglastmeasuregigabyte3virgolaspace, '3gigabyte ').replace(reglastmeasuregigabyte4virgolaspace, '4gigabyte ').replace(reglastmeasuregigabyte5virgolaspace, '5gigabyte ').replace(reglastmeasuregigabyte6virgolaspace, '6gigabyte ').replace(reglastmeasuregigabyte7virgolaspace, '7gigabyte ').replace(reglastmeasuregigabyte8virgolaspace, '8gigabyte ').replace(reglastmeasuregigabyte9virgolaspace, '9gigabyte ').replace(reglastmeasuregigabyte0virgolaspace, '0gigabyte ').replace(reglastmeasuregigabyte1pointspace, '1gigabyte ').replace(reglastmeasuregigabyte2pointspace, '2gigabyte ').replace(reglastmeasuregigabyte3pointspace, '3gigabyte ').replace(reglastmeasuregigabyte4pointspace, '4gigabyte ').replace(reglastmeasuregigabyte5pointspace, '5gigabyte ').replace(reglastmeasuregigabyte6pointspace, '6gigabyte ').replace(reglastmeasuregigabyte7pointspace, '7gigabyte ').replace(reglastmeasuregigabyte8pointspace, '8gigabyte ').replace(reglastmeasuregigabyte9pointspace, '9gigabyte ').replace(reglastmeasuregigabyte0pointspace, '0gigabyte ').replace(reglastmeasuregigabyte1questionspace, '1gigabyte ').replace(reglastmeasuregigabyte2questionspace, '2gigabyte ').replace(reglastmeasuregigabyte3questionspace, '3gigabyte ').replace(reglastmeasuregigabyte4questionspace, '4gigabyte ').replace(reglastmeasuregigabyte5questionspace, '5gigabyte ').replace(reglastmeasuregigabyte6questionspace, '6gigabyte ').replace(reglastmeasuregigabyte7questionspace, '7gigabyte ').replace(reglastmeasuregigabyte8questionspace, '8gigabyte ').replace(reglastmeasuregigabyte9questionspace, '9gigabyte ').replace(reglastmeasuregigabyte0questionspace, '0gigabyte ');
}

function replacefinalpart16(str){
return str.replace(reglastmeasuremegabyte1, '1megabyte ').replace(reglastmeasuremegabyte2, '2megabyte ').replace(reglastmeasuremegabyte3, '3megabyte ').replace(reglastmeasuremegabyte4, '4megabyte ').replace(reglastmeasuremegabyte5, '5megabyte ').replace(reglastmeasuremegabyte6, '6megabyte ').replace(reglastmeasuremegabyte7, '7megabyte ').replace(reglastmeasuremegabyte8, '8megabyte ').replace(reglastmeasuremegabyte9, '9megabyte ').replace(reglastmeasuremegabyte0, '0megabyte ').replace(reglastmeasuremegabyte1point, '1megabyte ').replace(reglastmeasuremegabyte2point, '2megabyte ').replace(reglastmeasuremegabyte3point, '3megabyte ').replace(reglastmeasuremegabyte4point, '4megabyte ').replace(reglastmeasuremegabyte5point, '5megabyte ').replace(reglastmeasuremegabyte6point, '6megabyte ').replace(reglastmeasuremegabyte7point, '7megabyte ').replace(reglastmeasuremegabyte8point, '8megabyte ').replace(reglastmeasuremegabyte9point, '9megabyte ').replace(reglastmeasuremegabyte0point, '0megabyte ').replace(reglastmeasuremegabyte1virgola, '1megabyte ').replace(reglastmeasuremegabyte2virgola, '2megabyte ').replace(reglastmeasuremegabyte3virgola, '3megabyte ').replace(reglastmeasuremegabyte4virgola, '4megabyte ').replace(reglastmeasuremegabyte5virgola, '5megabyte ').replace(reglastmeasuremegabyte6virgola, '6megabyte ').replace(reglastmeasuremegabyte7virgola, '7megabyte ').replace(reglastmeasuremegabyte8virgola, '8megabyte ').replace(reglastmeasuremegabyte9virgola, '9megabyte ').replace(reglastmeasuremegabyte0virgola, '0megabyte ').replace(reglastmeasuremegabyte1slash, '1megabyte /').replace(reglastmeasuremegabyte2slash, '2megabyte /').replace(reglastmeasuremegabyte3slash, '3megabyte /').replace(reglastmeasuremegabyte4slash, '4megabyte /').replace(reglastmeasuremegabyte5slash, '5megabyte /').replace(reglastmeasuremegabyte6slash, '6megabyte /').replace(reglastmeasuremegabyte7slash, '7megabyte /').replace(reglastmeasuremegabyte8slash, '8megabyte /').replace(reglastmeasuremegabyte9slash, '9megabyte /').replace(reglastmeasuremegabyte0slash, '0megabyte /').replace(reglastmeasuremegabyte1question, '1megabyte ').replace(reglastmeasuremegabyte2question, '2megabyte ').replace(reglastmeasuremegabyte3question, '3megabyte ').replace(reglastmeasuremegabyte4question, '4megabyte ').replace(reglastmeasuremegabyte5question, '5megabyte ').replace(reglastmeasuremegabyte6question, '6megabyte ').replace(reglastmeasuremegabyte7question, '7megabyte ').replace(reglastmeasuremegabyte8question, '8megabyte ').replace(reglastmeasuremegabyte9question, '9megabyte ').replace(reglastmeasuremegabyte0question, '0megabyte ').replace(reglastmeasuremegabyte1exclam, '1megabyte ').replace(reglastmeasuremegabyte2exclam, '2megabyte ').replace(reglastmeasuremegabyte3exclam, '3megabyte ').replace(reglastmeasuremegabyte4exclam, '4megabyte ').replace(reglastmeasuremegabyte5exclam, '5megabyte ').replace(reglastmeasuremegabyte6exclam, '6megabyte ').replace(reglastmeasuremegabyte7exclam, '7megabyte ').replace(reglastmeasuremegabyte8exclam, '8megabyte ').replace(reglastmeasuremegabyte9exclam, '9megabyte ').replace(reglastmeasuremegabyte0exclam, '0megabyte ').replace(reglastmeasuremegabyte1space, '1megabyte ').replace(reglastmeasuremegabyte2space, '2megabyte ').replace(reglastmeasuremegabyte3space, '3megabyte ').replace(reglastmeasuremegabyte4space, '4megabyte ').replace(reglastmeasuremegabyte5space, '5megabyte ').replace(reglastmeasuremegabyte6space, '6megabyte ').replace(reglastmeasuremegabyte7space, '7megabyte ').replace(reglastmeasuremegabyte8space, '8megabyte ').replace(reglastmeasuremegabyte9space, '9megabyte ').replace(reglastmeasuremegabyte0space, '0megabyte ').replace(reglastmeasuremegabyte1exclamspace, '1megabyte ').replace(reglastmeasuremegabyte2exclamspace, '2megabyte ').replace(reglastmeasuremegabyte3exclamspace, '3megabyte ').replace(reglastmeasuremegabyte4exclamspace, '4megabyte ').replace(reglastmeasuremegabyte5exclamspace, '5megabyte ').replace(reglastmeasuremegabyte6exclamspace, '6megabyte ').replace(reglastmeasuremegabyte7exclamspace, '7megabyte ').replace(reglastmeasuremegabyte8exclamspace, '8megabyte ').replace(reglastmeasuremegabyte9exclamspace, '9megabyte ').replace(reglastmeasuremegabyte0exclamspace, '0megabyte ').replace(reglastmeasuremegabyte1slashspace, '1megabyte /').replace(reglastmeasuremegabyte2slashspace, '2megabyte /').replace(reglastmeasuremegabyte3slashspace, '3megabyte /').replace(reglastmeasuremegabyte4slashspace, '4megabyte /').replace(reglastmeasuremegabyte5slashspace, '5megabyte /').replace(reglastmeasuremegabyte6slashspace, '6megabyte /').replace(reglastmeasuremegabyte7slashspace, '7megabyte /').replace(reglastmeasuremegabyte8slashspace, '8megabyte /').replace(reglastmeasuremegabyte9slashspace, '9megabyte /').replace(reglastmeasuremegabyte0slashspace, '0megabyte /').replace(reglastmeasuremegabyte1virgolaspace, '1megabyte ').replace(reglastmeasuremegabyte2virgolaspace, '2megabyte ').replace(reglastmeasuremegabyte3virgolaspace, '3megabyte ').replace(reglastmeasuremegabyte4virgolaspace, '4megabyte ').replace(reglastmeasuremegabyte5virgolaspace, '5megabyte ').replace(reglastmeasuremegabyte6virgolaspace, '6megabyte ').replace(reglastmeasuremegabyte7virgolaspace, '7megabyte ').replace(reglastmeasuremegabyte8virgolaspace, '8megabyte ').replace(reglastmeasuremegabyte9virgolaspace, '9megabyte ').replace(reglastmeasuremegabyte0virgolaspace, '0megabyte ').replace(reglastmeasuremegabyte1pointspace, '1megabyte ').replace(reglastmeasuremegabyte2pointspace, '2megabyte ').replace(reglastmeasuremegabyte3pointspace, '3megabyte ').replace(reglastmeasuremegabyte4pointspace, '4megabyte ').replace(reglastmeasuremegabyte5pointspace, '5megabyte ').replace(reglastmeasuremegabyte6pointspace, '6megabyte ').replace(reglastmeasuremegabyte7pointspace, '7megabyte ').replace(reglastmeasuremegabyte8pointspace, '8megabyte ').replace(reglastmeasuremegabyte9pointspace, '9megabyte ').replace(reglastmeasuremegabyte0pointspace, '0megabyte ').replace(reglastmeasuremegabyte1questionspace, '1megabyte ').replace(reglastmeasuremegabyte2questionspace, '2megabyte ').replace(reglastmeasuremegabyte3questionspace, '3megabyte ').replace(reglastmeasuremegabyte4questionspace, '4megabyte ').replace(reglastmeasuremegabyte5questionspace, '5megabyte ').replace(reglastmeasuremegabyte6questionspace, '6megabyte ').replace(reglastmeasuremegabyte7questionspace, '7megabyte ').replace(reglastmeasuremegabyte8questionspace, '8megabyte ').replace(reglastmeasuremegabyte9questionspace, '9megabyte ').replace(reglastmeasuremegabyte0questionspace, '0megabyte ');
}
	
function replacefinalpart17(str){
return str.replace(reglastmeasureMillimetreofmercury1, ' millimeters of mercury ').replace(reglastmeasureMillimetreofmercury2, ' millimeters of mercury ').replace(reglastmeasureMillimetreofmercury3, ' millimeters of mercury ').replace(reglastmeasureMillimetreofmercury4, ' millimeters of mercury ').replace(reglastmeasureMillimetreofmercury5, ' millimeters of mercury ').replace(reglastmeasureMillimetreofmercury6slash, ' millimeters of mercury /').replace(reglastmeasureKilocalories1, ' kilocalories ').replace(reglastmeasureKilocalories2, ' kilocalories ').replace(reglastmeasureKilocalories3, ' kilocalories ').replace(reglastmeasureKilocalories4, ' kilocalories ').replace(reglastmeasureKilocalories5, ' kilocalories ').replace(reglastmeasureKilocalories6slash, ' kilocalories /').replace(reglastmeasureMillimole1, ' millimole ').replace(reglastmeasureMillimole2, ' millimole ').replace(reglastmeasureMillimole3, ' millimole ').replace(reglastmeasureMillimole4, ' millimole ').replace(reglastmeasureMillimole5, ' millimole ').replace(reglastmeasureMillimole6slash, ' millimole /').replace(reglastmeasureBlvd1, ' boulevard ').replace(reglastmeasureBlvd2, ' boulevard ').replace(reglastmeasureBlvd3, ' boulevard ').replace(reglastmeasureBlvd4, ' boulevard ').replace(reglastmeasureBlvd5, ' boulevard ').replace(reglastmeasureBlvd6slash, ' boulevard /').replace(reglastmeasureRoad1, ' road ').replace(reglastmeasureRoad2, ' road ').replace(reglastmeasureRoad3, ' road ').replace(reglastmeasureRoad4, ' road ').replace(reglastmeasureRoad5, ' road ').replace(reglastmeasureRoad6slash, ' road /').replace(reglastmeasureStreet1, ' street ').replace(reglastmeasureStreet2, ' street ').replace(reglastmeasureStreet3, ' street ').replace(reglastmeasureStreet4, ' street ').replace(reglastmeasureStreet5, ' street ').replace(reglastmeasureStreet6slash, ' street /').replace(reglastmeasureMileshour1, ' miles per hour ').replace(reglastmeasureMileshour2, ' miles per hour ').replace(reglastmeasureMileshour3, ' miles per hour ').replace(reglastmeasureMileshour4, ' miles per hour ').replace(reglastmeasureMileshour5, ' miles per hour ').replace(reglastmeasureMileshour6slash, ' miles per hour /');
}
	
function replacefinalpart18(str){
return str.replace(reglastmeasurethousand1, '1000 ').replace(reglastmeasurethousand2, '2000 ').replace(reglastmeasurethousand3, '3000 ').replace(reglastmeasurethousand4, '4000 ').replace(reglastmeasurethousand5, '5000 ').replace(reglastmeasurethousand6, '6000 ').replace(reglastmeasurethousand7, '7000 ').replace(reglastmeasurethousand8, '8000 ').replace(reglastmeasurethousand9, '9000 ').replace(reglastmeasurethousand0, '0000 ').replace(reglastmeasurethousand1point, '1000 ').replace(reglastmeasurethousand2point, '2000 ').replace(reglastmeasurethousand3point, '3000 ').replace(reglastmeasurethousand4point, '4000 ').replace(reglastmeasurethousand5point, '5000 ').replace(reglastmeasurethousand6point, '6000 ').replace(reglastmeasurethousand7point, '7000 ').replace(reglastmeasurethousand8point, '8000 ').replace(reglastmeasurethousand9point, '9000 ').replace(reglastmeasurethousand0point, '0000 ').replace(reglastmeasurethousand1virgola, '1000 ').replace(reglastmeasurethousand2virgola, '2000 ').replace(reglastmeasurethousand3virgola, '3000 ').replace(reglastmeasurethousand4virgola, '4000 ').replace(reglastmeasurethousand5virgola, '5000 ').replace(reglastmeasurethousand6virgola, '6000 ').replace(reglastmeasurethousand7virgola, '7000 ').replace(reglastmeasurethousand8virgola, '8000 ').replace(reglastmeasurethousand9virgola, '9000 ').replace(reglastmeasurethousand0virgola, '0000 ').replace(reglastmeasurethousand1slash, '1000 /').replace(reglastmeasurethousand2slash, '2000 /').replace(reglastmeasurethousand3slash, '3000 /').replace(reglastmeasurethousand4slash, '4000 /').replace(reglastmeasurethousand5slash, '5000 /').replace(reglastmeasurethousand6slash, '6000 /').replace(reglastmeasurethousand7slash, '7000 /').replace(reglastmeasurethousand8slash, '8000 /').replace(reglastmeasurethousand9slash, '9000 /').replace(reglastmeasurethousand0slash, '0000 /').replace(reglastmeasurethousand1question, '1000 ').replace(reglastmeasurethousand2question, '2000 ').replace(reglastmeasurethousand3question, '3000 ').replace(reglastmeasurethousand4question, '4000 ').replace(reglastmeasurethousand5question, '5000 ').replace(reglastmeasurethousand6question, '6000 ').replace(reglastmeasurethousand7question, '7000 ').replace(reglastmeasurethousand8question, '8000 ').replace(reglastmeasurethousand9question, '9000 ').replace(reglastmeasurethousand0question, '0000 ').replace(reglastmeasurethousand1exclam, '1000 ').replace(reglastmeasurethousand2exclam, '2000 ').replace(reglastmeasurethousand3exclam, '3000 ').replace(reglastmeasurethousand4exclam, '4000 ').replace(reglastmeasurethousand5exclam, '5000 ').replace(reglastmeasurethousand6exclam, '6000 ').replace(reglastmeasurethousand7exclam, '7000 ').replace(reglastmeasurethousand8exclam, '8000 ').replace(reglastmeasurethousand9exclam, '9000 ').replace(reglastmeasurethousand0exclam, '0000 ');
}
	
function replacefinalpart19(str){
return str.replace(reglastmeasurefemale1, '1years old female ').replace(reglastmeasurefemale2, '2years old female ').replace(reglastmeasurefemale3, '3years old female ').replace(reglastmeasurefemale4, '4years old female ').replace(reglastmeasurefemale5, '5years old female ').replace(reglastmeasurefemale6, '6years old female ').replace(reglastmeasurefemale7, '7years old female ').replace(reglastmeasurefemale8, '8years old female ').replace(reglastmeasurefemale9, '9years old female ').replace(reglastmeasurefemale0, '0years old female ').replace(reglastmeasurefemale1point, '1years old female ').replace(reglastmeasurefemale2point, '2years old female ').replace(reglastmeasurefemale3point, '3years old female ').replace(reglastmeasurefemale4point, '4years old female ').replace(reglastmeasurefemale5point, '5years old female ').replace(reglastmeasurefemale6point, '6years old female ').replace(reglastmeasurefemale7point, '7years old female ').replace(reglastmeasurefemale8point, '8years old female ').replace(reglastmeasurefemale9point, '9years old female ').replace(reglastmeasurefemale0point, '0years old female ').replace(reglastmeasurefemale1virgola, '1years old female ').replace(reglastmeasurefemale2virgola, '2years old female ').replace(reglastmeasurefemale3virgola, '3years old female ').replace(reglastmeasurefemale4virgola, '4years old female ').replace(reglastmeasurefemale5virgola, '5years old female ').replace(reglastmeasurefemale6virgola, '6years old female ').replace(reglastmeasurefemale7virgola, '7years old female ').replace(reglastmeasurefemale8virgola, '8years old female ').replace(reglastmeasurefemale9virgola, '9years old female ').replace(reglastmeasurefemale0virgola, '0years old female ').replace(reglastmeasurefemale1slash, '1years old female /').replace(reglastmeasurefemale2slash, '2years old female /').replace(reglastmeasurefemale3slash, '3years old female /').replace(reglastmeasurefemale4slash, '4years old female /').replace(reglastmeasurefemale5slash, '5years old female /').replace(reglastmeasurefemale6slash, '6years old female /').replace(reglastmeasurefemale7slash, '7years old female /').replace(reglastmeasurefemale8slash, '8years old female /').replace(reglastmeasurefemale9slash, '9years old female /').replace(reglastmeasurefemale0slash, '0years old female /').replace(reglastmeasurefemale1question, '1years old female ').replace(reglastmeasurefemale2question, '2years old female ').replace(reglastmeasurefemale3question, '3years old female ').replace(reglastmeasurefemale4question, '4years old female ').replace(reglastmeasurefemale5question, '5years old female ').replace(reglastmeasurefemale6question, '6years old female ').replace(reglastmeasurefemale7question, '7years old female ').replace(reglastmeasurefemale8question, '8years old female ').replace(reglastmeasurefemale9question, '9years old female ').replace(reglastmeasurefemale0question, '0years old female ').replace(reglastmeasurefemale1exclam, '1years old female ').replace(reglastmeasurefemale2exclam, '2years old female ').replace(reglastmeasurefemale3exclam, '3years old female ').replace(reglastmeasurefemale4exclam, '4years old female ').replace(reglastmeasurefemale5exclam, '5years old female ').replace(reglastmeasurefemale6exclam, '6years old female ').replace(reglastmeasurefemale7exclam, '7years old female ').replace(reglastmeasurefemale8exclam, '8years old female ').replace(reglastmeasurefemale9exclam, '9years old female ').replace(reglastmeasurefemale0exclam, '0years old female ');
}

function replacefinalpart20(str){
return str.replace(reglastmeasureMt1, ' mount ').replace(reglastmeasureMt2, ' mount ').replace(reglastmeasureMt3, ' mount ').replace(reglastmeasureMt4, '/ mount ').replace(reglastmeasureMt5, ' mount ').replace(reglastmeasureMt6, ' mount ').replace(reglastmeasureMt7, ' mount ').replace(reglastmeasureMt8, ' mount ').replace(reglastmeasureMt9, '/ mount ').replace(reglastmeasureMt10, ' mount ').replace(reglastmeasureMt11, ' mount ').replace(reglastmeasureMt12, ' mount ').replace(reglastmeasuredmz1, ' demilitarized zone ').replace(reglastmeasuredmz2, ' demilitarized zone ').replace(reglastmeasuredmz3, ' demilitarized zone ').replace(reglastmeasuredmz4, ' demilitarized zone ').replace(reglastmeasuredmz5, ' demilitarized zone ').replace(reglastmeasuredmz6, ' demilitarized zone ').replace(reglastmeasuredmz7, ' demilitarized zone ').replace(reglastmeasuredmz8, ' demilitarized zone ').replace(reglastmeasuredmz9, ' demilitarized zone ').replace(reglastmeasuredmzslashfirst, '/ demilitarized zone ').replace(reglastmeasuredmzslashafter, ' demilitarized zone /').replace(reglastmeasuredmv1, ' department of motor vehicles ').replace(reglastmeasuredmv2, ' department of motor vehicles ').replace(reglastmeasuredmv3, ' department of motor vehicles ').replace(reglastmeasuredmv4, ' department of motor vehicles ').replace(reglastmeasuredmv5, ' department of motor vehicles ').replace(reglastmeasuredmv6, ' department of motor vehicles ').replace(reglastmeasuredmv7, ' department of motor vehicles ').replace(reglastmeasuredmv8, ' department of motor vehicles ').replace(reglastmeasuredmv9, ' department of motor vehicles ').replace(reglastmeasuredmvslashfirst, '/ department of motor vehicles ').replace(reglastmeasuredmvslashafter, ' department of motor vehicles /').replace(reglastmeasureyrs1, ' years ').replace(reglastmeasureyrs2, ' years ').replace(reglastmeasureyrs3, ' years ').replace(reglastmeasureyrs4, ' years ').replace(reglastmeasureyrs5, ' years ').replace(reglastmeasureyrs6, ' years ').replace(reglastmeasureyrs7, ' years ').replace(reglastmeasureyrs8, ' years ').replace(reglastmeasureyrs9, ' years ').replace(reglastmeasureyrsslashfirst, '/ years ').replace(reglastmeasureyrsslashafter, ' years /');
}

function replacefinalpart21(str){
return str.replace(reglastmeasurexbox1, ' xbox ').replace(reglastmeasurexbox2, ' xbox ').replace(reglastmeasurexbox3, ' xbox ').replace(reglastmeasurexbox4, ' xbox ').replace(reglastmeasurexbox5, ' xbox ').replace(reglastmeasurexbox6, ' xbox ').replace(reglastmeasurexbox7, ' xbox ').replace(reglastmeasurexbox8, ' xbox ').replace(reglastmeasurexbox9, ' xbox ').replace(reglastmeasurexboxslashfirst, '/ xbox ').replace(reglastmeasurexboxslashafter, ' xbox /').replace(reglastmeasurejjba1, ' jojo bizarre adventures ').replace(reglastmeasurejjba2, ' jojo bizarre adventures ').replace(reglastmeasurejjba3, ' jojo bizarre adventures ').replace(reglastmeasurejjba4, ' jojo bizarre adventures ').replace(reglastmeasurejjba5, ' jojo bizarre adventures ').replace(reglastmeasurejjba6, ' jojo bizarre adventures ').replace(reglastmeasurejjba7, ' jojo bizarre adventures ').replace(reglastmeasurejjba8, ' jojo bizarre adventures ').replace(reglastmeasurejjba9, ' jojo bizarre adventures ').replace(reglastmeasurejjbaslashfirst, '/ jojo bizarre adventures ').replace(reglastmeasurejjbaslashafter, ' jojo bizarre adventures /').replace(reglastmeasurehpv1, ' papilloma virus ').replace(reglastmeasurehpv2, ' papilloma virus ').replace(reglastmeasurehpv3, ' papilloma virus ').replace(reglastmeasurehpv4, ' papilloma virus ').replace(reglastmeasurehpv5, ' papilloma virus ').replace(reglastmeasurehpv6, ' papilloma virus ').replace(reglastmeasurehpv7, ' papilloma virus ').replace(reglastmeasurehpv8, ' papilloma virus ').replace(reglastmeasurehpv9, ' papilloma virus ').replace(reglastmeasurehpvslashfirst, '/ papilloma virus ').replace(reglastmeasurehpvslashafter, ' papilloma virus /').replace(reglastmeasureyt1, ' youtube ').replace(reglastmeasureyt2, ' youtube ').replace(reglastmeasureyt3, ' youtube ').replace(reglastmeasureyt4, ' youtube ').replace(reglastmeasureyt5, ' youtube ').replace(reglastmeasureyt6, ' youtube ').replace(reglastmeasureyt7, ' youtube ').replace(reglastmeasureyt8, ' youtube ').replace(reglastmeasureyt9, ' youtube ').replace(reglastmeasureytslashfirst, '/ youtube ').replace(reglastmeasureytslashafter, ' youtube /').replace(reglastmeasurerdr21, ' red dead redemption 2 ').replace(reglastmeasurerdr22, ' red dead redemption 2 ').replace(reglastmeasurerdr23, ' red dead redemption 2 ').replace(reglastmeasurerdr24, ' red dead redemption 2 ').replace(reglastmeasurerdr25, ' red dead redemption 2 ').replace(reglastmeasurerdr26, ' red dead redemption 2 ').replace(reglastmeasurerdr27, ' red dead redemption 2 ').replace(reglastmeasurerdr28, ' red dead redemption 2 ').replace(reglastmeasurerdr29, ' red dead redemption 2 ').replace(reglastmeasurerdr2slashfirst, '/ red dead redemption 2 ').replace(reglastmeasurerdr2slashafter, ' red dead redemption 2 /').replace(reglastmeasureh2g21, ' the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g22, ' the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g23, ' the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g24, ' the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g25, ' the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g26, ' the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g27, ' the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g28, ' the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g29, ' the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g2slashfirst, '/ the hitchhiker s guide to the galaxy ').replace(reglastmeasureh2g2slashafter, ' the hitchhiker s guide to the galaxy /').replace(reglastmeasurepcp1, ' primary care physician ').replace(reglastmeasurepcp2, ' primary care physician ').replace(reglastmeasurepcp3, ' primary care physician ').replace(reglastmeasurepcp4, ' primary care physician ').replace(reglastmeasurepcp5, ' primary care physician ').replace(reglastmeasurepcp6, ' primary care physician ').replace(reglastmeasurepcp7, ' primary care physician ').replace(reglastmeasurepcp8, ' primary care physician ').replace(reglastmeasurepcp9, ' primary care physician ').replace(reglastmeasurepcpslashfirst, '/ primary care physician ').replace(reglastmeasurepcpslashafter, ' primary care physician /').replace(reglastmeasurefwb1, ' friend with benefits ').replace(reglastmeasurefwb2, ' friend with benefits ').replace(reglastmeasurefwb3, ' friend with benefits ').replace(reglastmeasurefwb4, ' friend with benefits ').replace(reglastmeasurefwb5, ' friend with benefits ').replace(reglastmeasurefwb6, ' friend with benefits ').replace(reglastmeasurefwb7, ' friend with benefits ').replace(reglastmeasurefwb8, ' friend with benefits ').replace(reglastmeasurefwb9, ' friend with benefits ').replace(reglastmeasurefwbslashfirst, '/ friend with benefits ').replace(reglastmeasurefwbslashafter, ' friend with benefits /').replace(reglastmeasureirs1, ' internal revenue service ').replace(reglastmeasureirs2, ' internal revenue service ').replace(reglastmeasureirs3, ' internal revenue service ').replace(reglastmeasureirs4, ' internal revenue service ').replace(reglastmeasureirs5, ' internal revenue service ').replace(reglastmeasureirs6, ' internal revenue service ').replace(reglastmeasureirs7, ' internal revenue service ').replace(reglastmeasureirs8, ' internal revenue service ').replace(reglastmeasureirs9, ' internal revenue service ').replace(reglastmeasureirsslashfirst, '/ internal revenue service ').replace(reglastmeasureirsslashafter, ' internal revenue service /').replace(reglastmeasurerrv1, ' rapid response vehicle ').replace(reglastmeasurerrv2, ' rapid response vehicle ').replace(reglastmeasurerrv3, ' rapid response vehicle ').replace(reglastmeasurerrv4, ' rapid response vehicle ').replace(reglastmeasurerrv5, ' rapid response vehicle ').replace(reglastmeasurerrv6, ' rapid response vehicle ').replace(reglastmeasurerrv7, ' rapid response vehicle ').replace(reglastmeasurerrv8, ' rapid response vehicle ').replace(reglastmeasurerrv9, ' rapid response vehicle ').replace(reglastmeasurerrvslashfirst, '/ rapid response vehicle ').replace(reglastmeasurerrvslashafter, ' rapid response vehicle /');
}
	
function replacefinalpart22(str){
return str.replace(reglastmeasureeg1, ' for example ').replace(reglastmeasureeg2, ' for example ').replace(reglastmeasureeg3, ' for example ').replace(reglastmeasureeg4, ' for example ').replace(reglastmeasureeg5, ' for example ').replace(reglastmeasureeg6, ' for example ').replace(reglastmeasureeg7, ' for example ').replace(reglastmeasureeg8, ' for example ').replace(reglastmeasureeg9, ' for example ').replace(reglastmeasureegslashfirst, '/ for example ').replace(reglastmeasureegslashafter, ' for example /').replace(reglastmeasureegpoint1, ' for example ').replace(reglastmeasureegpoint2, ' for example ').replace(reglastmeasureegpoint3, ' for example ').replace(reglastmeasureegpoint4, ' for example ').replace(reglastmeasureegpoint5, ' for example ').replace(reglastmeasureegpoint6, ' for example ').replace(reglastmeasureegpoint7, ' for example ').replace(reglastmeasureegpoint8, ' for example ').replace(reglastmeasureegpoint9, ' for example ').replace(reglastmeasureegpointslashfirst, '/ for example ').replace(reglastmeasureegpointslashafter, ' for example /').replace(reglastmeasureie1, ' for example ').replace(reglastmeasureie2, ' for example ').replace(reglastmeasureie3, ' for example ').replace(reglastmeasureie4, ' for example ').replace(reglastmeasureie5, ' for example ').replace(reglastmeasureie6, ' for example ').replace(reglastmeasureie7, ' for example ').replace(reglastmeasureie8, ' for example ').replace(reglastmeasureie9, ' for example ').replace(reglastmeasureieslashfirst, '/ for example ').replace(reglastmeasureieslashafter, ' for example /').replace(reglastmeasureegfr1, ' estimated glomerular filtration rate ').replace(reglastmeasureegfr2, ' estimated glomerular filtration rate ').replace(reglastmeasureegfr3, ' estimated glomerular filtration rate ').replace(reglastmeasureegfr4, ' estimated glomerular filtration rate ').replace(reglastmeasureegfr5, ' estimated glomerular filtration rate ').replace(reglastmeasureegfr6, ' estimated glomerular filtration rate ').replace(reglastmeasureegfr7, ' estimated glomerular filtration rate ').replace(reglastmeasureegfr8, ' estimated glomerular filtration rate ').replace(reglastmeasureegfr9, ' estimated glomerular filtration rate ').replace(reglastmeasureegfrslashfirst, '/ estimated glomerular filtration rate ').replace(reglastmeasureegfrslashafter, ' estimated glomerular filtration rate /').replace(reglastmeasurebf1, ' boyfriend ').replace(reglastmeasurebf2, ' boyfriend ').replace(reglastmeasurebf3, ' boyfriend ').replace(reglastmeasurebf4, ' boyfriend ').replace(reglastmeasurebf5, ' boyfriend ').replace(reglastmeasurebf6, ' boyfriend ').replace(reglastmeasurebf7, ' boyfriend ').replace(reglastmeasurebf8, ' boyfriend ').replace(reglastmeasurebf9, ' boyfriend ').replace(reglastmeasurebfslashfirst, '/ boyfriend ').replace(reglastmeasurebfslashafter, ' boyfriend /').replace(reglastmeasuregf1, ' girlfriend ').replace(reglastmeasuregf2, ' girlfriend ').replace(reglastmeasuregf3, ' girlfriend ').replace(reglastmeasuregf4, ' girlfriend ').replace(reglastmeasuregf5, ' girlfriend ').replace(reglastmeasuregf6, ' girlfriend ').replace(reglastmeasuregf7, ' girlfriend ').replace(reglastmeasuregf8, ' girlfriend ').replace(reglastmeasuregf9, ' girlfriend ').replace(reglastmeasuregfslashfirst, '/ girlfriend ').replace(reglastmeasuregfslashafter, ' girlfriend /').replace(reglastmeasureftw1, ' fuck the world ').replace(reglastmeasureftw2, ' fuck the world ').replace(reglastmeasureftw3, ' fuck the world ').replace(reglastmeasureftw4, ' fuck the world ').replace(reglastmeasureftw5, ' fuck the world ').replace(reglastmeasureftw6, ' fuck the world ').replace(reglastmeasureftw7, ' fuck the world ').replace(reglastmeasureftw8, ' fuck the world ').replace(reglastmeasureftw9, ' fuck the world ').replace(reglastmeasureftwslashfirst, '/ fuck the world ').replace(reglastmeasureftwslashafter, ' fuck the world /').replace(reglastmeasureone_x1, ' onex ').replace(reglastmeasureone_x2, ' onex ').replace(reglastmeasureone_x3, ' onex ').replace(reglastmeasureone_x4, ' onex ').replace(reglastmeasureone_x5, ' onex ').replace(reglastmeasureone_x6, ' onex ').replace(reglastmeasureone_x7, ' onex ').replace(reglastmeasureone_x8, ' onex ').replace(reglastmeasureone_x9, ' onex ').replace(reglastmeasureone_xslashfirst, '/ onex ').replace(reglastmeasureone_xslashafter, ' onex /').replace(reglastmeasurefgth1, ' frankie goes to hollywood ').replace(reglastmeasurefgth2, ' frankie goes to hollywood ').replace(reglastmeasurefgth3, ' frankie goes to hollywood ').replace(reglastmeasurefgth4, ' frankie goes to hollywood ').replace(reglastmeasurefgth5, ' frankie goes to hollywood ').replace(reglastmeasurefgth6, ' frankie goes to hollywood ').replace(reglastmeasurefgth7, ' frankie goes to hollywood ').replace(reglastmeasurefgth8, ' frankie goes to hollywood ').replace(reglastmeasurefgth9, ' frankie goes to hollywood ').replace(reglastmeasurefgthslashfirst, '/ frankie goes to hollywood ').replace(reglastmeasurefgthslashafter, ' frankie goes to hollywood /').replace(reglastmeasures_x1, ' sex ').replace(reglastmeasures_x2, ' sex ').replace(reglastmeasures_x3, ' sex ').replace(reglastmeasures_x4, ' sex ').replace(reglastmeasures_x5, ' sex ').replace(reglastmeasures_x6, ' sex ').replace(reglastmeasures_x7, ' sex ').replace(reglastmeasures_x8, ' sex ').replace(reglastmeasures_x9, ' sex ').replace(reglastmeasures_xslashfirst, '/ sex ').replace(reglastmeasures_xslashafter, ' sex /').replace(reglastmeasuref_ck1, ' fuck ').replace(reglastmeasuref_ck2, ' fuck ').replace(reglastmeasuref_ck3, ' fuck ').replace(reglastmeasuref_ck4, ' fuck ').replace(reglastmeasuref_ck5, ' fuck ').replace(reglastmeasuref_ck6, ' fuck ').replace(reglastmeasuref_ck7, ' fuck ').replace(reglastmeasuref_ck8, ' fuck ').replace(reglastmeasuref_ck9, ' fuck ').replace(reglastmeasuref_ckslashfirst, '/ fuck ').replace(reglastmeasuref_ckslashafter, ' fuck /').replace(reglastmeasuresh_t1, ' shit ').replace(reglastmeasuresh_t2, ' shit ').replace(reglastmeasuresh_t3, ' shit ').replace(reglastmeasuresh_t4, ' shit ').replace(reglastmeasuresh_t5, ' shit ').replace(reglastmeasuresh_t6, ' shit ').replace(reglastmeasuresh_t7, ' shit ').replace(reglastmeasuresh_t8, ' shit ').replace(reglastmeasuresh_t9, ' shit ').replace(reglastmeasuresh_tslashfirst, '/ shit ').replace(reglastmeasuresh_tslashafter, ' shit /');
}
	
function replacefinalpart23(str){
return str.replace(reglastmeasureptsd1, ' posttraumatic stress disorder ').replace(reglastmeasureptsd2, ' posttraumatic stress disorder ').replace(reglastmeasureptsd3, ' posttraumatic stress disorder ').replace(reglastmeasureptsd4, ' posttraumatic stress disorder ').replace(reglastmeasureptsd5, ' posttraumatic stress disorder ').replace(reglastmeasureptsd6, ' posttraumatic stress disorder ').replace(reglastmeasureptsd7, ' posttraumatic stress disorder ').replace(reglastmeasureptsd8, ' posttraumatic stress disorder ').replace(reglastmeasureptsd9, ' posttraumatic stress disorder ').replace(reglastmeasureptsdslashfirst, '/ posttraumatic stress disorder ').replace(reglastmeasureptsdslashafter, ' posttraumatic stress disorder /').replace(reglastmeasuressri1, ' antidepressant drug ').replace(reglastmeasuressri2, ' antidepressant drug ').replace(reglastmeasuressri3, ' antidepressant drug ').replace(reglastmeasuressri4, ' antidepressant drug ').replace(reglastmeasuressri5, ' antidepressant drug ').replace(reglastmeasuressri6, ' antidepressant drug ').replace(reglastmeasuressri7, ' antidepressant drug ').replace(reglastmeasuressri8, ' antidepressant drug ').replace(reglastmeasuressri9, ' antidepressant drug ').replace(reglastmeasuressrislashfirst, '/ antidepressant drug ').replace(reglastmeasuressrislashafter, ' antidepressant drug /').replace(reglastmeasureomg1, ' oh my god ').replace(reglastmeasureomg2, ' oh my god ').replace(reglastmeasureomg3, ' oh my god ').replace(reglastmeasureomg4, ' oh my god ').replace(reglastmeasureomg5, ' oh my god ').replace(reglastmeasureomg6, ' oh my god ').replace(reglastmeasureomg7, ' oh my god ').replace(reglastmeasureomg8, ' oh my god ').replace(reglastmeasureomg9, ' oh my god ').replace(reglastmeasureomgslashfirst, '/ oh my god ').replace(reglastmeasureomgslashafter, ' oh my god /').replace(reglastmeasureomfg1, ' oh my god ').replace(reglastmeasureomfg2, ' oh my god ').replace(reglastmeasureomfg3, ' oh my god ').replace(reglastmeasureomfg4, ' oh my god ').replace(reglastmeasureomfg5, ' oh my god ').replace(reglastmeasureomfg6, ' oh my god ').replace(reglastmeasureomfg7, ' oh my god ').replace(reglastmeasureomfg8, ' oh my god ').replace(reglastmeasureomfg9, ' oh my god ').replace(reglastmeasureomfgslashfirst, '/ oh my god ').replace(reglastmeasureomfgslashafter, ' oh my god /').replace(reglastmeasuregwtw1, ' gone with the wind ').replace(reglastmeasuregwtw2, ' gone with the wind ').replace(reglastmeasuregwtw3, ' gone with the wind ').replace(reglastmeasuregwtw4, ' gone with the wind ').replace(reglastmeasuregwtw5, ' gone with the wind ').replace(reglastmeasuregwtw6, ' gone with the wind ').replace(reglastmeasuregwtw7, ' gone with the wind ').replace(reglastmeasuregwtw8, ' gone with the wind ').replace(reglastmeasuregwtw9, ' gone with the wind ').replace(reglastmeasuregwtwslashfirst, '/ gone with the wind ').replace(reglastmeasuregwtwslashafter, ' gone with the wind /').replace(reglastmeasureidk1, ' i don t know ').replace(reglastmeasureidk2, ' i don t know ').replace(reglastmeasureidk3, ' i don t know ').replace(reglastmeasureidk4, ' i don t know ').replace(reglastmeasureidk5, ' i don t know ').replace(reglastmeasureidk6, ' i don t know ').replace(reglastmeasureidk7, ' i don t know ').replace(reglastmeasureidk8, ' i don t know ').replace(reglastmeasureidk9, ' i don t know ').replace(reglastmeasureidkslashfirst, '/ i don t know ').replace(reglastmeasureidkslashafter, ' i don t know /').replace(reglastmeasureimho1, ' in my opinion ').replace(reglastmeasureimho2, ' in my opinion ').replace(reglastmeasureimho3, ' in my opinion ').replace(reglastmeasureimho4, ' in my opinion ').replace(reglastmeasureimho5, ' in my opinion ').replace(reglastmeasureimho6, ' in my opinion ').replace(reglastmeasureimho7, ' in my opinion ').replace(reglastmeasureimho8, ' in my opinion ').replace(reglastmeasureimho9, ' in my opinion ').replace(reglastmeasureimhoslashfirst, '/ in my opinion ').replace(reglastmeasureimhoslashafter, ' in my opinion /').replace(reglastmeasureimo1, ' in my opinion ').replace(reglastmeasureimo2, ' in my opinion ').replace(reglastmeasureimo3, ' in my opinion ').replace(reglastmeasureimo4, ' in my opinion ').replace(reglastmeasureimo5, ' in my opinion ').replace(reglastmeasureimo6, ' in my opinion ').replace(reglastmeasureimo7, ' in my opinion ').replace(reglastmeasureimo8, ' in my opinion ').replace(reglastmeasureimo9, ' in my opinion ').replace(reglastmeasureimoslashfirst, '/ in my opinion ').replace(reglastmeasureimoslashafter, ' in my opinion /').replace(reglastmeasurewtf1, ' what on earth ').replace(reglastmeasurewtf2, ' what on earth ').replace(reglastmeasurewtf3, ' what on earth ').replace(reglastmeasurewtf4, ' what on earth ').replace(reglastmeasurewtf5, ' what on earth ').replace(reglastmeasurewtf6, ' what on earth ').replace(reglastmeasurewtf7, ' what on earth ').replace(reglastmeasurewtf8, ' what on earth ').replace(reglastmeasurewtf9, ' what on earth ').replace(reglastmeasurewtfslashfirst, '/ what on earth ').replace(reglastmeasurewtfslashafter, ' what on earth /').replace(reglastmeasurebtw1, ' by the way ').replace(reglastmeasurebtw2, ' by the way ').replace(reglastmeasurebtw3, ' by the way ').replace(reglastmeasurebtw4, ' by the way ').replace(reglastmeasurebtw5, ' by the way ').replace(reglastmeasurebtw6, ' by the way ').replace(reglastmeasurebtw7, ' by the way ').replace(reglastmeasurebtw8, ' by the way ').replace(reglastmeasurebtw9, ' by the way ').replace(reglastmeasurebtwslashfirst, '/ by the way ').replace(reglastmeasurebtwslashafter, ' by the way /').replace(reglastmeasurefyi1, ' for your interest ').replace(reglastmeasurefyi2, ' for your interest ').replace(reglastmeasurefyi3, ' for your interest ').replace(reglastmeasurefyi4, ' for your interest ').replace(reglastmeasurefyi5, ' for your interest ').replace(reglastmeasurefyi6, ' for your interest ').replace(reglastmeasurefyi7, ' for your interest ').replace(reglastmeasurefyi8, ' for your interest ').replace(reglastmeasurefyi9, ' for your interest ').replace(reglastmeasurefyislashfirst, '/ for your interest ').replace(reglastmeasurefyislashafter, ' for your interest /').replace(reglastmeasurestds1, ' sexually transmitted disease ').replace(reglastmeasurestds2, ' sexually transmitted disease ').replace(reglastmeasurestds3, ' sexually transmitted disease ').replace(reglastmeasurestds4, ' sexually transmitted disease ').replace(reglastmeasurestds5, ' sexually transmitted disease ').replace(reglastmeasurestds6, ' sexually transmitted disease ').replace(reglastmeasurestds7, ' sexually transmitted disease ').replace(reglastmeasurestds8, ' sexually transmitted disease ').replace(reglastmeasurestds9, ' sexually transmitted disease ').replace(reglastmeasurestdsslashfirst, '/ sexually transmitted disease ').replace(reglastmeasurestdsslashafter, ' sexually transmitted disease /');	
}

function replacefinalpart24(str){
return str.replace(reglastmeasurebdsm1, ' bondage ').replace(reglastmeasurebdsm2, ' bondage ').replace(reglastmeasurebdsm3, ' bondage ').replace(reglastmeasurebdsm4, ' bondage ').replace(reglastmeasurebdsm5, ' bondage ').replace(reglastmeasurebdsm6, ' bondage ').replace(reglastmeasurebdsm7, ' bondage ').replace(reglastmeasurebdsm8, ' bondage ').replace(reglastmeasurebdsm9, ' bondage ').replace(reglastmeasurebdsmslashfirst, '/ bondage ').replace(reglastmeasurebdsmslashafter, ' bondage /').replace(reglastmeasurebs1, ' bullshit ').replace(reglastmeasurebs2, ' bullshit ').replace(reglastmeasurebs3, ' bullshit ').replace(reglastmeasurebs4, ' bullshit ').replace(reglastmeasurebs5, ' bullshit ').replace(reglastmeasurebs6, ' bullshit ').replace(reglastmeasurebs7, ' bullshit ').replace(reglastmeasurebs8, ' bullshit ').replace(reglastmeasurebs9, ' bullshit ').replace(reglastmeasurebsslashfirst, '/ bullshit ').replace(reglastmeasurebsslashafter, ' bullshit /').replace(reglastmeasureeeg1, ' electroencephalogram ').replace(reglastmeasureeeg2, ' electroencephalogram ').replace(reglastmeasureeeg3, ' electroencephalogram ').replace(reglastmeasureeeg4, ' electroencephalogram ').replace(reglastmeasureeeg5, ' electroencephalogram ').replace(reglastmeasureeeg6, ' electroencephalogram ').replace(reglastmeasureeeg7, ' electroencephalogram ').replace(reglastmeasureeeg8, ' electroencephalogram ').replace(reglastmeasureeeg9, ' electroencephalogram ').replace(reglastmeasureeegslashfirst, '/ electroencephalogram ').replace(reglastmeasureeegslashafter, ' electroencephalogram /').replace(reglastmeasureedm1, ' electronic dance music ').replace(reglastmeasureedm2, ' electronic dance music ').replace(reglastmeasureedm3, ' electronic dance music ').replace(reglastmeasureedm4, ' electronic dance music ').replace(reglastmeasureedm5, ' electronic dance music ').replace(reglastmeasureedm6, ' electronic dance music ').replace(reglastmeasureedm7, ' electronic dance music ').replace(reglastmeasureedm8, ' electronic dance music ').replace(reglastmeasureedm9, ' electronic dance music ').replace(reglastmeasureedmslashfirst, '/ electronic dance music ').replace(reglastmeasureedmslashafter, ' electronic dance music /').replace(reglastmeasuremlk1, ' martin luther king ').replace(reglastmeasuremlk2, ' martin luther king ').replace(reglastmeasuremlk3, ' martin luther king ').replace(reglastmeasuremlk4, ' martin luther king ').replace(reglastmeasuremlk5, ' martin luther king ').replace(reglastmeasuremlk6, ' martin luther king ').replace(reglastmeasuremlk7, ' martin luther king ').replace(reglastmeasuremlk8, ' martin luther king ').replace(reglastmeasuremlk9, ' martin luther king ').replace(reglastmeasuremlkslashfirst, '/ martin luther king ').replace(reglastmeasuremlkslashafter, ' martin luther king /').replace(reglastmeasurey2k1, ' millenium bug ').replace(reglastmeasurey2k2, ' millenium bug ').replace(reglastmeasurey2k3, ' millenium bug ').replace(reglastmeasurey2k4, ' millenium bug ').replace(reglastmeasurey2k5, ' millenium bug ').replace(reglastmeasurey2k6, ' millenium bug ').replace(reglastmeasurey2k7, ' millenium bug ').replace(reglastmeasurey2k8, ' millenium bug ').replace(reglastmeasurey2k9, ' millenium bug ').replace(reglastmeasurey2kslashfirst, '/ millenium bug ').replace(reglastmeasurey2kslashafter, ' millenium bug /').replace(reglastmeasureekcg1, ' electrocardiogram ').replace(reglastmeasureekcg2, ' electrocardiogram ').replace(reglastmeasureekcg3, ' electrocardiogram ').replace(reglastmeasureekcg4, ' electrocardiogram ').replace(reglastmeasureekcg5, ' electrocardiogram ').replace(reglastmeasureekcg6, ' electrocardiogram ').replace(reglastmeasureekcg7, ' electrocardiogram ').replace(reglastmeasureekcg8, ' electrocardiogram ').replace(reglastmeasureekcg9, ' electrocardiogram ').replace(reglastmeasureekcgslashfirst, '/ electrocardiogram ').replace(reglastmeasureekcgslashafter, ' electrocardiogram /').replace(reglastmeasureekgs1, ' electrocardiogram ').replace(reglastmeasureekgs2, ' electrocardiogram ').replace(reglastmeasureekgs3, ' electrocardiogram ').replace(reglastmeasureekgs4, ' electrocardiogram ').replace(reglastmeasureekgs5, ' electrocardiogram ').replace(reglastmeasureekgs6, ' electrocardiogram ').replace(reglastmeasureekgs7, ' electrocardiogram ').replace(reglastmeasureekgs8, ' electrocardiogram ').replace(reglastmeasureekgs9, ' electrocardiogram ').replace(reglastmeasureekgsslashfirst, '/ electrocardiogram ').replace(reglastmeasureekgsslashafter, ' electrocardiogram /').replace(reglastmeasurepov1, ' point of view ').replace(reglastmeasurepov2, ' point of view ').replace(reglastmeasurepov3, ' point of view ').replace(reglastmeasurepov4, ' point of view ').replace(reglastmeasurepov5, ' point of view ').replace(reglastmeasurepov6, ' point of view ').replace(reglastmeasurepov7, ' point of view ').replace(reglastmeasurepov8, ' point of view ').replace(reglastmeasurepov9, ' point of view ').replace(reglastmeasurepovslashfirst, '/ point of view ').replace(reglastmeasurepovslashafter, ' point of view /').replace(reglastmeasurepcos1, ' polycystic ovary syndrome ').replace(reglastmeasurepcos2, ' polycystic ovary syndrome ').replace(reglastmeasurepcos3, ' polycystic ovary syndrome ').replace(reglastmeasurepcos4, ' polycystic ovary syndrome ').replace(reglastmeasurepcos5, ' polycystic ovary syndrome ').replace(reglastmeasurepcos6, ' polycystic ovary syndrome ').replace(reglastmeasurepcos7, ' polycystic ovary syndrome ').replace(reglastmeasurepcos8, ' polycystic ovary syndrome ').replace(reglastmeasurepcos9, ' polycystic ovary syndrome ').replace(reglastmeasurepcosslashfirst, '/ polycystic ovary syndrome ').replace(reglastmeasurepcosslashafter, ' polycystic ovary syndrome /').replace(reglastmeasuretbh1, ' to be honest ').replace(reglastmeasuretbh2, ' to be honest ').replace(reglastmeasuretbh3, ' to be honest ').replace(reglastmeasuretbh4, ' to be honest ').replace(reglastmeasuretbh5, ' to be honest ').replace(reglastmeasuretbh6, ' to be honest ').replace(reglastmeasuretbh7, ' to be honest ').replace(reglastmeasuretbh8, ' to be honest ').replace(reglastmeasuretbh9, ' to be honest ').replace(reglastmeasuretbhslashfirst, '/ to be honest ').replace(reglastmeasuretbhslashafter, ' to be honest /').replace(reglastmeasurebrb1, '  ').replace(reglastmeasurebrb2, '  ').replace(reglastmeasurebrb3, '  ').replace(reglastmeasurebrb4, '  ').replace(reglastmeasurebrb5, '  ').replace(reglastmeasurebrb6, '  ').replace(reglastmeasurebrb7, '  ').replace(reglastmeasurebrb8, '  ').replace(reglastmeasurebrb9, '  ').replace(reglastmeasurebrbslashfirst, '/  ').replace(reglastmeasurebrbslashafter, '  /').replace(reglastmeasuretbf1, '  ').replace(reglastmeasuretbf2, '  ').replace(reglastmeasuretbf3, '  ').replace(reglastmeasuretbf4, '  ').replace(reglastmeasuretbf5, '  ').replace(reglastmeasuretbf6, '  ').replace(reglastmeasuretbf7, '  ').replace(reglastmeasuretbf8, '  ').replace(reglastmeasuretbf9, '  ').replace(reglastmeasuretbfslashfirst, '/  ').replace(reglastmeasuretbfslashafter, '  /');
}

function replacefinalpart25(str){
return str.replace(reglastmeasureroflmao, 'ahahah').replace(reglastmeasureroflol, 'ahahah').replace(reglastmeasurelol1, ' ahahah ').replace(reglastmeasurelol2, ' ahahah ').replace(reglastmeasurelol3, ' ahahah ').replace(reglastmeasurelol4, ' ahahah ').replace(reglastmeasurelol5, ' ahahah ').replace(reglastmeasurelol6, ' ahahah ').replace(reglastmeasurelol7, ' ahahah ').replace(reglastmeasurelol8, ' ahahah ').replace(reglastmeasurelol9, ' ahahah ').replace(reglastmeasurelolslashfirst, '/ ahahah ').replace(reglastmeasurelolslashafter, ' ahahah /').replace(reglastmeasurelmao, ' ').replace(reglastmeasurelmfao, ' ').replace(reglastmeasureww11, ' world war 1 ').replace(reglastmeasureww12, ' world war 1 ').replace(reglastmeasureww13, ' world war 1 ').replace(reglastmeasureww14, ' world war 1 ').replace(reglastmeasureww15, ' world war 1 ').replace(reglastmeasureww16, ' world war 1 ').replace(reglastmeasureww17, ' world war 1 ').replace(reglastmeasureww18, ' world war 1 ').replace(reglastmeasureww19, ' world war 1 ').replace(reglastmeasureww11space, ' world war 1 ').replace(reglastmeasureww12space, ' world war 1 ').replace(reglastmeasureww13space, ' world war 1 ').replace(reglastmeasureww14space, ' world war 1 ').replace(reglastmeasureww15space, ' world war 1 ').replace(reglastmeasureww16space, ' world war 1 ').replace(reglastmeasureww17space, ' world war 1 ').replace(reglastmeasureww18space, ' world war 1 ').replace(reglastmeasureww19space, ' world war 1 ').replace(reglastmeasureww1slashfirst, '/ world war 1 ').replace(reglastmeasureww1slashafter, ' world war 1 /').replace(reglastmeasureww1slashfirstspace, '/ world war 1 ').replace(reglastmeasureww1slashafterspace, ' world war 1 /').replace(reglastmeasureww21, ' world war 2 ').replace(reglastmeasureww22, ' world war 2 ').replace(reglastmeasureww23, ' world war 2 ').replace(reglastmeasureww24, ' world war 2 ').replace(reglastmeasureww25, ' world war 2 ').replace(reglastmeasureww26, ' world war 2 ').replace(reglastmeasureww27, ' world war 2 ').replace(reglastmeasureww28, ' world war 2 ').replace(reglastmeasureww29, ' world war 2 ').replace(reglastmeasureww21space, ' world war 2 ').replace(reglastmeasureww22space, ' world war 2 ').replace(reglastmeasureww23space, ' world war 2 ').replace(reglastmeasureww24space, ' world war 2 ').replace(reglastmeasureww25space, ' world war 2 ').replace(reglastmeasureww26space, ' world war 2 ').replace(reglastmeasureww27space, ' world war 2 ').replace(reglastmeasureww28space, ' world war 2 ').replace(reglastmeasureww29space, ' world war 2 ').replace(reglastmeasureww2slashfirst, '/ world war 2 ').replace(reglastmeasureww2slashafter, ' world war 2 /').replace(reglastmeasureww2slashfirstspace, '/ world war 2 ').replace(reglastmeasureww2slashafterspace, ' world war 2 /').replace(reglastmeasureww31, ' world war 3 ').replace(reglastmeasureww32, ' world war 3 ').replace(reglastmeasureww33, ' world war 3 ').replace(reglastmeasureww34, ' world war 3 ').replace(reglastmeasureww35, ' world war 3 ').replace(reglastmeasureww36, ' world war 3 ').replace(reglastmeasureww37, ' world war 3 ').replace(reglastmeasureww38, ' world war 3 ').replace(reglastmeasureww39, ' world war 3 ').replace(reglastmeasureww31space, ' world war 3 ').replace(reglastmeasureww32space, ' world war 3 ').replace(reglastmeasureww33space, ' world war 3 ').replace(reglastmeasureww34space, ' world war 3 ').replace(reglastmeasureww35space, ' world war 3 ').replace(reglastmeasureww36space, ' world war 3 ').replace(reglastmeasureww37space, ' world war 3 ').replace(reglastmeasureww38space, ' world war 3 ').replace(reglastmeasureww39space, ' world war 3 ').replace(reglastmeasureww3slashfirst, '/ world war 3 ').replace(reglastmeasureww3slashafter, ' world war 3 /').replace(reglastmeasureww3slashfirstspace, '/ world war 3 ').replace(reglastmeasureww3slashafterspace, ' world war 3 /').replace(reglastmeasurewwiii1, ' world war 3 ').replace(reglastmeasurewwiii2, ' world war 3 ').replace(reglastmeasurewwiii3, ' world war 3 ').replace(reglastmeasurewwiii4, ' world war 3 ').replace(reglastmeasurewwiii5, ' world war 3 ').replace(reglastmeasurewwiii6, ' world war 3 ').replace(reglastmeasurewwiii7, ' world war 3 ').replace(reglastmeasurewwiii8, ' world war 3 ').replace(reglastmeasurewwiii9, ' world war 3 ').replace(reglastmeasurewwiii1space, ' world war 3 ').replace(reglastmeasurewwiii2space, ' world war 3 ').replace(reglastmeasurewwiii3space, ' world war 3 ').replace(reglastmeasurewwiii4space, ' world war 3 ').replace(reglastmeasurewwiii5space, ' world war 3 ').replace(reglastmeasurewwiii6space, ' world war 3 ').replace(reglastmeasurewwiii7space, ' world war 3 ').replace(reglastmeasurewwiii8space, ' world war 3 ').replace(reglastmeasurewwiii9space, ' world war 3 ').replace(reglastmeasurewwiiislashfirst, '/ world war 3 ').replace(reglastmeasurewwiiislashafter, ' world war 3 /').replace(reglastmeasurewwiiislashfirstspace, '/ world war 3 ').replace(reglastmeasurewwiiislashafterspace, ' world war 3 /').replace(reglastmeasurewwii1, ' world war 2 ').replace(reglastmeasurewwii2, ' world war 2 ').replace(reglastmeasurewwii3, ' world war 2 ').replace(reglastmeasurewwii4, ' world war 2 ').replace(reglastmeasurewwii5, ' world war 2 ').replace(reglastmeasurewwii6, ' world war 2 ').replace(reglastmeasurewwii7, ' world war 2 ').replace(reglastmeasurewwii8, ' world war 2 ').replace(reglastmeasurewwii9, ' world war 2 ').replace(reglastmeasurewwii1space, ' world war 2 ').replace(reglastmeasurewwii2space, ' world war 2 ').replace(reglastmeasurewwii3space, ' world war 2 ').replace(reglastmeasurewwii4space, ' world war 2 ').replace(reglastmeasurewwii5space, ' world war 2 ').replace(reglastmeasurewwii6space, ' world war 2 ').replace(reglastmeasurewwii7space, ' world war 2 ').replace(reglastmeasurewwii8space, ' world war 2 ').replace(reglastmeasurewwii9space, ' world war 2 ').replace(reglastmeasurewwiislashfirst, '/ world war 2 ').replace(reglastmeasurewwiislashafter, ' world war 2 /').replace(reglastmeasurewwiislashfirstspace, '/ world war 2 ').replace(reglastmeasurewwiislashafterspace, ' world war 2 /');	
}

function replacefinalpart26(str){
return str.replace(reglastmeasurewwi1, ' world war 1 ').replace(reglastmeasurewwi2, ' world war 1 ').replace(reglastmeasurewwi3, ' world war 1 ').replace(reglastmeasurewwi4, ' world war 1 ').replace(reglastmeasurewwi5, ' world war 1 ').replace(reglastmeasurewwi6, ' world war 1 ').replace(reglastmeasurewwi7, ' world war 1 ').replace(reglastmeasurewwi8, ' world war 1 ').replace(reglastmeasurewwi9, ' world war 1 ').replace(reglastmeasurewwi1space, ' world war 1 ').replace(reglastmeasurewwi2space, ' world war 1 ').replace(reglastmeasurewwi3space, ' world war 1 ').replace(reglastmeasurewwi4space, ' world war 1 ').replace(reglastmeasurewwi5space, ' world war 1 ').replace(reglastmeasurewwi6space, ' world war 1 ').replace(reglastmeasurewwi7space, ' world war 1 ').replace(reglastmeasurewwi8space, ' world war 1 ').replace(reglastmeasurewwi9space, ' world war 1 ').replace(reglastmeasurewwislashfirst, '/ world war 1 ').replace(reglastmeasurewwislashafter, ' world war 1 /').replace(reglastmeasurewwislashfirstspace, '/ world war 1 ').replace(reglastmeasurewwislashafterspace, ' world war 1 /').replace(reglastmeasureqt1, ' quarts ').replace(reglastmeasureqt2, ' quarts ').replace(reglastmeasureqt3, ' quarts ').replace(reglastmeasureqt4, ' quarts ').replace(reglastmeasureqt5, ' quarts ').replace(reglastmeasureqtslashafter, ' quarts /').replace(reglastmeasurekg1, ' kilograms ').replace(reglastmeasurekg2, ' kilograms ').replace(reglastmeasurekg3, ' kilograms ').replace(reglastmeasurekg4, ' kilograms ').replace(reglastmeasurekg5, ' kilograms ').replace(reglastmeasurekgslashafter, ' kilograms /').replace(reglastmeasureft1, ' feet ').replace(reglastmeasureft2, ' feet ').replace(reglastmeasureft3, ' feet ').replace(reglastmeasureft4, ' feet ').replace(reglastmeasureft5, ' feet ').replace(reglastmeasureftslashafter, ' feet /').replace(reglastmeasureyd1, ' yards ').replace(reglastmeasureyd2, ' yards ').replace(reglastmeasureyd3, ' yards ').replace(reglastmeasureyd4, ' yards ').replace(reglastmeasureyd5, ' yards ').replace(reglastmeasureydslashafter, ' yards /').replace(reglastmeasureml1, ' milliliters ').replace(reglastmeasureml2, ' milliliters ').replace(reglastmeasureml3, ' milliliters ').replace(reglastmeasureml4, ' milliliters ').replace(reglastmeasureml5, ' milliliters ').replace(reglastmeasuremlslashafter, ' milliliters /').replace(reglastmeasurekl1, ' kiloliters ').replace(reglastmeasurekl2, ' kiloliters ').replace(reglastmeasurekl3, ' kiloliters ').replace(reglastmeasurekl4, ' kiloliters ').replace(reglastmeasurekl5, ' kiloliters ').replace(reglastmeasureklslashafter, ' kiloliters /').replace(reglastmeasuresq1, ' square ').replace(reglastmeasuresq2, ' square ').replace(reglastmeasuresq3, ' square ').replace(reglastmeasuresq4, ' square ').replace(reglastmeasuresq5, ' square ').replace(reglastmeasuresqslashafter, ' square /').replace(reglastmeasurekm1, ' kilometers ').replace(reglastmeasurekm2, ' kilometers ').replace(reglastmeasurekm3, ' kilometers ').replace(reglastmeasurekm4, ' kilometers ').replace(reglastmeasurekm5, ' kilometers ').replace(reglastmeasurekmslashafter, ' kilometers /').replace(reglastmeasuremm1, ' millimeters ').replace(reglastmeasuremm2, ' millimeters ').replace(reglastmeasuremm3, ' millimeters ').replace(reglastmeasuremm4, ' millimeters ').replace(reglastmeasuremm5, ' millimeters ').replace(reglastmeasuremmslashafter, ' millimeters /').replace(reglastmeasurecm1, ' centimeters ').replace(reglastmeasurecm2, ' centimeters ').replace(reglastmeasurecm3, ' centimeters ').replace(reglastmeasurecm4, ' centimeters ').replace(reglastmeasurecm5, ' centimeters ').replace(reglastmeasurecmslashafter, ' centimeters /').replace(reglastmeasureii1, ' 2 ').replace(reglastmeasureii2, ' 2 ').replace(reglastmeasureii3, ' 2 ').replace(reglastmeasureii4, ' 2 ').replace(reglastmeasureii5, ' 2 ').replace(reglastmeasureiislashafter, ' 2 /').replace(reglastmeasureiii1, ' 3 ').replace(reglastmeasureiii2, ' 3 ').replace(reglastmeasureiii3, ' 3 ').replace(reglastmeasureiii4, ' 3 ').replace(reglastmeasureiii5, ' 3 ').replace(reglastmeasureiiislashafter, ' 3 /').replace(reglastmeasureiv1, ' 4 ').replace(reglastmeasureiv2, ' 4 ').replace(reglastmeasureiv3, ' 4 ').replace(reglastmeasureiv4, ' 4 ').replace(reglastmeasureiv5, ' 4 ').replace(reglastmeasureivslashafter, ' 4 /').replace(reglastmeasurevi1, ' 6 ').replace(reglastmeasurevi2, ' 6 ').replace(reglastmeasurevi3, ' 6 ').replace(reglastmeasurevi4, ' 6 ').replace(reglastmeasurevi5, ' 6 ').replace(reglastmeasurevislashafter, ' 6 /').replace(reglastmeasurevii1, ' 7 ').replace(reglastmeasurevii2, ' 7 ').replace(reglastmeasurevii3, ' 7 ').replace(reglastmeasurevii4, ' 7 ').replace(reglastmeasurevii5, ' 7 ').replace(reglastmeasureviislashafter, ' 7 /').replace(reglastmeasureviii1, ' 8 ').replace(reglastmeasureviii2, ' 8 ').replace(reglastmeasureviii3, ' 8 ').replace(reglastmeasureviii4, ' 8 ').replace(reglastmeasureviii5, ' 8 ').replace(reglastmeasureviiislashafter, ' 8 /').replace(reglastmeasureix1, ' 9 ').replace(reglastmeasureix2, ' 9 ').replace(reglastmeasureix3, ' 9 ').replace(reglastmeasureix4, ' 9 ').replace(reglastmeasureix5, ' 9 ').replace(reglastmeasureixslashafter, ' 9 /').replace(reglastmeasurexi1, ' 11 ').replace(reglastmeasurexi2, ' 11 ').replace(reglastmeasurexi3, ' 11 ').replace(reglastmeasurexi4, ' 11 ').replace(reglastmeasurexi5, ' 11 ').replace(reglastmeasurexislashafter, ' 11 /').replace(reglastmeasurexii1, ' 12 ').replace(reglastmeasurexii2, ' 12 ').replace(reglastmeasurexii3, ' 12 ').replace(reglastmeasurexii4, ' 12 ').replace(reglastmeasurexii5, ' 12 ').replace(reglastmeasurexiislashafter, ' 12 /').replace(reglastmeasurexiii1, ' 13 ').replace(reglastmeasurexiii2, ' 13 ').replace(reglastmeasurexiii3, ' 13 ').replace(reglastmeasurexiii4, ' 13 ').replace(reglastmeasurexiii5, ' 13 ').replace(reglastmeasurexiiislashafter, ' 13 /').replace(reglastmeasure401k, '401k').replace(reglastmeasure1099k, '1099k').replace(reglastmeasuregidoctor, 'gastroenterologist').replace(reglastmeasuregispecialist, 'gastroenterologist').replace(reglastmeasurensfw, '').replace(reglastmeasurefidelity_roth_ira, 'fidelity roth individual retirement account');;	
}

function replacefinalpart27(str){
return str.replace(reglastmeasuregigahertz1, '1gigahertz ').replace(reglastmeasuregigahertz2, '2gigahertz ').replace(reglastmeasuregigahertz3, '3gigahertz ').replace(reglastmeasuregigahertz4, '4gigahertz ').replace(reglastmeasuregigahertz5, '5gigahertz ').replace(reglastmeasuregigahertz6, '6gigahertz ').replace(reglastmeasuregigahertz7, '7gigahertz ').replace(reglastmeasuregigahertz8, '8gigahertz ').replace(reglastmeasuregigahertz9, '9gigahertz ').replace(reglastmeasuregigahertz0, '0gigahertz ').replace(reglastmeasuregigahertz1point, '1gigahertz ').replace(reglastmeasuregigahertz2point, '2gigahertz ').replace(reglastmeasuregigahertz3point, '3gigahertz ').replace(reglastmeasuregigahertz4point, '4gigahertz ').replace(reglastmeasuregigahertz5point, '5gigahertz ').replace(reglastmeasuregigahertz6point, '6gigahertz ').replace(reglastmeasuregigahertz7point, '7gigahertz ').replace(reglastmeasuregigahertz8point, '8gigahertz ').replace(reglastmeasuregigahertz9point, '9gigahertz ').replace(reglastmeasuregigahertz0point, '0gigahertz ').replace(reglastmeasuregigahertz1virgola, '1gigahertz ').replace(reglastmeasuregigahertz2virgola, '2gigahertz ').replace(reglastmeasuregigahertz3virgola, '3gigahertz ').replace(reglastmeasuregigahertz4virgola, '4gigahertz ').replace(reglastmeasuregigahertz5virgola, '5gigahertz ').replace(reglastmeasuregigahertz6virgola, '6gigahertz ').replace(reglastmeasuregigahertz7virgola, '7gigahertz ').replace(reglastmeasuregigahertz8virgola, '8gigahertz ').replace(reglastmeasuregigahertz9virgola, '9gigahertz ').replace(reglastmeasuregigahertz0virgola, '0gigahertz ').replace(reglastmeasuregigahertz1slash, '1gigahertz /').replace(reglastmeasuregigahertz2slash, '2gigahertz /').replace(reglastmeasuregigahertz3slash, '3gigahertz /').replace(reglastmeasuregigahertz4slash, '4gigahertz /').replace(reglastmeasuregigahertz5slash, '5gigahertz /').replace(reglastmeasuregigahertz6slash, '6gigahertz /').replace(reglastmeasuregigahertz7slash, '7gigahertz /').replace(reglastmeasuregigahertz8slash, '8gigahertz /').replace(reglastmeasuregigahertz9slash, '9gigahertz /').replace(reglastmeasuregigahertz0slash, '0gigahertz /').replace(reglastmeasuregigahertz1question, '1gigahertz ').replace(reglastmeasuregigahertz2question, '2gigahertz ').replace(reglastmeasuregigahertz3question, '3gigahertz ').replace(reglastmeasuregigahertz4question, '4gigahertz ').replace(reglastmeasuregigahertz5question, '5gigahertz ').replace(reglastmeasuregigahertz6question, '6gigahertz ').replace(reglastmeasuregigahertz7question, '7gigahertz ').replace(reglastmeasuregigahertz8question, '8gigahertz ').replace(reglastmeasuregigahertz9question, '9gigahertz ').replace(reglastmeasuregigahertz0question, '0gigahertz ').replace(reglastmeasuregigahertz1exclam, '1gigahertz ').replace(reglastmeasuregigahertz2exclam, '2gigahertz ').replace(reglastmeasuregigahertz3exclam, '3gigahertz ').replace(reglastmeasuregigahertz4exclam, '4gigahertz ').replace(reglastmeasuregigahertz5exclam, '5gigahertz ').replace(reglastmeasuregigahertz6exclam, '6gigahertz ').replace(reglastmeasuregigahertz7exclam, '7gigahertz ').replace(reglastmeasuregigahertz8exclam, '8gigahertz ').replace(reglastmeasuregigahertz9exclam, '9gigahertz ').replace(reglastmeasuregigahertz0exclam, '0gigahertz ').replace(reglastmeasuregigahertz1space, '1gigahertz ').replace(reglastmeasuregigahertz2space, '2gigahertz ').replace(reglastmeasuregigahertz3space, '3gigahertz ').replace(reglastmeasuregigahertz4space, '4gigahertz ').replace(reglastmeasuregigahertz5space, '5gigahertz ').replace(reglastmeasuregigahertz6space, '6gigahertz ').replace(reglastmeasuregigahertz7space, '7gigahertz ').replace(reglastmeasuregigahertz8space, '8gigahertz ').replace(reglastmeasuregigahertz9space, '9gigahertz ').replace(reglastmeasuregigahertz0space, '0gigahertz ').replace(reglastmeasuregigahertz1exclamspace, '1gigahertz ').replace(reglastmeasuregigahertz2exclamspace, '2gigahertz ').replace(reglastmeasuregigahertz3exclamspace, '3gigahertz ').replace(reglastmeasuregigahertz4exclamspace, '4gigahertz ').replace(reglastmeasuregigahertz5exclamspace, '5gigahertz ').replace(reglastmeasuregigahertz6exclamspace, '6gigahertz ').replace(reglastmeasuregigahertz7exclamspace, '7gigahertz ').replace(reglastmeasuregigahertz8exclamspace, '8gigahertz ').replace(reglastmeasuregigahertz9exclamspace, '9gigahertz ').replace(reglastmeasuregigahertz0exclamspace, '0gigahertz ').replace(reglastmeasuregigahertz1slashspace, '1gigahertz /').replace(reglastmeasuregigahertz2slashspace, '2gigahertz /').replace(reglastmeasuregigahertz3slashspace, '3gigahertz /').replace(reglastmeasuregigahertz4slashspace, '4gigahertz /').replace(reglastmeasuregigahertz5slashspace, '5gigahertz /').replace(reglastmeasuregigahertz6slashspace, '6gigahertz /').replace(reglastmeasuregigahertz7slashspace, '7gigahertz /').replace(reglastmeasuregigahertz8slashspace, '8gigahertz /').replace(reglastmeasuregigahertz9slashspace, '9gigahertz /').replace(reglastmeasuregigahertz0slashspace, '0gigahertz /').replace(reglastmeasuregigahertz1virgolaspace, '1gigahertz ').replace(reglastmeasuregigahertz2virgolaspace, '2gigahertz ').replace(reglastmeasuregigahertz3virgolaspace, '3gigahertz ').replace(reglastmeasuregigahertz4virgolaspace, '4gigahertz ').replace(reglastmeasuregigahertz5virgolaspace, '5gigahertz ').replace(reglastmeasuregigahertz6virgolaspace, '6gigahertz ').replace(reglastmeasuregigahertz7virgolaspace, '7gigahertz ').replace(reglastmeasuregigahertz8virgolaspace, '8gigahertz ').replace(reglastmeasuregigahertz9virgolaspace, '9gigahertz ').replace(reglastmeasuregigahertz0virgolaspace, '0gigahertz ').replace(reglastmeasuregigahertz1pointspace, '1gigahertz ').replace(reglastmeasuregigahertz2pointspace, '2gigahertz ').replace(reglastmeasuregigahertz3pointspace, '3gigahertz ').replace(reglastmeasuregigahertz4pointspace, '4gigahertz ').replace(reglastmeasuregigahertz5pointspace, '5gigahertz ').replace(reglastmeasuregigahertz6pointspace, '6gigahertz ').replace(reglastmeasuregigahertz7pointspace, '7gigahertz ').replace(reglastmeasuregigahertz8pointspace, '8gigahertz ').replace(reglastmeasuregigahertz9pointspace, '9gigahertz ').replace(reglastmeasuregigahertz0pointspace, '0gigahertz ').replace(reglastmeasuregigahertz1questionspace, '1gigahertz ').replace(reglastmeasuregigahertz2questionspace, '2gigahertz ').replace(reglastmeasuregigahertz3questionspace, '3gigahertz ').replace(reglastmeasuregigahertz4questionspace, '4gigahertz ').replace(reglastmeasuregigahertz5questionspace, '5gigahertz ').replace(reglastmeasuregigahertz6questionspace, '6gigahertz ').replace(reglastmeasuregigahertz7questionspace, '7gigahertz ').replace(reglastmeasuregigahertz8questionspace, '8gigahertz ').replace(reglastmeasuregigahertz9questionspace, '9gigahertz ').replace(reglastmeasuregigahertz0questionspace, '0gigahertz ');
}

function replacefinalpart28(str){
return str.replace(reglastmeasureyears1, '1years ').replace(reglastmeasureyears2, '2years ').replace(reglastmeasureyears3, '3years ').replace(reglastmeasureyears4, '4years ').replace(reglastmeasureyears5, '5years ').replace(reglastmeasureyears6, '6years ').replace(reglastmeasureyears7, '7years ').replace(reglastmeasureyears8, '8years ').replace(reglastmeasureyears9, '9years ').replace(reglastmeasureyears0, '0years ').replace(reglastmeasureyears1point, '1years ').replace(reglastmeasureyears2point, '2years ').replace(reglastmeasureyears3point, '3years ').replace(reglastmeasureyears4point, '4years ').replace(reglastmeasureyears5point, '5years ').replace(reglastmeasureyears6point, '6years ').replace(reglastmeasureyears7point, '7years ').replace(reglastmeasureyears8point, '8years ').replace(reglastmeasureyears9point, '9years ').replace(reglastmeasureyears0point, '0years ').replace(reglastmeasureyears1virgola, '1years ').replace(reglastmeasureyears2virgola, '2years ').replace(reglastmeasureyears3virgola, '3years ').replace(reglastmeasureyears4virgola, '4years ').replace(reglastmeasureyears5virgola, '5years ').replace(reglastmeasureyears6virgola, '6years ').replace(reglastmeasureyears7virgola, '7years ').replace(reglastmeasureyears8virgola, '8years ').replace(reglastmeasureyears9virgola, '9years ').replace(reglastmeasureyears0virgola, '0years ').replace(reglastmeasureyears1slash, '1years /').replace(reglastmeasureyears2slash, '2years /').replace(reglastmeasureyears3slash, '3years /').replace(reglastmeasureyears4slash, '4years /').replace(reglastmeasureyears5slash, '5years /').replace(reglastmeasureyears6slash, '6years /').replace(reglastmeasureyears7slash, '7years /').replace(reglastmeasureyears8slash, '8years /').replace(reglastmeasureyears9slash, '9years /').replace(reglastmeasureyears0slash, '0years /').replace(reglastmeasureyears1question, '1years ').replace(reglastmeasureyears2question, '2years ').replace(reglastmeasureyears3question, '3years ').replace(reglastmeasureyears4question, '4years ').replace(reglastmeasureyears5question, '5years ').replace(reglastmeasureyears6question, '6years ').replace(reglastmeasureyears7question, '7years ').replace(reglastmeasureyears8question, '8years ').replace(reglastmeasureyears9question, '9years ').replace(reglastmeasureyears0question, '0years ').replace(reglastmeasureyears1exclam, '1years ').replace(reglastmeasureyears2exclam, '2years ').replace(reglastmeasureyears3exclam, '3years ').replace(reglastmeasureyears4exclam, '4years ').replace(reglastmeasureyears5exclam, '5years ').replace(reglastmeasureyears6exclam, '6years ').replace(reglastmeasureyears7exclam, '7years ').replace(reglastmeasureyears8exclam, '8years ').replace(reglastmeasureyears9exclam, '9years ').replace(reglastmeasureyears0exclam, '0years ').replace(reglastmeasureyears1space, '1years ').replace(reglastmeasureyears2space, '2years ').replace(reglastmeasureyears3space, '3years ').replace(reglastmeasureyears4space, '4years ').replace(reglastmeasureyears5space, '5years ').replace(reglastmeasureyears6space, '6years ').replace(reglastmeasureyears7space, '7years ').replace(reglastmeasureyears8space, '8years ').replace(reglastmeasureyears9space, '9years ').replace(reglastmeasureyears0space, '0years ').replace(reglastmeasureyears1exclamspace, '1years ').replace(reglastmeasureyears2exclamspace, '2years ').replace(reglastmeasureyears3exclamspace, '3years ').replace(reglastmeasureyears4exclamspace, '4years ').replace(reglastmeasureyears5exclamspace, '5years ').replace(reglastmeasureyears6exclamspace, '6years ').replace(reglastmeasureyears7exclamspace, '7years ').replace(reglastmeasureyears8exclamspace, '8years ').replace(reglastmeasureyears9exclamspace, '9years ').replace(reglastmeasureyears0exclamspace, '0years ').replace(reglastmeasureyears1slashspace, '1years /').replace(reglastmeasureyears2slashspace, '2years /').replace(reglastmeasureyears3slashspace, '3years /').replace(reglastmeasureyears4slashspace, '4years /').replace(reglastmeasureyears5slashspace, '5years /').replace(reglastmeasureyears6slashspace, '6years /').replace(reglastmeasureyears7slashspace, '7years /').replace(reglastmeasureyears8slashspace, '8years /').replace(reglastmeasureyears9slashspace, '9years /').replace(reglastmeasureyears0slashspace, '0years /').replace(reglastmeasureyears1virgolaspace, '1years ').replace(reglastmeasureyears2virgolaspace, '2years ').replace(reglastmeasureyears3virgolaspace, '3years ').replace(reglastmeasureyears4virgolaspace, '4years ').replace(reglastmeasureyears5virgolaspace, '5years ').replace(reglastmeasureyears6virgolaspace, '6years ').replace(reglastmeasureyears7virgolaspace, '7years ').replace(reglastmeasureyears8virgolaspace, '8years ').replace(reglastmeasureyears9virgolaspace, '9years ').replace(reglastmeasureyears0virgolaspace, '0years ').replace(reglastmeasureyears1pointspace, '1years ').replace(reglastmeasureyears2pointspace, '2years ').replace(reglastmeasureyears3pointspace, '3years ').replace(reglastmeasureyears4pointspace, '4years ').replace(reglastmeasureyears5pointspace, '5years ').replace(reglastmeasureyears6pointspace, '6years ').replace(reglastmeasureyears7pointspace, '7years ').replace(reglastmeasureyears8pointspace, '8years ').replace(reglastmeasureyears9pointspace, '9years ').replace(reglastmeasureyears0pointspace, '0years ').replace(reglastmeasureyears1questionspace, '1years ').replace(reglastmeasureyears2questionspace, '2years ').replace(reglastmeasureyears3questionspace, '3years ').replace(reglastmeasureyears4questionspace, '4years ').replace(reglastmeasureyears5questionspace, '5years ').replace(reglastmeasureyears6questionspace, '6years ').replace(reglastmeasureyears7questionspace, '7years ').replace(reglastmeasureyears8questionspace, '8years ').replace(reglastmeasureyears9questionspace, '9years ').replace(reglastmeasureyears0questionspace, '0years ');
}

function replacefinalpart29(str){
return str.replace(reglastmeasureyearsold1, '1years ').replace(reglastmeasureyearsold2, '2years ').replace(reglastmeasureyearsold3, '3years ').replace(reglastmeasureyearsold4, '4years ').replace(reglastmeasureyearsold5, '5years ').replace(reglastmeasureyearsold6, '6years ').replace(reglastmeasureyearsold7, '7years ').replace(reglastmeasureyearsold8, '8years ').replace(reglastmeasureyearsold9, '9years ').replace(reglastmeasureyearsold0, '0years ').replace(reglastmeasureyearsold1point, '1years ').replace(reglastmeasureyearsold2point, '2years ').replace(reglastmeasureyearsold3point, '3years ').replace(reglastmeasureyearsold4point, '4years ').replace(reglastmeasureyearsold5point, '5years ').replace(reglastmeasureyearsold6point, '6years ').replace(reglastmeasureyearsold7point, '7years ').replace(reglastmeasureyearsold8point, '8years ').replace(reglastmeasureyearsold9point, '9years ').replace(reglastmeasureyearsold0point, '0years ').replace(reglastmeasureyearsold1virgola, '1years ').replace(reglastmeasureyearsold2virgola, '2years ').replace(reglastmeasureyearsold3virgola, '3years ').replace(reglastmeasureyearsold4virgola, '4years ').replace(reglastmeasureyearsold5virgola, '5years ').replace(reglastmeasureyearsold6virgola, '6years ').replace(reglastmeasureyearsold7virgola, '7years ').replace(reglastmeasureyearsold8virgola, '8years ').replace(reglastmeasureyearsold9virgola, '9years ').replace(reglastmeasureyearsold0virgola, '0years ').replace(reglastmeasureyearsold1slash, '1years /').replace(reglastmeasureyearsold2slash, '2years /').replace(reglastmeasureyearsold3slash, '3years /').replace(reglastmeasureyearsold4slash, '4years /').replace(reglastmeasureyearsold5slash, '5years /').replace(reglastmeasureyearsold6slash, '6years /').replace(reglastmeasureyearsold7slash, '7years /').replace(reglastmeasureyearsold8slash, '8years /').replace(reglastmeasureyearsold9slash, '9years /').replace(reglastmeasureyearsold0slash, '0years /').replace(reglastmeasureyearsold1question, '1years ').replace(reglastmeasureyearsold2question, '2years ').replace(reglastmeasureyearsold3question, '3years ').replace(reglastmeasureyearsold4question, '4years ').replace(reglastmeasureyearsold5question, '5years ').replace(reglastmeasureyearsold6question, '6years ').replace(reglastmeasureyearsold7question, '7years ').replace(reglastmeasureyearsold8question, '8years ').replace(reglastmeasureyearsold9question, '9years ').replace(reglastmeasureyearsold0question, '0years ').replace(reglastmeasureyearsold1exclam, '1years ').replace(reglastmeasureyearsold2exclam, '2years ').replace(reglastmeasureyearsold3exclam, '3years ').replace(reglastmeasureyearsold4exclam, '4years ').replace(reglastmeasureyearsold5exclam, '5years ').replace(reglastmeasureyearsold6exclam, '6years ').replace(reglastmeasureyearsold7exclam, '7years ').replace(reglastmeasureyearsold8exclam, '8years ').replace(reglastmeasureyearsold9exclam, '9years ').replace(reglastmeasureyearsold0exclam, '0years ').replace(reglastmeasureyearsold1space, '1years ').replace(reglastmeasureyearsold2space, '2years ').replace(reglastmeasureyearsold3space, '3years ').replace(reglastmeasureyearsold4space, '4years ').replace(reglastmeasureyearsold5space, '5years ').replace(reglastmeasureyearsold6space, '6years ').replace(reglastmeasureyearsold7space, '7years ').replace(reglastmeasureyearsold8space, '8years ').replace(reglastmeasureyearsold9space, '9years ').replace(reglastmeasureyearsold0space, '0years ').replace(reglastmeasureyearsold1exclamspace, '1years ').replace(reglastmeasureyearsold2exclamspace, '2years ').replace(reglastmeasureyearsold3exclamspace, '3years ').replace(reglastmeasureyearsold4exclamspace, '4years ').replace(reglastmeasureyearsold5exclamspace, '5years ').replace(reglastmeasureyearsold6exclamspace, '6years ').replace(reglastmeasureyearsold7exclamspace, '7years ').replace(reglastmeasureyearsold8exclamspace, '8years ').replace(reglastmeasureyearsold9exclamspace, '9years ').replace(reglastmeasureyearsold0exclamspace, '0years ').replace(reglastmeasureyearsold1slashspace, '1years /').replace(reglastmeasureyearsold2slashspace, '2years /').replace(reglastmeasureyearsold3slashspace, '3years /').replace(reglastmeasureyearsold4slashspace, '4years /').replace(reglastmeasureyearsold5slashspace, '5years /').replace(reglastmeasureyearsold6slashspace, '6years /').replace(reglastmeasureyearsold7slashspace, '7years /').replace(reglastmeasureyearsold8slashspace, '8years /').replace(reglastmeasureyearsold9slashspace, '9years /').replace(reglastmeasureyearsold0slashspace, '0years /').replace(reglastmeasureyearsold1virgolaspace, '1years ').replace(reglastmeasureyearsold2virgolaspace, '2years ').replace(reglastmeasureyearsold3virgolaspace, '3years ').replace(reglastmeasureyearsold4virgolaspace, '4years ').replace(reglastmeasureyearsold5virgolaspace, '5years ').replace(reglastmeasureyearsold6virgolaspace, '6years ').replace(reglastmeasureyearsold7virgolaspace, '7years ').replace(reglastmeasureyearsold8virgolaspace, '8years ').replace(reglastmeasureyearsold9virgolaspace, '9years ').replace(reglastmeasureyearsold0virgolaspace, '0years ').replace(reglastmeasureyearsold1pointspace, '1years ').replace(reglastmeasureyearsold2pointspace, '2years ').replace(reglastmeasureyearsold3pointspace, '3years ').replace(reglastmeasureyearsold4pointspace, '4years ').replace(reglastmeasureyearsold5pointspace, '5years ').replace(reglastmeasureyearsold6pointspace, '6years ').replace(reglastmeasureyearsold7pointspace, '7years ').replace(reglastmeasureyearsold8pointspace, '8years ').replace(reglastmeasureyearsold9pointspace, '9years ').replace(reglastmeasureyearsold0pointspace, '0years ').replace(reglastmeasureyearsold1questionspace, '1years ').replace(reglastmeasureyearsold2questionspace, '2years ').replace(reglastmeasureyearsold3questionspace, '3years ').replace(reglastmeasureyearsold4questionspace, '4years ').replace(reglastmeasureyearsold5questionspace, '5years ').replace(reglastmeasureyearsold6questionspace, '6years ').replace(reglastmeasureyearsold7questionspace, '7years ').replace(reglastmeasureyearsold8questionspace, '8years ').replace(reglastmeasureyearsold9questionspace, '9years ').replace(reglastmeasureyearsold0questionspace, '0years ');
}

function replacefinalpart30(str){
return str.replace(reglastmeasureusdollars1, '1dollars ').replace(reglastmeasureusdollars2, '2dollars ').replace(reglastmeasureusdollars3, '3dollars ').replace(reglastmeasureusdollars4, '4dollars ').replace(reglastmeasureusdollars5, '5dollars ').replace(reglastmeasureusdollars6, '6dollars ').replace(reglastmeasureusdollars7, '7dollars ').replace(reglastmeasureusdollars8, '8dollars ').replace(reglastmeasureusdollars9, '9dollars ').replace(reglastmeasureusdollars0, '0dollars ').replace(reglastmeasureusdollars1point, '1dollars ').replace(reglastmeasureusdollars2point, '2dollars ').replace(reglastmeasureusdollars3point, '3dollars ').replace(reglastmeasureusdollars4point, '4dollars ').replace(reglastmeasureusdollars5point, '5dollars ').replace(reglastmeasureusdollars6point, '6dollars ').replace(reglastmeasureusdollars7point, '7dollars ').replace(reglastmeasureusdollars8point, '8dollars ').replace(reglastmeasureusdollars9point, '9dollars ').replace(reglastmeasureusdollars0point, '0dollars ').replace(reglastmeasureusdollars1virgola, '1dollars ').replace(reglastmeasureusdollars2virgola, '2dollars ').replace(reglastmeasureusdollars3virgola, '3dollars ').replace(reglastmeasureusdollars4virgola, '4dollars ').replace(reglastmeasureusdollars5virgola, '5dollars ').replace(reglastmeasureusdollars6virgola, '6dollars ').replace(reglastmeasureusdollars7virgola, '7dollars ').replace(reglastmeasureusdollars8virgola, '8dollars ').replace(reglastmeasureusdollars9virgola, '9dollars ').replace(reglastmeasureusdollars0virgola, '0dollars ').replace(reglastmeasureusdollars1slash, '1dollars /').replace(reglastmeasureusdollars2slash, '2dollars /').replace(reglastmeasureusdollars3slash, '3dollars /').replace(reglastmeasureusdollars4slash, '4dollars /').replace(reglastmeasureusdollars5slash, '5dollars /').replace(reglastmeasureusdollars6slash, '6dollars /').replace(reglastmeasureusdollars7slash, '7dollars /').replace(reglastmeasureusdollars8slash, '8dollars /').replace(reglastmeasureusdollars9slash, '9dollars /').replace(reglastmeasureusdollars0slash, '0dollars /').replace(reglastmeasureusdollars1question, '1dollars ').replace(reglastmeasureusdollars2question, '2dollars ').replace(reglastmeasureusdollars3question, '3dollars ').replace(reglastmeasureusdollars4question, '4dollars ').replace(reglastmeasureusdollars5question, '5dollars ').replace(reglastmeasureusdollars6question, '6dollars ').replace(reglastmeasureusdollars7question, '7dollars ').replace(reglastmeasureusdollars8question, '8dollars ').replace(reglastmeasureusdollars9question, '9dollars ').replace(reglastmeasureusdollars0question, '0dollars ').replace(reglastmeasureusdollars1exclam, '1dollars ').replace(reglastmeasureusdollars2exclam, '2dollars ').replace(reglastmeasureusdollars3exclam, '3dollars ').replace(reglastmeasureusdollars4exclam, '4dollars ').replace(reglastmeasureusdollars5exclam, '5dollars ').replace(reglastmeasureusdollars6exclam, '6dollars ').replace(reglastmeasureusdollars7exclam, '7dollars ').replace(reglastmeasureusdollars8exclam, '8dollars ').replace(reglastmeasureusdollars9exclam, '9dollars ').replace(reglastmeasureusdollars0exclam, '0dollars ').replace(reglastmeasureusdollars1space, '1dollars ').replace(reglastmeasureusdollars2space, '2dollars ').replace(reglastmeasureusdollars3space, '3dollars ').replace(reglastmeasureusdollars4space, '4dollars ').replace(reglastmeasureusdollars5space, '5dollars ').replace(reglastmeasureusdollars6space, '6dollars ').replace(reglastmeasureusdollars7space, '7dollars ').replace(reglastmeasureusdollars8space, '8dollars ').replace(reglastmeasureusdollars9space, '9dollars ').replace(reglastmeasureusdollars0space, '0dollars ').replace(reglastmeasureusdollars1exclamspace, '1dollars ').replace(reglastmeasureusdollars2exclamspace, '2dollars ').replace(reglastmeasureusdollars3exclamspace, '3dollars ').replace(reglastmeasureusdollars4exclamspace, '4dollars ').replace(reglastmeasureusdollars5exclamspace, '5dollars ').replace(reglastmeasureusdollars6exclamspace, '6dollars ').replace(reglastmeasureusdollars7exclamspace, '7dollars ').replace(reglastmeasureusdollars8exclamspace, '8dollars ').replace(reglastmeasureusdollars9exclamspace, '9dollars ').replace(reglastmeasureusdollars0exclamspace, '0dollars ').replace(reglastmeasureusdollars1slashspace, '1dollars /').replace(reglastmeasureusdollars2slashspace, '2dollars /').replace(reglastmeasureusdollars3slashspace, '3dollars /').replace(reglastmeasureusdollars4slashspace, '4dollars /').replace(reglastmeasureusdollars5slashspace, '5dollars /').replace(reglastmeasureusdollars6slashspace, '6dollars /').replace(reglastmeasureusdollars7slashspace, '7dollars /').replace(reglastmeasureusdollars8slashspace, '8dollars /').replace(reglastmeasureusdollars9slashspace, '9dollars /').replace(reglastmeasureusdollars0slashspace, '0dollars /').replace(reglastmeasureusdollars1virgolaspace, '1dollars ').replace(reglastmeasureusdollars2virgolaspace, '2dollars ').replace(reglastmeasureusdollars3virgolaspace, '3dollars ').replace(reglastmeasureusdollars4virgolaspace, '4dollars ').replace(reglastmeasureusdollars5virgolaspace, '5dollars ').replace(reglastmeasureusdollars6virgolaspace, '6dollars ').replace(reglastmeasureusdollars7virgolaspace, '7dollars ').replace(reglastmeasureusdollars8virgolaspace, '8dollars ').replace(reglastmeasureusdollars9virgolaspace, '9dollars ').replace(reglastmeasureusdollars0virgolaspace, '0dollars ').replace(reglastmeasureusdollars1pointspace, '1dollars ').replace(reglastmeasureusdollars2pointspace, '2dollars ').replace(reglastmeasureusdollars3pointspace, '3dollars ').replace(reglastmeasureusdollars4pointspace, '4dollars ').replace(reglastmeasureusdollars5pointspace, '5dollars ').replace(reglastmeasureusdollars6pointspace, '6dollars ').replace(reglastmeasureusdollars7pointspace, '7dollars ').replace(reglastmeasureusdollars8pointspace, '8dollars ').replace(reglastmeasureusdollars9pointspace, '9dollars ').replace(reglastmeasureusdollars0pointspace, '0dollars ').replace(reglastmeasureusdollars1questionspace, '1dollars ').replace(reglastmeasureusdollars2questionspace, '2dollars ').replace(reglastmeasureusdollars3questionspace, '3dollars ').replace(reglastmeasureusdollars4questionspace, '4dollars ').replace(reglastmeasureusdollars5questionspace, '5dollars ').replace(reglastmeasureusdollars6questionspace, '6dollars ').replace(reglastmeasureusdollars7questionspace, '7dollars ').replace(reglastmeasureusdollars8questionspace, '8dollars ').replace(reglastmeasureusdollars9questionspace, '9dollars ').replace(reglastmeasureusdollars0questionspace, '0dollars ');
}

function replacefinalpart31(str){
return str.replace(reglastmeasureminutes1, '1minutes ').replace(reglastmeasureminutes2, '2minutes ').replace(reglastmeasureminutes3, '3minutes ').replace(reglastmeasureminutes4, '4minutes ').replace(reglastmeasureminutes5, '5minutes ').replace(reglastmeasureminutes6, '6minutes ').replace(reglastmeasureminutes7, '7minutes ').replace(reglastmeasureminutes8, '8minutes ').replace(reglastmeasureminutes9, '9minutes ').replace(reglastmeasureminutes0, '0minutes ').replace(reglastmeasureminutes1point, '1minutes ').replace(reglastmeasureminutes2point, '2minutes ').replace(reglastmeasureminutes3point, '3minutes ').replace(reglastmeasureminutes4point, '4minutes ').replace(reglastmeasureminutes5point, '5minutes ').replace(reglastmeasureminutes6point, '6minutes ').replace(reglastmeasureminutes7point, '7minutes ').replace(reglastmeasureminutes8point, '8minutes ').replace(reglastmeasureminutes9point, '9minutes ').replace(reglastmeasureminutes0point, '0minutes ').replace(reglastmeasureminutes1virgola, '1minutes ').replace(reglastmeasureminutes2virgola, '2minutes ').replace(reglastmeasureminutes3virgola, '3minutes ').replace(reglastmeasureminutes4virgola, '4minutes ').replace(reglastmeasureminutes5virgola, '5minutes ').replace(reglastmeasureminutes6virgola, '6minutes ').replace(reglastmeasureminutes7virgola, '7minutes ').replace(reglastmeasureminutes8virgola, '8minutes ').replace(reglastmeasureminutes9virgola, '9minutes ').replace(reglastmeasureminutes0virgola, '0minutes ').replace(reglastmeasureminutes1slash, '1minutes /').replace(reglastmeasureminutes2slash, '2minutes /').replace(reglastmeasureminutes3slash, '3minutes /').replace(reglastmeasureminutes4slash, '4minutes /').replace(reglastmeasureminutes5slash, '5minutes /').replace(reglastmeasureminutes6slash, '6minutes /').replace(reglastmeasureminutes7slash, '7minutes /').replace(reglastmeasureminutes8slash, '8minutes /').replace(reglastmeasureminutes9slash, '9minutes /').replace(reglastmeasureminutes0slash, '0minutes /').replace(reglastmeasureminutes1question, '1minutes ').replace(reglastmeasureminutes2question, '2minutes ').replace(reglastmeasureminutes3question, '3minutes ').replace(reglastmeasureminutes4question, '4minutes ').replace(reglastmeasureminutes5question, '5minutes ').replace(reglastmeasureminutes6question, '6minutes ').replace(reglastmeasureminutes7question, '7minutes ').replace(reglastmeasureminutes8question, '8minutes ').replace(reglastmeasureminutes9question, '9minutes ').replace(reglastmeasureminutes0question, '0minutes ').replace(reglastmeasureminutes1exclam, '1minutes ').replace(reglastmeasureminutes2exclam, '2minutes ').replace(reglastmeasureminutes3exclam, '3minutes ').replace(reglastmeasureminutes4exclam, '4minutes ').replace(reglastmeasureminutes5exclam, '5minutes ').replace(reglastmeasureminutes6exclam, '6minutes ').replace(reglastmeasureminutes7exclam, '7minutes ').replace(reglastmeasureminutes8exclam, '8minutes ').replace(reglastmeasureminutes9exclam, '9minutes ').replace(reglastmeasureminutes0exclam, '0minutes ').replace(reglastmeasureminutes1space, '1minutes ').replace(reglastmeasureminutes2space, '2minutes ').replace(reglastmeasureminutes3space, '3minutes ').replace(reglastmeasureminutes4space, '4minutes ').replace(reglastmeasureminutes5space, '5minutes ').replace(reglastmeasureminutes6space, '6minutes ').replace(reglastmeasureminutes7space, '7minutes ').replace(reglastmeasureminutes8space, '8minutes ').replace(reglastmeasureminutes9space, '9minutes ').replace(reglastmeasureminutes0space, '0minutes ').replace(reglastmeasureminutes1exclamspace, '1minutes ').replace(reglastmeasureminutes2exclamspace, '2minutes ').replace(reglastmeasureminutes3exclamspace, '3minutes ').replace(reglastmeasureminutes4exclamspace, '4minutes ').replace(reglastmeasureminutes5exclamspace, '5minutes ').replace(reglastmeasureminutes6exclamspace, '6minutes ').replace(reglastmeasureminutes7exclamspace, '7minutes ').replace(reglastmeasureminutes8exclamspace, '8minutes ').replace(reglastmeasureminutes9exclamspace, '9minutes ').replace(reglastmeasureminutes0exclamspace, '0minutes ').replace(reglastmeasureminutes1slashspace, '1minutes /').replace(reglastmeasureminutes2slashspace, '2minutes /').replace(reglastmeasureminutes3slashspace, '3minutes /').replace(reglastmeasureminutes4slashspace, '4minutes /').replace(reglastmeasureminutes5slashspace, '5minutes /').replace(reglastmeasureminutes6slashspace, '6minutes /').replace(reglastmeasureminutes7slashspace, '7minutes /').replace(reglastmeasureminutes8slashspace, '8minutes /').replace(reglastmeasureminutes9slashspace, '9minutes /').replace(reglastmeasureminutes0slashspace, '0minutes /').replace(reglastmeasureminutes1virgolaspace, '1minutes ').replace(reglastmeasureminutes2virgolaspace, '2minutes ').replace(reglastmeasureminutes3virgolaspace, '3minutes ').replace(reglastmeasureminutes4virgolaspace, '4minutes ').replace(reglastmeasureminutes5virgolaspace, '5minutes ').replace(reglastmeasureminutes6virgolaspace, '6minutes ').replace(reglastmeasureminutes7virgolaspace, '7minutes ').replace(reglastmeasureminutes8virgolaspace, '8minutes ').replace(reglastmeasureminutes9virgolaspace, '9minutes ').replace(reglastmeasureminutes0virgolaspace, '0minutes ').replace(reglastmeasureminutes1pointspace, '1minutes ').replace(reglastmeasureminutes2pointspace, '2minutes ').replace(reglastmeasureminutes3pointspace, '3minutes ').replace(reglastmeasureminutes4pointspace, '4minutes ').replace(reglastmeasureminutes5pointspace, '5minutes ').replace(reglastmeasureminutes6pointspace, '6minutes ').replace(reglastmeasureminutes7pointspace, '7minutes ').replace(reglastmeasureminutes8pointspace, '8minutes ').replace(reglastmeasureminutes9pointspace, '9minutes ').replace(reglastmeasureminutes0pointspace, '0minutes ').replace(reglastmeasureminutes1questionspace, '1minutes ').replace(reglastmeasureminutes2questionspace, '2minutes ').replace(reglastmeasureminutes3questionspace, '3minutes ').replace(reglastmeasureminutes4questionspace, '4minutes ').replace(reglastmeasureminutes5questionspace, '5minutes ').replace(reglastmeasureminutes6questionspace, '6minutes ').replace(reglastmeasureminutes7questionspace, '7minutes ').replace(reglastmeasureminutes8questionspace, '8minutes ').replace(reglastmeasureminutes9questionspace, '9minutes ').replace(reglastmeasureminutes0questionspace, '0minutes ');
}

function replacefinalpart32(str){
return str.replace(reglastmeasurehourshr1, '1hours ').replace(reglastmeasurehourshr2, '2hours ').replace(reglastmeasurehourshr3, '3hours ').replace(reglastmeasurehourshr4, '4hours ').replace(reglastmeasurehourshr5, '5hours ').replace(reglastmeasurehourshr6, '6hours ').replace(reglastmeasurehourshr7, '7hours ').replace(reglastmeasurehourshr8, '8hours ').replace(reglastmeasurehourshr9, '9hours ').replace(reglastmeasurehourshr0, '0hours ').replace(reglastmeasurehourshr1point, '1hours ').replace(reglastmeasurehourshr2point, '2hours ').replace(reglastmeasurehourshr3point, '3hours ').replace(reglastmeasurehourshr4point, '4hours ').replace(reglastmeasurehourshr5point, '5hours ').replace(reglastmeasurehourshr6point, '6hours ').replace(reglastmeasurehourshr7point, '7hours ').replace(reglastmeasurehourshr8point, '8hours ').replace(reglastmeasurehourshr9point, '9hours ').replace(reglastmeasurehourshr0point, '0hours ').replace(reglastmeasurehourshr1virgola, '1hours ').replace(reglastmeasurehourshr2virgola, '2hours ').replace(reglastmeasurehourshr3virgola, '3hours ').replace(reglastmeasurehourshr4virgola, '4hours ').replace(reglastmeasurehourshr5virgola, '5hours ').replace(reglastmeasurehourshr6virgola, '6hours ').replace(reglastmeasurehourshr7virgola, '7hours ').replace(reglastmeasurehourshr8virgola, '8hours ').replace(reglastmeasurehourshr9virgola, '9hours ').replace(reglastmeasurehourshr0virgola, '0hours ').replace(reglastmeasurehourshr1slash, '1hours /').replace(reglastmeasurehourshr2slash, '2hours /').replace(reglastmeasurehourshr3slash, '3hours /').replace(reglastmeasurehourshr4slash, '4hours /').replace(reglastmeasurehourshr5slash, '5hours /').replace(reglastmeasurehourshr6slash, '6hours /').replace(reglastmeasurehourshr7slash, '7hours /').replace(reglastmeasurehourshr8slash, '8hours /').replace(reglastmeasurehourshr9slash, '9hours /').replace(reglastmeasurehourshr0slash, '0hours /').replace(reglastmeasurehourshr1question, '1hours ').replace(reglastmeasurehourshr2question, '2hours ').replace(reglastmeasurehourshr3question, '3hours ').replace(reglastmeasurehourshr4question, '4hours ').replace(reglastmeasurehourshr5question, '5hours ').replace(reglastmeasurehourshr6question, '6hours ').replace(reglastmeasurehourshr7question, '7hours ').replace(reglastmeasurehourshr8question, '8hours ').replace(reglastmeasurehourshr9question, '9hours ').replace(reglastmeasurehourshr0question, '0hours ').replace(reglastmeasurehourshr1exclam, '1hours ').replace(reglastmeasurehourshr2exclam, '2hours ').replace(reglastmeasurehourshr3exclam, '3hours ').replace(reglastmeasurehourshr4exclam, '4hours ').replace(reglastmeasurehourshr5exclam, '5hours ').replace(reglastmeasurehourshr6exclam, '6hours ').replace(reglastmeasurehourshr7exclam, '7hours ').replace(reglastmeasurehourshr8exclam, '8hours ').replace(reglastmeasurehourshr9exclam, '9hours ').replace(reglastmeasurehourshr0exclam, '0hours ').replace(reglastmeasurehourshr1space, '1hours ').replace(reglastmeasurehourshr2space, '2hours ').replace(reglastmeasurehourshr3space, '3hours ').replace(reglastmeasurehourshr4space, '4hours ').replace(reglastmeasurehourshr5space, '5hours ').replace(reglastmeasurehourshr6space, '6hours ').replace(reglastmeasurehourshr7space, '7hours ').replace(reglastmeasurehourshr8space, '8hours ').replace(reglastmeasurehourshr9space, '9hours ').replace(reglastmeasurehourshr0space, '0hours ').replace(reglastmeasurehourshr1exclamspace, '1hours ').replace(reglastmeasurehourshr2exclamspace, '2hours ').replace(reglastmeasurehourshr3exclamspace, '3hours ').replace(reglastmeasurehourshr4exclamspace, '4hours ').replace(reglastmeasurehourshr5exclamspace, '5hours ').replace(reglastmeasurehourshr6exclamspace, '6hours ').replace(reglastmeasurehourshr7exclamspace, '7hours ').replace(reglastmeasurehourshr8exclamspace, '8hours ').replace(reglastmeasurehourshr9exclamspace, '9hours ').replace(reglastmeasurehourshr0exclamspace, '0hours ').replace(reglastmeasurehourshr1slashspace, '1hours /').replace(reglastmeasurehourshr2slashspace, '2hours /').replace(reglastmeasurehourshr3slashspace, '3hours /').replace(reglastmeasurehourshr4slashspace, '4hours /').replace(reglastmeasurehourshr5slashspace, '5hours /').replace(reglastmeasurehourshr6slashspace, '6hours /').replace(reglastmeasurehourshr7slashspace, '7hours /').replace(reglastmeasurehourshr8slashspace, '8hours /').replace(reglastmeasurehourshr9slashspace, '9hours /').replace(reglastmeasurehourshr0slashspace, '0hours /').replace(reglastmeasurehourshr1virgolaspace, '1hours ').replace(reglastmeasurehourshr2virgolaspace, '2hours ').replace(reglastmeasurehourshr3virgolaspace, '3hours ').replace(reglastmeasurehourshr4virgolaspace, '4hours ').replace(reglastmeasurehourshr5virgolaspace, '5hours ').replace(reglastmeasurehourshr6virgolaspace, '6hours ').replace(reglastmeasurehourshr7virgolaspace, '7hours ').replace(reglastmeasurehourshr8virgolaspace, '8hours ').replace(reglastmeasurehourshr9virgolaspace, '9hours ').replace(reglastmeasurehourshr0virgolaspace, '0hours ').replace(reglastmeasurehourshr1pointspace, '1hours ').replace(reglastmeasurehourshr2pointspace, '2hours ').replace(reglastmeasurehourshr3pointspace, '3hours ').replace(reglastmeasurehourshr4pointspace, '4hours ').replace(reglastmeasurehourshr5pointspace, '5hours ').replace(reglastmeasurehourshr6pointspace, '6hours ').replace(reglastmeasurehourshr7pointspace, '7hours ').replace(reglastmeasurehourshr8pointspace, '8hours ').replace(reglastmeasurehourshr9pointspace, '9hours ').replace(reglastmeasurehourshr0pointspace, '0hours ').replace(reglastmeasurehourshr1questionspace, '1hours ').replace(reglastmeasurehourshr2questionspace, '2hours ').replace(reglastmeasurehourshr3questionspace, '3hours ').replace(reglastmeasurehourshr4questionspace, '4hours ').replace(reglastmeasurehourshr5questionspace, '5hours ').replace(reglastmeasurehourshr6questionspace, '6hours ').replace(reglastmeasurehourshr7questionspace, '7hours ').replace(reglastmeasurehourshr8questionspace, '8hours ').replace(reglastmeasurehourshr9questionspace, '9hours ').replace(reglastmeasurehourshr0questionspace, '0hours ');
}

function replacefinalpart33(str){
return str.replace(reglastmeasurehours1, '1hours ').replace(reglastmeasurehours2, '2hours ').replace(reglastmeasurehours3, '3hours ').replace(reglastmeasurehours4, '4hours ').replace(reglastmeasurehours5, '5hours ').replace(reglastmeasurehours6, '6hours ').replace(reglastmeasurehours7, '7hours ').replace(reglastmeasurehours8, '8hours ').replace(reglastmeasurehours9, '9hours ').replace(reglastmeasurehours0, '0hours ').replace(reglastmeasurehours1point, '1hours ').replace(reglastmeasurehours2point, '2hours ').replace(reglastmeasurehours3point, '3hours ').replace(reglastmeasurehours4point, '4hours ').replace(reglastmeasurehours5point, '5hours ').replace(reglastmeasurehours6point, '6hours ').replace(reglastmeasurehours7point, '7hours ').replace(reglastmeasurehours8point, '8hours ').replace(reglastmeasurehours9point, '9hours ').replace(reglastmeasurehours0point, '0hours ').replace(reglastmeasurehours1virgola, '1hours ').replace(reglastmeasurehours2virgola, '2hours ').replace(reglastmeasurehours3virgola, '3hours ').replace(reglastmeasurehours4virgola, '4hours ').replace(reglastmeasurehours5virgola, '5hours ').replace(reglastmeasurehours6virgola, '6hours ').replace(reglastmeasurehours7virgola, '7hours ').replace(reglastmeasurehours8virgola, '8hours ').replace(reglastmeasurehours9virgola, '9hours ').replace(reglastmeasurehours0virgola, '0hours ').replace(reglastmeasurehours1slash, '1hours /').replace(reglastmeasurehours2slash, '2hours /').replace(reglastmeasurehours3slash, '3hours /').replace(reglastmeasurehours4slash, '4hours /').replace(reglastmeasurehours5slash, '5hours /').replace(reglastmeasurehours6slash, '6hours /').replace(reglastmeasurehours7slash, '7hours /').replace(reglastmeasurehours8slash, '8hours /').replace(reglastmeasurehours9slash, '9hours /').replace(reglastmeasurehours0slash, '0hours /').replace(reglastmeasurehours1question, '1hours ').replace(reglastmeasurehours2question, '2hours ').replace(reglastmeasurehours3question, '3hours ').replace(reglastmeasurehours4question, '4hours ').replace(reglastmeasurehours5question, '5hours ').replace(reglastmeasurehours6question, '6hours ').replace(reglastmeasurehours7question, '7hours ').replace(reglastmeasurehours8question, '8hours ').replace(reglastmeasurehours9question, '9hours ').replace(reglastmeasurehours0question, '0hours ').replace(reglastmeasurehours1exclam, '1hours ').replace(reglastmeasurehours2exclam, '2hours ').replace(reglastmeasurehours3exclam, '3hours ').replace(reglastmeasurehours4exclam, '4hours ').replace(reglastmeasurehours5exclam, '5hours ').replace(reglastmeasurehours6exclam, '6hours ').replace(reglastmeasurehours7exclam, '7hours ').replace(reglastmeasurehours8exclam, '8hours ').replace(reglastmeasurehours9exclam, '9hours ').replace(reglastmeasurehours0exclam, '0hours ').replace(reglastmeasurehours1space, '1hours ').replace(reglastmeasurehours2space, '2hours ').replace(reglastmeasurehours3space, '3hours ').replace(reglastmeasurehours4space, '4hours ').replace(reglastmeasurehours5space, '5hours ').replace(reglastmeasurehours6space, '6hours ').replace(reglastmeasurehours7space, '7hours ').replace(reglastmeasurehours8space, '8hours ').replace(reglastmeasurehours9space, '9hours ').replace(reglastmeasurehours0space, '0hours ').replace(reglastmeasurehours1exclamspace, '1hours ').replace(reglastmeasurehours2exclamspace, '2hours ').replace(reglastmeasurehours3exclamspace, '3hours ').replace(reglastmeasurehours4exclamspace, '4hours ').replace(reglastmeasurehours5exclamspace, '5hours ').replace(reglastmeasurehours6exclamspace, '6hours ').replace(reglastmeasurehours7exclamspace, '7hours ').replace(reglastmeasurehours8exclamspace, '8hours ').replace(reglastmeasurehours9exclamspace, '9hours ').replace(reglastmeasurehours0exclamspace, '0hours ').replace(reglastmeasurehours1slashspace, '1hours /').replace(reglastmeasurehours2slashspace, '2hours /').replace(reglastmeasurehours3slashspace, '3hours /').replace(reglastmeasurehours4slashspace, '4hours /').replace(reglastmeasurehours5slashspace, '5hours /').replace(reglastmeasurehours6slashspace, '6hours /').replace(reglastmeasurehours7slashspace, '7hours /').replace(reglastmeasurehours8slashspace, '8hours /').replace(reglastmeasurehours9slashspace, '9hours /').replace(reglastmeasurehours0slashspace, '0hours /').replace(reglastmeasurehours1virgolaspace, '1hours ').replace(reglastmeasurehours2virgolaspace, '2hours ').replace(reglastmeasurehours3virgolaspace, '3hours ').replace(reglastmeasurehours4virgolaspace, '4hours ').replace(reglastmeasurehours5virgolaspace, '5hours ').replace(reglastmeasurehours6virgolaspace, '6hours ').replace(reglastmeasurehours7virgolaspace, '7hours ').replace(reglastmeasurehours8virgolaspace, '8hours ').replace(reglastmeasurehours9virgolaspace, '9hours ').replace(reglastmeasurehours0virgolaspace, '0hours ').replace(reglastmeasurehours1pointspace, '1hours ').replace(reglastmeasurehours2pointspace, '2hours ').replace(reglastmeasurehours3pointspace, '3hours ').replace(reglastmeasurehours4pointspace, '4hours ').replace(reglastmeasurehours5pointspace, '5hours ').replace(reglastmeasurehours6pointspace, '6hours ').replace(reglastmeasurehours7pointspace, '7hours ').replace(reglastmeasurehours8pointspace, '8hours ').replace(reglastmeasurehours9pointspace, '9hours ').replace(reglastmeasurehours0pointspace, '0hours ').replace(reglastmeasurehours1questionspace, '1hours ').replace(reglastmeasurehours2questionspace, '2hours ').replace(reglastmeasurehours3questionspace, '3hours ').replace(reglastmeasurehours4questionspace, '4hours ').replace(reglastmeasurehours5questionspace, '5hours ').replace(reglastmeasurehours6questionspace, '6hours ').replace(reglastmeasurehours7questionspace, '7hours ').replace(reglastmeasurehours8questionspace, '8hours ').replace(reglastmeasurehours9questionspace, '9hours ').replace(reglastmeasurehours0questionspace, '0hours ');
}

function replacefinalpart34(str){
return str.replace(reglastmeasureMillions1, '1millions ').replace(reglastmeasureMillions2, '2millions ').replace(reglastmeasureMillions3, '3millions ').replace(reglastmeasureMillions4, '4millions ').replace(reglastmeasureMillions5, '5millions ').replace(reglastmeasureMillions6, '6millions ').replace(reglastmeasureMillions7, '7millions ').replace(reglastmeasureMillions8, '8millions ').replace(reglastmeasureMillions9, '9millions ').replace(reglastmeasureMillions0, '0millions ').replace(reglastmeasureMillions1point, '1millions ').replace(reglastmeasureMillions2point, '2millions ').replace(reglastmeasureMillions3point, '3millions ').replace(reglastmeasureMillions4point, '4millions ').replace(reglastmeasureMillions5point, '5millions ').replace(reglastmeasureMillions6point, '6millions ').replace(reglastmeasureMillions7point, '7millions ').replace(reglastmeasureMillions8point, '8millions ').replace(reglastmeasureMillions9point, '9millions ').replace(reglastmeasureMillions0point, '0millions ').replace(reglastmeasureMillions1virgola, '1millions ').replace(reglastmeasureMillions2virgola, '2millions ').replace(reglastmeasureMillions3virgola, '3millions ').replace(reglastmeasureMillions4virgola, '4millions ').replace(reglastmeasureMillions5virgola, '5millions ').replace(reglastmeasureMillions6virgola, '6millions ').replace(reglastmeasureMillions7virgola, '7millions ').replace(reglastmeasureMillions8virgola, '8millions ').replace(reglastmeasureMillions9virgola, '9millions ').replace(reglastmeasureMillions0virgola, '0millions ').replace(reglastmeasureMillions1slash, '1millions /').replace(reglastmeasureMillions2slash, '2millions /').replace(reglastmeasureMillions3slash, '3millions /').replace(reglastmeasureMillions4slash, '4millions /').replace(reglastmeasureMillions5slash, '5millions /').replace(reglastmeasureMillions6slash, '6millions /').replace(reglastmeasureMillions7slash, '7millions /').replace(reglastmeasureMillions8slash, '8millions /').replace(reglastmeasureMillions9slash, '9millions /').replace(reglastmeasureMillions0slash, '0millions /').replace(reglastmeasureMillions1question, '1millions ').replace(reglastmeasureMillions2question, '2millions ').replace(reglastmeasureMillions3question, '3millions ').replace(reglastmeasureMillions4question, '4millions ').replace(reglastmeasureMillions5question, '5millions ').replace(reglastmeasureMillions6question, '6millions ').replace(reglastmeasureMillions7question, '7millions ').replace(reglastmeasureMillions8question, '8millions ').replace(reglastmeasureMillions9question, '9millions ').replace(reglastmeasureMillions0question, '0millions ').replace(reglastmeasureMillions1exclam, '1millions ').replace(reglastmeasureMillions2exclam, '2millions ').replace(reglastmeasureMillions3exclam, '3millions ').replace(reglastmeasureMillions4exclam, '4millions ').replace(reglastmeasureMillions5exclam, '5millions ').replace(reglastmeasureMillions6exclam, '6millions ').replace(reglastmeasureMillions7exclam, '7millions ').replace(reglastmeasureMillions8exclam, '8millions ').replace(reglastmeasureMillions9exclam, '9millions ').replace(reglastmeasureMillions0exclam, '0millions ').replace(reglastmeasureMillions1space, '1millions ').replace(reglastmeasureMillions2space, '2millions ').replace(reglastmeasureMillions3space, '3millions ').replace(reglastmeasureMillions4space, '4millions ').replace(reglastmeasureMillions5space, '5millions ').replace(reglastmeasureMillions6space, '6millions ').replace(reglastmeasureMillions7space, '7millions ').replace(reglastmeasureMillions8space, '8millions ').replace(reglastmeasureMillions9space, '9millions ').replace(reglastmeasureMillions0space, '0millions ').replace(reglastmeasureMillions1exclamspace, '1millions ').replace(reglastmeasureMillions2exclamspace, '2millions ').replace(reglastmeasureMillions3exclamspace, '3millions ').replace(reglastmeasureMillions4exclamspace, '4millions ').replace(reglastmeasureMillions5exclamspace, '5millions ').replace(reglastmeasureMillions6exclamspace, '6millions ').replace(reglastmeasureMillions7exclamspace, '7millions ').replace(reglastmeasureMillions8exclamspace, '8millions ').replace(reglastmeasureMillions9exclamspace, '9millions ').replace(reglastmeasureMillions0exclamspace, '0millions ').replace(reglastmeasureMillions1slashspace, '1millions /').replace(reglastmeasureMillions2slashspace, '2millions /').replace(reglastmeasureMillions3slashspace, '3millions /').replace(reglastmeasureMillions4slashspace, '4millions /').replace(reglastmeasureMillions5slashspace, '5millions /').replace(reglastmeasureMillions6slashspace, '6millions /').replace(reglastmeasureMillions7slashspace, '7millions /').replace(reglastmeasureMillions8slashspace, '8millions /').replace(reglastmeasureMillions9slashspace, '9millions /').replace(reglastmeasureMillions0slashspace, '0millions /').replace(reglastmeasureMillions1virgolaspace, '1millions ').replace(reglastmeasureMillions2virgolaspace, '2millions ').replace(reglastmeasureMillions3virgolaspace, '3millions ').replace(reglastmeasureMillions4virgolaspace, '4millions ').replace(reglastmeasureMillions5virgolaspace, '5millions ').replace(reglastmeasureMillions6virgolaspace, '6millions ').replace(reglastmeasureMillions7virgolaspace, '7millions ').replace(reglastmeasureMillions8virgolaspace, '8millions ').replace(reglastmeasureMillions9virgolaspace, '9millions ').replace(reglastmeasureMillions0virgolaspace, '0millions ').replace(reglastmeasureMillions1pointspace, '1millions ').replace(reglastmeasureMillions2pointspace, '2millions ').replace(reglastmeasureMillions3pointspace, '3millions ').replace(reglastmeasureMillions4pointspace, '4millions ').replace(reglastmeasureMillions5pointspace, '5millions ').replace(reglastmeasureMillions6pointspace, '6millions ').replace(reglastmeasureMillions7pointspace, '7millions ').replace(reglastmeasureMillions8pointspace, '8millions ').replace(reglastmeasureMillions9pointspace, '9millions ').replace(reglastmeasureMillions0pointspace, '0millions ').replace(reglastmeasureMillions1questionspace, '1millions ').replace(reglastmeasureMillions2questionspace, '2millions ').replace(reglastmeasureMillions3questionspace, '3millions ').replace(reglastmeasureMillions4questionspace, '4millions ').replace(reglastmeasureMillions5questionspace, '5millions ').replace(reglastmeasureMillions6questionspace, '6millions ').replace(reglastmeasureMillions7questionspace, '7millions ').replace(reglastmeasureMillions8questionspace, '8millions ').replace(reglastmeasureMillions9questionspace, '9millions ').replace(reglastmeasureMillions0questionspace, '0millions ');
}

function replacefinalpart35(str){
return str.replace(reglastmeasurejoules1, '1joules ').replace(reglastmeasurejoules2, '2joules ').replace(reglastmeasurejoules3, '3joules ').replace(reglastmeasurejoules4, '4joules ').replace(reglastmeasurejoules5, '5joules ').replace(reglastmeasurejoules6, '6joules ').replace(reglastmeasurejoules7, '7joules ').replace(reglastmeasurejoules8, '8joules ').replace(reglastmeasurejoules9, '9joules ').replace(reglastmeasurejoules0, '0joules ').replace(reglastmeasurejoules1point, '1joules ').replace(reglastmeasurejoules2point, '2joules ').replace(reglastmeasurejoules3point, '3joules ').replace(reglastmeasurejoules4point, '4joules ').replace(reglastmeasurejoules5point, '5joules ').replace(reglastmeasurejoules6point, '6joules ').replace(reglastmeasurejoules7point, '7joules ').replace(reglastmeasurejoules8point, '8joules ').replace(reglastmeasurejoules9point, '9joules ').replace(reglastmeasurejoules0point, '0joules ').replace(reglastmeasurejoules1virgola, '1joules ').replace(reglastmeasurejoules2virgola, '2joules ').replace(reglastmeasurejoules3virgola, '3joules ').replace(reglastmeasurejoules4virgola, '4joules ').replace(reglastmeasurejoules5virgola, '5joules ').replace(reglastmeasurejoules6virgola, '6joules ').replace(reglastmeasurejoules7virgola, '7joules ').replace(reglastmeasurejoules8virgola, '8joules ').replace(reglastmeasurejoules9virgola, '9joules ').replace(reglastmeasurejoules0virgola, '0joules ').replace(reglastmeasurejoules1slash, '1joules /').replace(reglastmeasurejoules2slash, '2joules /').replace(reglastmeasurejoules3slash, '3joules /').replace(reglastmeasurejoules4slash, '4joules /').replace(reglastmeasurejoules5slash, '5joules /').replace(reglastmeasurejoules6slash, '6joules /').replace(reglastmeasurejoules7slash, '7joules /').replace(reglastmeasurejoules8slash, '8joules /').replace(reglastmeasurejoules9slash, '9joules /').replace(reglastmeasurejoules0slash, '0joules /').replace(reglastmeasurejoules1question, '1joules ').replace(reglastmeasurejoules2question, '2joules ').replace(reglastmeasurejoules3question, '3joules ').replace(reglastmeasurejoules4question, '4joules ').replace(reglastmeasurejoules5question, '5joules ').replace(reglastmeasurejoules6question, '6joules ').replace(reglastmeasurejoules7question, '7joules ').replace(reglastmeasurejoules8question, '8joules ').replace(reglastmeasurejoules9question, '9joules ').replace(reglastmeasurejoules0question, '0joules ').replace(reglastmeasurejoules1exclam, '1joules ').replace(reglastmeasurejoules2exclam, '2joules ').replace(reglastmeasurejoules3exclam, '3joules ').replace(reglastmeasurejoules4exclam, '4joules ').replace(reglastmeasurejoules5exclam, '5joules ').replace(reglastmeasurejoules6exclam, '6joules ').replace(reglastmeasurejoules7exclam, '7joules ').replace(reglastmeasurejoules8exclam, '8joules ').replace(reglastmeasurejoules9exclam, '9joules ').replace(reglastmeasurejoules0exclam, '0joules ').replace(reglastmeasurejoules1space, '1joules ').replace(reglastmeasurejoules2space, '2joules ').replace(reglastmeasurejoules3space, '3joules ').replace(reglastmeasurejoules4space, '4joules ').replace(reglastmeasurejoules5space, '5joules ').replace(reglastmeasurejoules6space, '6joules ').replace(reglastmeasurejoules7space, '7joules ').replace(reglastmeasurejoules8space, '8joules ').replace(reglastmeasurejoules9space, '9joules ').replace(reglastmeasurejoules0space, '0joules ').replace(reglastmeasurejoules1exclamspace, '1joules ').replace(reglastmeasurejoules2exclamspace, '2joules ').replace(reglastmeasurejoules3exclamspace, '3joules ').replace(reglastmeasurejoules4exclamspace, '4joules ').replace(reglastmeasurejoules5exclamspace, '5joules ').replace(reglastmeasurejoules6exclamspace, '6joules ').replace(reglastmeasurejoules7exclamspace, '7joules ').replace(reglastmeasurejoules8exclamspace, '8joules ').replace(reglastmeasurejoules9exclamspace, '9joules ').replace(reglastmeasurejoules0exclamspace, '0joules ').replace(reglastmeasurejoules1slashspace, '1joules /').replace(reglastmeasurejoules2slashspace, '2joules /').replace(reglastmeasurejoules3slashspace, '3joules /').replace(reglastmeasurejoules4slashspace, '4joules /').replace(reglastmeasurejoules5slashspace, '5joules /').replace(reglastmeasurejoules6slashspace, '6joules /').replace(reglastmeasurejoules7slashspace, '7joules /').replace(reglastmeasurejoules8slashspace, '8joules /').replace(reglastmeasurejoules9slashspace, '9joules /').replace(reglastmeasurejoules0slashspace, '0joules /').replace(reglastmeasurejoules1virgolaspace, '1joules ').replace(reglastmeasurejoules2virgolaspace, '2joules ').replace(reglastmeasurejoules3virgolaspace, '3joules ').replace(reglastmeasurejoules4virgolaspace, '4joules ').replace(reglastmeasurejoules5virgolaspace, '5joules ').replace(reglastmeasurejoules6virgolaspace, '6joules ').replace(reglastmeasurejoules7virgolaspace, '7joules ').replace(reglastmeasurejoules8virgolaspace, '8joules ').replace(reglastmeasurejoules9virgolaspace, '9joules ').replace(reglastmeasurejoules0virgolaspace, '0joules ').replace(reglastmeasurejoules1pointspace, '1joules ').replace(reglastmeasurejoules2pointspace, '2joules ').replace(reglastmeasurejoules3pointspace, '3joules ').replace(reglastmeasurejoules4pointspace, '4joules ').replace(reglastmeasurejoules5pointspace, '5joules ').replace(reglastmeasurejoules6pointspace, '6joules ').replace(reglastmeasurejoules7pointspace, '7joules ').replace(reglastmeasurejoules8pointspace, '8joules ').replace(reglastmeasurejoules9pointspace, '9joules ').replace(reglastmeasurejoules0pointspace, '0joules ').replace(reglastmeasurejoules1questionspace, '1joules ').replace(reglastmeasurejoules2questionspace, '2joules ').replace(reglastmeasurejoules3questionspace, '3joules ').replace(reglastmeasurejoules4questionspace, '4joules ').replace(reglastmeasurejoules5questionspace, '5joules ').replace(reglastmeasurejoules6questionspace, '6joules ').replace(reglastmeasurejoules7questionspace, '7joules ').replace(reglastmeasurejoules8questionspace, '8joules ').replace(reglastmeasurejoules9questionspace, '9joules ').replace(reglastmeasurejoules0questionspace, '0joules ');
}

function replacefinalpart36(str){
return str.replace(reglastmeasuregramsgm1, '1grams ').replace(reglastmeasuregramsgm2, '2grams ').replace(reglastmeasuregramsgm3, '3grams ').replace(reglastmeasuregramsgm4, '4grams ').replace(reglastmeasuregramsgm5, '5grams ').replace(reglastmeasuregramsgm6, '6grams ').replace(reglastmeasuregramsgm7, '7grams ').replace(reglastmeasuregramsgm8, '8grams ').replace(reglastmeasuregramsgm9, '9grams ').replace(reglastmeasuregramsgm0, '0grams ').replace(reglastmeasuregramsgm1point, '1grams ').replace(reglastmeasuregramsgm2point, '2grams ').replace(reglastmeasuregramsgm3point, '3grams ').replace(reglastmeasuregramsgm4point, '4grams ').replace(reglastmeasuregramsgm5point, '5grams ').replace(reglastmeasuregramsgm6point, '6grams ').replace(reglastmeasuregramsgm7point, '7grams ').replace(reglastmeasuregramsgm8point, '8grams ').replace(reglastmeasuregramsgm9point, '9grams ').replace(reglastmeasuregramsgm0point, '0grams ').replace(reglastmeasuregramsgm1virgola, '1grams ').replace(reglastmeasuregramsgm2virgola, '2grams ').replace(reglastmeasuregramsgm3virgola, '3grams ').replace(reglastmeasuregramsgm4virgola, '4grams ').replace(reglastmeasuregramsgm5virgola, '5grams ').replace(reglastmeasuregramsgm6virgola, '6grams ').replace(reglastmeasuregramsgm7virgola, '7grams ').replace(reglastmeasuregramsgm8virgola, '8grams ').replace(reglastmeasuregramsgm9virgola, '9grams ').replace(reglastmeasuregramsgm0virgola, '0grams ').replace(reglastmeasuregramsgm1slash, '1grams /').replace(reglastmeasuregramsgm2slash, '2grams /').replace(reglastmeasuregramsgm3slash, '3grams /').replace(reglastmeasuregramsgm4slash, '4grams /').replace(reglastmeasuregramsgm5slash, '5grams /').replace(reglastmeasuregramsgm6slash, '6grams /').replace(reglastmeasuregramsgm7slash, '7grams /').replace(reglastmeasuregramsgm8slash, '8grams /').replace(reglastmeasuregramsgm9slash, '9grams /').replace(reglastmeasuregramsgm0slash, '0grams /').replace(reglastmeasuregramsgm1question, '1grams ').replace(reglastmeasuregramsgm2question, '2grams ').replace(reglastmeasuregramsgm3question, '3grams ').replace(reglastmeasuregramsgm4question, '4grams ').replace(reglastmeasuregramsgm5question, '5grams ').replace(reglastmeasuregramsgm6question, '6grams ').replace(reglastmeasuregramsgm7question, '7grams ').replace(reglastmeasuregramsgm8question, '8grams ').replace(reglastmeasuregramsgm9question, '9grams ').replace(reglastmeasuregramsgm0question, '0grams ').replace(reglastmeasuregramsgm1exclam, '1grams ').replace(reglastmeasuregramsgm2exclam, '2grams ').replace(reglastmeasuregramsgm3exclam, '3grams ').replace(reglastmeasuregramsgm4exclam, '4grams ').replace(reglastmeasuregramsgm5exclam, '5grams ').replace(reglastmeasuregramsgm6exclam, '6grams ').replace(reglastmeasuregramsgm7exclam, '7grams ').replace(reglastmeasuregramsgm8exclam, '8grams ').replace(reglastmeasuregramsgm9exclam, '9grams ').replace(reglastmeasuregramsgm0exclam, '0grams ').replace(reglastmeasuregramsgm1space, '1grams ').replace(reglastmeasuregramsgm2space, '2grams ').replace(reglastmeasuregramsgm3space, '3grams ').replace(reglastmeasuregramsgm4space, '4grams ').replace(reglastmeasuregramsgm5space, '5grams ').replace(reglastmeasuregramsgm6space, '6grams ').replace(reglastmeasuregramsgm7space, '7grams ').replace(reglastmeasuregramsgm8space, '8grams ').replace(reglastmeasuregramsgm9space, '9grams ').replace(reglastmeasuregramsgm0space, '0grams ').replace(reglastmeasuregramsgm1exclamspace, '1grams ').replace(reglastmeasuregramsgm2exclamspace, '2grams ').replace(reglastmeasuregramsgm3exclamspace, '3grams ').replace(reglastmeasuregramsgm4exclamspace, '4grams ').replace(reglastmeasuregramsgm5exclamspace, '5grams ').replace(reglastmeasuregramsgm6exclamspace, '6grams ').replace(reglastmeasuregramsgm7exclamspace, '7grams ').replace(reglastmeasuregramsgm8exclamspace, '8grams ').replace(reglastmeasuregramsgm9exclamspace, '9grams ').replace(reglastmeasuregramsgm0exclamspace, '0grams ').replace(reglastmeasuregramsgm1slashspace, '1grams /').replace(reglastmeasuregramsgm2slashspace, '2grams /').replace(reglastmeasuregramsgm3slashspace, '3grams /').replace(reglastmeasuregramsgm4slashspace, '4grams /').replace(reglastmeasuregramsgm5slashspace, '5grams /').replace(reglastmeasuregramsgm6slashspace, '6grams /').replace(reglastmeasuregramsgm7slashspace, '7grams /').replace(reglastmeasuregramsgm8slashspace, '8grams /').replace(reglastmeasuregramsgm9slashspace, '9grams /').replace(reglastmeasuregramsgm0slashspace, '0grams /').replace(reglastmeasuregramsgm1virgolaspace, '1grams ').replace(reglastmeasuregramsgm2virgolaspace, '2grams ').replace(reglastmeasuregramsgm3virgolaspace, '3grams ').replace(reglastmeasuregramsgm4virgolaspace, '4grams ').replace(reglastmeasuregramsgm5virgolaspace, '5grams ').replace(reglastmeasuregramsgm6virgolaspace, '6grams ').replace(reglastmeasuregramsgm7virgolaspace, '7grams ').replace(reglastmeasuregramsgm8virgolaspace, '8grams ').replace(reglastmeasuregramsgm9virgolaspace, '9grams ').replace(reglastmeasuregramsgm0virgolaspace, '0grams ').replace(reglastmeasuregramsgm1pointspace, '1grams ').replace(reglastmeasuregramsgm2pointspace, '2grams ').replace(reglastmeasuregramsgm3pointspace, '3grams ').replace(reglastmeasuregramsgm4pointspace, '4grams ').replace(reglastmeasuregramsgm5pointspace, '5grams ').replace(reglastmeasuregramsgm6pointspace, '6grams ').replace(reglastmeasuregramsgm7pointspace, '7grams ').replace(reglastmeasuregramsgm8pointspace, '8grams ').replace(reglastmeasuregramsgm9pointspace, '9grams ').replace(reglastmeasuregramsgm0pointspace, '0grams ').replace(reglastmeasuregramsgm1questionspace, '1grams ').replace(reglastmeasuregramsgm2questionspace, '2grams ').replace(reglastmeasuregramsgm3questionspace, '3grams ').replace(reglastmeasuregramsgm4questionspace, '4grams ').replace(reglastmeasuregramsgm5questionspace, '5grams ').replace(reglastmeasuregramsgm6questionspace, '6grams ').replace(reglastmeasuregramsgm7questionspace, '7grams ').replace(reglastmeasuregramsgm8questionspace, '8grams ').replace(reglastmeasuregramsgm9questionspace, '9grams ').replace(reglastmeasuregramsgm0questionspace, '0grams ');
}

function replacefinalpart37(str){
return str.replace(reglastmeasurebmr1, ' basal metabolic rate ').replace(reglastmeasurebmr2, ' basal metabolic rate ').replace(reglastmeasurebmr3, ' basal metabolic rate ').replace(reglastmeasurebmr4, ' basal metabolic rate ').replace(reglastmeasurebmr5, ' basal metabolic rate ').replace(reglastmeasurebmr6, ' basal metabolic rate ').replace(reglastmeasurebmr7, ' basal metabolic rate ').replace(reglastmeasurebmr8, ' basal metabolic rate ').replace(reglastmeasurebmr9, ' basal metabolic rate ').replace(reglastmeasurebmrslashfirst, '/ basal metabolic rate ').replace(reglastmeasurebmrslashafter, ' basal metabolic rate /').replace(reglastmeasurefwiw1, '').replace(reglastmeasurefwiw2, '').replace(reglastmeasurefwiw3, '').replace(reglastmeasurefwiw4, '').replace(reglastmeasurefwiw5, '').replace(reglastmeasurefwiw6, '').replace(reglastmeasurefwiw7, '').replace(reglastmeasurefwiw8, '').replace(reglastmeasurefwiw9, '').replace(reglastmeasurefwiwslashfirst, '/').replace(reglastmeasurefwiwslashafter, '/');
}

function replacefinalpart38(str){
return str.replace(reglastmeasurefaq1, ' help section ').replace(reglastmeasurefaq2, ' help section ').replace(reglastmeasurefaq3, ' help section ').replace(reglastmeasurefaq4, ' help section ').replace(reglastmeasurefaq5, ' help section ').replace(reglastmeasurefaq6, ' help section ').replace(reglastmeasurefaq7, ' help section ').replace(reglastmeasurefaq8, ' help section ').replace(reglastmeasurefaq9, ' help section ').replace(reglastmeasurefaqslashfirst, '/ help section ').replace(reglastmeasurefaqslashafter, ' help section /').replace(reglastmeasureama1, '').replace(reglastmeasureama2, '').replace(reglastmeasureama3, '').replace(reglastmeasureama4, '').replace(reglastmeasureama5, '').replace(reglastmeasureama6, '').replace(reglastmeasureama7, '').replace(reglastmeasureama8, '').replace(reglastmeasureama9, '').replace(reglastmeasureamaslashfirst, '/').replace(reglastmeasureamaslashafter, '/').replace(reglastmeasureytb1, ' youtube ').replace(reglastmeasureytb2, ' youtube ').replace(reglastmeasureytb3, ' youtube ').replace(reglastmeasureytb4, ' youtube ').replace(reglastmeasureytb5, ' youtube ').replace(reglastmeasureytb6, ' youtube ').replace(reglastmeasureytb7, ' youtube ').replace(reglastmeasureytb8, ' youtube ').replace(reglastmeasureytb9, ' youtube ').replace(reglastmeasureytbslashfirst, '/ youtube ').replace(reglastmeasureytbslashafter, ' youtube /').replace(reglastmeasurephd1, ' master degree ').replace(reglastmeasurephd2, ' master degree ').replace(reglastmeasurephd3, ' master degree ').replace(reglastmeasurephd4, ' master degree ').replace(reglastmeasurephd5, ' master degree ').replace(reglastmeasurephd6, ' master degree ').replace(reglastmeasurephd7, ' master degree ').replace(reglastmeasurephd8, ' master degree ').replace(reglastmeasurephd9, ' master degree ').replace(reglastmeasurephdslashfirst, '/ master degree ').replace(reglastmeasurephdslashafter, ' master degree /').replace(reglastmeasureafaik1, '').replace(reglastmeasureafaik2, '').replace(reglastmeasureafaik3, '').replace(reglastmeasureafaik4, '').replace(reglastmeasureafaik5, '').replace(reglastmeasureafaik6, '').replace(reglastmeasureafaik7, '').replace(reglastmeasureafaik8, '').replace(reglastmeasureafaik9, '').replace(reglastmeasureafaikslashfirst, '/').replace(reglastmeasureafaikslashafter, '/').replace(reglastmeasuretldr1, '').replace(reglastmeasuretldr2, '').replace(reglastmeasuretldr3, '').replace(reglastmeasuretldr4, '').replace(reglastmeasuretldr5, '').replace(reglastmeasuretldr6, '').replace(reglastmeasuretldr7, '').replace(reglastmeasuretldr8, '').replace(reglastmeasuretldr9, '').replace(reglastmeasuretldrslashfirst, '/').replace(reglastmeasuretldrslashafter, '/').replace(reglastmeasuretl_dr1, '').replace(reglastmeasuretl_dr2, '').replace(reglastmeasuretl_dr3, '').replace(reglastmeasuretl_dr4, '').replace(reglastmeasuretl_dr5, '').replace(reglastmeasuretl_dr6, '').replace(reglastmeasuretl_dr7, '').replace(reglastmeasuretl_dr8, '').replace(reglastmeasuretl_dr9, '').replace(reglastmeasuretl_drslashfirst, '/').replace(reglastmeasuretl_drslashafter, '/').replace(reglastmeasurejkr1, ' jk rowling ').replace(reglastmeasurejkr2, ' jk rowling ').replace(reglastmeasurejkr3, ' jk rowling ').replace(reglastmeasurejkr4, ' jk rowling ').replace(reglastmeasurejkr5, ' jk rowling ').replace(reglastmeasurejkr6, ' jk rowling ').replace(reglastmeasurejkr7, ' jk rowling ').replace(reglastmeasurejkr8, ' jk rowling ').replace(reglastmeasurejkr9, ' jk rowling ').replace(reglastmeasurejkrslashfirst, '/ jk rowling ').replace(reglastmeasurejkrslashafter, ' jk rowling /').replace(reglastmeasureymmv1, '').replace(reglastmeasureymmv2, '').replace(reglastmeasureymmv3, '').replace(reglastmeasureymmv4, '').replace(reglastmeasureymmv5, '').replace(reglastmeasureymmv6, '').replace(reglastmeasureymmv7, '').replace(reglastmeasureymmv8, '').replace(reglastmeasureymmv9, '').replace(reglastmeasureymmvslashfirst, '/').replace(reglastmeasureymmvslashafter, '/').replace(reglastmeasurenyc1, ' new york city ').replace(reglastmeasurenyc2, ' new york city ').replace(reglastmeasurenyc3, ' new york city ').replace(reglastmeasurenyc4, ' new york city ').replace(reglastmeasurenyc5, ' new york city ').replace(reglastmeasurenyc6, ' new york city ').replace(reglastmeasurenyc7, ' new york city ').replace(reglastmeasurenyc8, ' new york city ').replace(reglastmeasurenyc9, ' new york city ').replace(reglastmeasurenycslashfirst, '/ new york city ').replace(reglastmeasurenycslashafter, ' new york city /').replace(reglastmeasurebttf1, ' back to the future ').replace(reglastmeasurebttf2, ' back to the future ').replace(reglastmeasurebttf3, ' back to the future ').replace(reglastmeasurebttf4, ' back to the future ').replace(reglastmeasurebttf5, ' back to the future ').replace(reglastmeasurebttf6, ' back to the future ').replace(reglastmeasurebttf7, ' back to the future ').replace(reglastmeasurebttf8, ' back to the future ').replace(reglastmeasurebttf9, ' back to the future ').replace(reglastmeasurebttfslashfirst, '/ back to the future ').replace(reglastmeasurebttfslashafter, ' back to the future /');
}

function replacefinalpart39(str){
return str.replace(reglastmeasureSeason1, ' season1episode1 ').replace(reglastmeasureSeason2, ' season2episode1 ').replace(reglastmeasureSeason3, ' season3episode1 ').replace(reglastmeasureSeason4, ' season4episode1 ').replace(reglastmeasureSeason5, ' season5episode1 ').replace(reglastmeasureSeason6, ' season6episode1 ').replace(reglastmeasureSeason7, ' season7episode1 ').replace(reglastmeasureSeason8, ' season8episode1 ').replace(reglastmeasureSeason9, ' season9episode1 ').replace(reglastmeasureSeason10, ' season1episode2 ').replace(reglastmeasureSeason11, '  season2episode2 ').replace(reglastmeasureSeason12, ' season3episode2 ').replace(reglastmeasureSeason13, ' season4episode2 ').replace(reglastmeasureSeason14, ' season5episode2 ').replace(reglastmeasureSeason15, ' season6episode2 ').replace(reglastmeasureSeason16, ' season7episode2 ').replace(reglastmeasureSeason17, ' season8episode2 ').replace(reglastmeasureSeason18, ' season9episode2 ').replace(reglastmeasureSeason19, ' season1episode3 ').replace(reglastmeasureSeason20, ' season2episode3 ').replace(reglastmeasureSeason21, ' season3episode3 ').replace(reglastmeasureSeason22, ' season4episode3 ').replace(reglastmeasureSeason23, ' season5episode3 ').replace(reglastmeasureSeason24, ' season6episode3 ').replace(reglastmeasureSeason25, ' season7episode3 ').replace(reglastmeasureSeason26, ' season8episode3 ').replace(reglastmeasureSeason27, ' season9episode3 ').replace(reglastmeasureSeason28, ' season1episode4 ').replace(reglastmeasureSeason29, ' season2episode4 ').replace(reglastmeasureSeason30, ' season3episode4 ').replace(reglastmeasureSeason31, ' season4episode4 ').replace(reglastmeasureSeason32, ' season5episode4 ').replace(reglastmeasureSeason33, ' season6episode4 ').replace(reglastmeasureSeason34, ' season7episode4 ').replace(reglastmeasureSeason35, ' season8episode4 ').replace(reglastmeasureSeason36, ' season9episode4 ').replace(reglastmeasureSeason37, ' season1episode5 ').replace(reglastmeasureSeason38, ' season2episode5 ').replace(reglastmeasureSeason39, ' season3episode5 ').replace(reglastmeasureSeason40, ' season4episode5 ').replace(reglastmeasureSeason41, ' season5episode5 ').replace(reglastmeasureSeason42, ' season6episode5 ').replace(reglastmeasureSeason43, ' season7episode5 ').replace(reglastmeasureSeason44, ' season8episode5 ').replace(reglastmeasureSeason45, ' season9episode5 ').replace(reglastmeasureSeason46, ' season1episode6 ').replace(reglastmeasureSeason47, ' season2episode6 ').replace(reglastmeasureSeason48, ' season3episode6 ').replace(reglastmeasureSeason49, ' season4episode6 ').replace(reglastmeasureSeason50, ' season5episode6 ').replace(reglastmeasureSeason51, ' season6episode6 ').replace(reglastmeasureSeason52, ' season7episode6 ').replace(reglastmeasureSeason53, ' season8episode6 ').replace(reglastmeasureSeason54, ' season9episode6 ').replace(reglastmeasureSeason55, ' season1episode7 ').replace(reglastmeasureSeason56, ' season2episode7 ').replace(reglastmeasureSeason57, ' season3episode7 ').replace(reglastmeasureSeason58, ' season4episode7 ').replace(reglastmeasureSeason59, ' season5episode7 ').replace(reglastmeasureSeason60, ' season6episode7 ').replace(reglastmeasureSeason61, ' season7episode7 ').replace(reglastmeasureSeason62, ' season8episode7 ').replace(reglastmeasureSeason63, ' season9episode7 ').replace(reglastmeasureSeason64, ' season1episode8 ').replace(reglastmeasureSeason65, ' season2episode8 ').replace(reglastmeasureSeason66, ' season3episode8 ').replace(reglastmeasureSeason67, ' season4episode8 ').replace(reglastmeasureSeason68, ' season5episode8 ').replace(reglastmeasureSeason69, ' season6episode8 ').replace(reglastmeasureSeason70, ' season7episode8 ').replace(reglastmeasureSeason71, ' season8episode8 ').replace(reglastmeasureSeason72, ' season9episode8 ').replace(reglastmeasureSeason73, ' season1episode9 ').replace(reglastmeasureSeason74, ' season2episode9 ').replace(reglastmeasureSeason75, ' season3episode9 ').replace(reglastmeasureSeason76, ' season4episode9 ').replace(reglastmeasureSeason77, ' season5episode9 ').replace(reglastmeasureSeason78, ' season6episode9 ').replace(reglastmeasureSeason79, ' season7episode9 ').replace(reglastmeasureSeason80, ' season8episode9 ').replace(reglastmeasureSeason81, ' season9episode9 ').replace(reglastmeasureSeason82, ' season1episode1 ').replace(reglastmeasureSeason83, ' season2episode1 ').replace(reglastmeasureSeason84, ' season3episode1 ').replace(reglastmeasureSeason85, ' season4episode1 ').replace(reglastmeasureSeason86, ' season5episode1 ').replace(reglastmeasureSeason87, ' season6episode1 ').replace(reglastmeasureSeason88, ' season7episode1 ').replace(reglastmeasureSeason89, ' season8episode1 ').replace(reglastmeasureSeason90, ' season9episode1 ').replace(reglastmeasureSeason91, ' season10episode1 ').replace(reglastmeasureSeason92, ' season11episode1 ').replace(reglastmeasureSeason93, ' season12episode1 ').replace(reglastmeasureSeason94, ' season13episode1 ').replace(reglastmeasureSeason95, ' season14episode1 ').replace(reglastmeasureSeason96, ' season15episode1 ').replace(reglastmeasureSeason97, ' season16episode1 ').replace(reglastmeasureSeason98, ' season17episode1 ').replace(reglastmeasureSeason99, ' season18episode1 ').replace(reglastmeasureSeason100, ' season19episode1 ').replace(reglastmeasureSeason101, ' season20episode1 ').replace(reglastmeasureSeason102, ' season21episode1 ').replace(reglastmeasureSeason103, ' season22episode1 ').replace(reglastmeasureSeason104, ' season23episode1 ').replace(reglastmeasureSeason105, ' season24episode1 ').replace(reglastmeasureSeason106, ' season25episode1 ').replace(reglastmeasureSeason107, ' season26episode1 ').replace(reglastmeasureSeason108, ' season27episode1 ').replace(reglastmeasureSeason109, ' season28episode1 ').replace(reglastmeasureSeason110, ' season29episode1 ').replace(reglastmeasureSeason111, ' season30episode1 ').replace(reglastmeasureSeason112, ' season1episode2 ').replace(reglastmeasureSeason113, ' season2episode2 ').replace(reglastmeasureSeason114, ' season3episode2 ').replace(reglastmeasureSeason115, ' season4episode2 ').replace(reglastmeasureSeason116, ' season5episode2 ').replace(reglastmeasureSeason117, ' season6episode2 ').replace(reglastmeasureSeason118, ' season7episode2 ').replace(reglastmeasureSeason119, ' season8episode2 ').replace(reglastmeasureSeason120, ' season9episode2 ').replace(reglastmeasureSeason121, ' season10episode2 ').replace(reglastmeasureSeason122, ' season11episode2 ').replace(reglastmeasureSeason123, ' season12episode2 ').replace(reglastmeasureSeason124, ' season13episode2 ').replace(reglastmeasureSeason125, ' season14episode2 ').replace(reglastmeasureSeason126, ' season15episode2 ').replace(reglastmeasureSeason127, ' season16episode2 ').replace(reglastmeasureSeason128, ' season17episode2 ').replace(reglastmeasureSeason129, ' season18episode2 ').replace(reglastmeasureSeason130, ' season19episode2 ').replace(reglastmeasureSeason131, ' season20episode2 ').replace(reglastmeasureSeason132, ' season21episode2 ').replace(reglastmeasureSeason133, ' season22episode2 ').replace(reglastmeasureSeason134, ' season23episode2 ').replace(reglastmeasureSeason135, ' season24episode2 ').replace(reglastmeasureSeason136, ' season25episode2 ').replace(reglastmeasureSeason137, ' season26episode2 ').replace(reglastmeasureSeason138, ' season27episode2 ').replace(reglastmeasureSeason139, ' season28episode2 ').replace(reglastmeasureSeason140, ' season29episode2 ').replace(reglastmeasureSeason141, ' season30episode2 ').replace(reglastmeasureSeason142, ' season1episode3 ').replace(reglastmeasureSeason143, ' season2episode3 ').replace(reglastmeasureSeason144, ' season3episode3 ').replace(reglastmeasureSeason145, ' season4episode3 ').replace(reglastmeasureSeason146, ' season5episode3 ').replace(reglastmeasureSeason147, ' season6episode3 ').replace(reglastmeasureSeason148, ' season7episode3 ').replace(reglastmeasureSeason149, ' season8episode3 ').replace(reglastmeasureSeason150, ' season9episode3 ');
}

function replacefinalpart40(str){
return str.replace(reglastmeasureSeason151, ' season10episode3 ').replace(reglastmeasureSeason152, ' season11episode3 ').replace(reglastmeasureSeason153, ' season12episode3 ').replace(reglastmeasureSeason154, ' season13episode3 ').replace(reglastmeasureSeason155, ' season14episode3 ').replace(reglastmeasureSeason156, ' season15episode3 ').replace(reglastmeasureSeason157, ' season16episode3 ').replace(reglastmeasureSeason158, ' season17episode3 ').replace(reglastmeasureSeason159, ' season18episode3 ').replace(reglastmeasureSeason160, ' season19episode3 ').replace(reglastmeasureSeason161, ' season20episode3 ').replace(reglastmeasureSeason162, ' season21episode3 ').replace(reglastmeasureSeason163, ' season22episode3 ').replace(reglastmeasureSeason164, ' season23episode3 ').replace(reglastmeasureSeason165, ' season24episode3 ').replace(reglastmeasureSeason166, ' season25episode3 ').replace(reglastmeasureSeason167, ' season26episode3 ').replace(reglastmeasureSeason168, ' season27episode3 ').replace(reglastmeasureSeason169, ' season28episode3 ').replace(reglastmeasureSeason170, ' season29episode3 ').replace(reglastmeasureSeason171, ' season30episode3 ').replace(reglastmeasureSeason172, ' season1episode4 ').replace(reglastmeasureSeason173, ' season2episode4 ').replace(reglastmeasureSeason174, ' season3episode4 ').replace(reglastmeasureSeason175, ' season4episode4 ').replace(reglastmeasureSeason176, ' season5episode4 ').replace(reglastmeasureSeason177, ' season6episode4 ').replace(reglastmeasureSeason178, ' season7episode4 ').replace(reglastmeasureSeason179, ' season8episode4 ').replace(reglastmeasureSeason180, ' season9episode4 ').replace(reglastmeasureSeason181, ' season10episode4 ').replace(reglastmeasureSeason182, ' season11episode4 ').replace(reglastmeasureSeason183, ' season12episode4 ').replace(reglastmeasureSeason184, ' season13episode4 ').replace(reglastmeasureSeason185, ' season14episode4 ').replace(reglastmeasureSeason186, ' season15episode4 ').replace(reglastmeasureSeason187, ' season16episode4 ').replace(reglastmeasureSeason188, ' season17episode4 ').replace(reglastmeasureSeason189, ' season18episode4 ').replace(reglastmeasureSeason190, ' season19episode4 ').replace(reglastmeasureSeason191, ' season20episode4 ').replace(reglastmeasureSeason192, ' season21episode4 ').replace(reglastmeasureSeason193, ' season22episode4 ').replace(reglastmeasureSeason194, ' season23episode4 ').replace(reglastmeasureSeason195, ' season24episode4 ').replace(reglastmeasureSeason196, ' season25episode4 ').replace(reglastmeasureSeason197, ' season26episode4 ').replace(reglastmeasureSeason198, ' season27episode4 ').replace(reglastmeasureSeason199, ' season28episode4 ').replace(reglastmeasureSeason200, ' season29episode4 ').replace(reglastmeasureSeason201, ' season30episode4 ').replace(reglastmeasureSeason202, ' season1episode5 ').replace(reglastmeasureSeason203, ' season2episode5 ').replace(reglastmeasureSeason204, ' season3episode5 ').replace(reglastmeasureSeason205, ' season4episode5 ').replace(reglastmeasureSeason206, ' season5episode5 ').replace(reglastmeasureSeason207, ' season6episode5 ').replace(reglastmeasureSeason208, ' season7episode5 ').replace(reglastmeasureSeason209, ' season8episode5 ').replace(reglastmeasureSeason210, ' season9episode5 ').replace(reglastmeasureSeason211, ' season10episode5 ').replace(reglastmeasureSeason212, ' season11episode5 ').replace(reglastmeasureSeason213, ' season12episode5 ').replace(reglastmeasureSeason214, ' season13episode5 ').replace(reglastmeasureSeason215, ' season14episode5 ').replace(reglastmeasureSeason216, ' season15episode5 ').replace(reglastmeasureSeason217, ' season16episode5 ').replace(reglastmeasureSeason218, ' season17episode5 ').replace(reglastmeasureSeason219, ' season18episode5 ').replace(reglastmeasureSeason220, ' season19episode5 ').replace(reglastmeasureSeason221, ' season20episode5 ').replace(reglastmeasureSeason222, ' season21episode5 ').replace(reglastmeasureSeason223, ' season22episode5 ').replace(reglastmeasureSeason224, ' season23episode5 ').replace(reglastmeasureSeason225, ' season24episode5 ').replace(reglastmeasureSeason226, ' season25episode5 ').replace(reglastmeasureSeason227, ' season26episode5 ').replace(reglastmeasureSeason228, ' season27episode5 ').replace(reglastmeasureSeason229, ' season28episode5 ').replace(reglastmeasureSeason230, ' season29episode5 ').replace(reglastmeasureSeason231, ' season30episode5 ').replace(reglastmeasureSeason232, ' season1episode6 ').replace(reglastmeasureSeason233, ' season2episode6 ').replace(reglastmeasureSeason234, ' season3episode6 ').replace(reglastmeasureSeason235, ' season4episode6 ').replace(reglastmeasureSeason236, ' season5episode6 ').replace(reglastmeasureSeason237, ' season6episode6 ').replace(reglastmeasureSeason238, ' season7episode6 ').replace(reglastmeasureSeason239, ' season8episode6 ').replace(reglastmeasureSeason240, ' season9episode6 ').replace(reglastmeasureSeason241, ' season10episode6 ').replace(reglastmeasureSeason242, ' season11episode6 ').replace(reglastmeasureSeason243, ' season12episode6 ').replace(reglastmeasureSeason244, ' season13episode6 ').replace(reglastmeasureSeason245, ' season14episode6 ').replace(reglastmeasureSeason246, ' season15episode6 ').replace(reglastmeasureSeason247, ' season16episode6 ').replace(reglastmeasureSeason248, ' season17episode6 ').replace(reglastmeasureSeason249, ' season18episode6 ').replace(reglastmeasureSeason250, ' season19episode6 ').replace(reglastmeasureSeason251, ' season20episode6 ').replace(reglastmeasureSeason252, ' season21episode6 ').replace(reglastmeasureSeason253, ' season22episode6 ').replace(reglastmeasureSeason254, ' season23episode6 ').replace(reglastmeasureSeason255, ' season24episode6 ').replace(reglastmeasureSeason256, ' season25episode6 ').replace(reglastmeasureSeason257, ' season26episode6 ').replace(reglastmeasureSeason258, ' season27episode6 ').replace(reglastmeasureSeason259, ' season28episode6 ').replace(reglastmeasureSeason260, ' season29episode6 ').replace(reglastmeasureSeason261, ' season30episode6 ').replace(reglastmeasureSeason262, ' season1episode7 ').replace(reglastmeasureSeason263, ' season2episode7 ').replace(reglastmeasureSeason264, ' season3episode7 ').replace(reglastmeasureSeason265, ' season4episode7 ').replace(reglastmeasureSeason266, ' season5episode7 ').replace(reglastmeasureSeason267, ' season6episode7 ').replace(reglastmeasureSeason268, ' season7episode7 ').replace(reglastmeasureSeason269, ' season8episode7 ').replace(reglastmeasureSeason270, ' season9episode7 ').replace(reglastmeasureSeason271, ' season10episode7 ').replace(reglastmeasureSeason272, ' season11episode7 ').replace(reglastmeasureSeason273, ' season12episode7 ').replace(reglastmeasureSeason274, ' season13episode7 ').replace(reglastmeasureSeason275, ' season14episode7 ').replace(reglastmeasureSeason276, ' season15episode7 ').replace(reglastmeasureSeason277, ' season16episode7 ').replace(reglastmeasureSeason278, ' season17episode7 ').replace(reglastmeasureSeason279, ' season18episode7 ').replace(reglastmeasureSeason280, ' season19episode7 ').replace(reglastmeasureSeason281, ' season20episode7 ').replace(reglastmeasureSeason282, ' season21episode7 ').replace(reglastmeasureSeason283, ' season22episode7 ').replace(reglastmeasureSeason284, ' season23episode7 ').replace(reglastmeasureSeason285, ' season24episode7 ').replace(reglastmeasureSeason286, ' season25episode7 ').replace(reglastmeasureSeason287, ' season26episode7 ').replace(reglastmeasureSeason288, ' season27episode7 ').replace(reglastmeasureSeason289, ' season28episode7 ').replace(reglastmeasureSeason290, ' season29episode7 ').replace(reglastmeasureSeason291, ' season30episode7 ').replace(reglastmeasureSeason292, ' season1episode8 ').replace(reglastmeasureSeason293, ' season2episode8 ').replace(reglastmeasureSeason294, ' season3episode8 ').replace(reglastmeasureSeason295, ' season4episode8 ').replace(reglastmeasureSeason296, ' season5episode8 ').replace(reglastmeasureSeason297, ' season6episode8 ');
}

function replacefinalpart41(str){
return str.replace(reglastmeasureSeason298, ' season7episode8 ').replace(reglastmeasureSeason299, ' season8episode8 ').replace(reglastmeasureSeason300, ' season9episode8 ').replace(reglastmeasureSeason301, ' season10episode8 ').replace(reglastmeasureSeason302, ' season11episode8 ').replace(reglastmeasureSeason303, ' season12episode8 ').replace(reglastmeasureSeason304, ' season13episode8 ').replace(reglastmeasureSeason305, ' season14episode8 ').replace(reglastmeasureSeason306, ' season15episode8 ').replace(reglastmeasureSeason307, ' season16episode8 ').replace(reglastmeasureSeason308, ' season17episode8 ').replace(reglastmeasureSeason309, ' season18episode8 ').replace(reglastmeasureSeason310, ' season19episode8 ').replace(reglastmeasureSeason311, ' season20episode8 ').replace(reglastmeasureSeason312, ' season21episode8 ').replace(reglastmeasureSeason313, ' season22episode8 ').replace(reglastmeasureSeason314, ' season23episode8 ').replace(reglastmeasureSeason315, ' season24episode8 ').replace(reglastmeasureSeason316, ' season25episode8 ').replace(reglastmeasureSeason317, ' season26episode8 ').replace(reglastmeasureSeason318, ' season27episode8 ').replace(reglastmeasureSeason319, ' season28episode8 ').replace(reglastmeasureSeason320, ' season29episode8 ').replace(reglastmeasureSeason321, ' season30episode8 ').replace(reglastmeasureSeason322, ' season1episode9 ').replace(reglastmeasureSeason323, ' season2episode9 ').replace(reglastmeasureSeason324, ' season3episode9 ').replace(reglastmeasureSeason325, ' season4episode9 ').replace(reglastmeasureSeason326, ' season5episode9 ').replace(reglastmeasureSeason327, ' season6episode9 ').replace(reglastmeasureSeason328, ' season7episode9 ').replace(reglastmeasureSeason329, ' season8episode9 ').replace(reglastmeasureSeason330, ' season9episode9 ').replace(reglastmeasureSeason331, ' season10episode9 ').replace(reglastmeasureSeason332, ' season11episode9 ').replace(reglastmeasureSeason333, ' season12episode9 ').replace(reglastmeasureSeason334, ' season13episode9 ').replace(reglastmeasureSeason335, ' season14episode9 ').replace(reglastmeasureSeason336, ' season15episode9 ').replace(reglastmeasureSeason337, ' season16episode9 ').replace(reglastmeasureSeason338, ' season17episode9 ').replace(reglastmeasureSeason339, ' season18episode9 ').replace(reglastmeasureSeason340, ' season19episode9 ').replace(reglastmeasureSeason341, ' season20episode9 ').replace(reglastmeasureSeason342, ' season21episode9 ').replace(reglastmeasureSeason343, ' season22episode9 ').replace(reglastmeasureSeason344, ' season23episode9 ').replace(reglastmeasureSeason345, ' season24episode9 ').replace(reglastmeasureSeason346, ' season25episode9 ').replace(reglastmeasureSeason347, ' season26episode9 ').replace(reglastmeasureSeason348, ' season27episode9 ').replace(reglastmeasureSeason349, ' season28episode9 ').replace(reglastmeasureSeason350, ' season29episode9 ').replace(reglastmeasureSeason351, ' season30episode9 ').replace(reglastmeasureSeason352, ' season1episode1 ').replace(reglastmeasureSeason353, ' season2episode1 ').replace(reglastmeasureSeason354, ' season3episode1 ').replace(reglastmeasureSeason355, ' season4episode1 ').replace(reglastmeasureSeason356, ' season5episode1 ').replace(reglastmeasureSeason357, ' season6episode1 ').replace(reglastmeasureSeason358, ' season7episode1 ').replace(reglastmeasureSeason359, ' season8episode1 ').replace(reglastmeasureSeason360, ' season9episode1 ').replace(reglastmeasureSeason361, ' season10episode1 ').replace(reglastmeasureSeason362, ' season11episode1 ').replace(reglastmeasureSeason363, ' season12episode1 ').replace(reglastmeasureSeason364, ' season13episode1 ').replace(reglastmeasureSeason365, ' season14episode1 ').replace(reglastmeasureSeason366, ' season15episode1 ').replace(reglastmeasureSeason367, ' season16episode1 ').replace(reglastmeasureSeason368, ' season17episode1 ').replace(reglastmeasureSeason369, ' season18episode1 ').replace(reglastmeasureSeason370, ' season19episode1 ').replace(reglastmeasureSeason371, ' season20episode1 ').replace(reglastmeasureSeason372, ' season21episode1 ').replace(reglastmeasureSeason373, ' season22episode1 ').replace(reglastmeasureSeason374, ' season23episode1 ').replace(reglastmeasureSeason375, ' season24episode1 ').replace(reglastmeasureSeason376, ' season25episode1 ').replace(reglastmeasureSeason377, ' season26episode1 ').replace(reglastmeasureSeason378, ' season27episode1 ').replace(reglastmeasureSeason379, ' season28episode1 ').replace(reglastmeasureSeason380, ' season29episode1 ').replace(reglastmeasureSeason381, ' season30episode1 ').replace(reglastmeasureSeason382, ' season1episode2 ').replace(reglastmeasureSeason383, ' season2episode2 ').replace(reglastmeasureSeason384, ' season3episode2 ').replace(reglastmeasureSeason385, ' season4episode2 ').replace(reglastmeasureSeason386, ' season5episode2 ').replace(reglastmeasureSeason387, ' season6episode2 ').replace(reglastmeasureSeason388, ' season7episode2 ').replace(reglastmeasureSeason389, ' season8episode2 ').replace(reglastmeasureSeason390, ' season9episode2 ').replace(reglastmeasureSeason391, ' season10episode2 ').replace(reglastmeasureSeason392, ' season11episode2 ').replace(reglastmeasureSeason393, ' season12episode2 ').replace(reglastmeasureSeason394, ' season13episode2 ').replace(reglastmeasureSeason395, ' season14episode2 ').replace(reglastmeasureSeason396, ' season15episode2 ').replace(reglastmeasureSeason397, ' season16episode2 ').replace(reglastmeasureSeason398, ' season17episode2 ').replace(reglastmeasureSeason399, ' season18episode2 ').replace(reglastmeasureSeason400, ' season19episode2 ').replace(reglastmeasureSeason401, ' season20episode2 ').replace(reglastmeasureSeason402, ' season21episode2 ').replace(reglastmeasureSeason403, ' season22episode2 ').replace(reglastmeasureSeason404, ' season23episode2 ').replace(reglastmeasureSeason405, ' season24episode2 ').replace(reglastmeasureSeason406, ' season25episode2 ').replace(reglastmeasureSeason407, ' season26episode2 ').replace(reglastmeasureSeason408, ' season27episode2 ').replace(reglastmeasureSeason409, ' season28episode2 ').replace(reglastmeasureSeason410, ' season29episode2 ').replace(reglastmeasureSeason411, ' season30episode2 ').replace(reglastmeasureSeason412, ' season1episode3 ').replace(reglastmeasureSeason413, ' season2episode3 ').replace(reglastmeasureSeason414, ' season3episode3 ').replace(reglastmeasureSeason415, ' season4episode3 ').replace(reglastmeasureSeason416, ' season5episode3 ').replace(reglastmeasureSeason417, ' season6episode3 ').replace(reglastmeasureSeason418, ' season7episode3 ').replace(reglastmeasureSeason419, ' season8episode3 ').replace(reglastmeasureSeason420, ' season9episode3 ').replace(reglastmeasureSeason421, ' season10episode3 ').replace(reglastmeasureSeason422, ' season11episode3 ').replace(reglastmeasureSeason423, ' season12episode3 ').replace(reglastmeasureSeason424, ' season13episode3 ').replace(reglastmeasureSeason425, ' season14episode3 ').replace(reglastmeasureSeason426, ' season15episode3 ').replace(reglastmeasureSeason427, ' season16episode3 ').replace(reglastmeasureSeason428, ' season17episode3 ').replace(reglastmeasureSeason429, ' season18episode3 ').replace(reglastmeasureSeason430, ' season19episode3 ').replace(reglastmeasureSeason431, ' season20episode3 ').replace(reglastmeasureSeason432, ' season21episode3 ').replace(reglastmeasureSeason433, ' season22episode3 ').replace(reglastmeasureSeason434, ' season23episode3 ').replace(reglastmeasureSeason435, ' season24episode3 ').replace(reglastmeasureSeason436, ' season25episode3 ').replace(reglastmeasureSeason437, ' season26episode3 ').replace(reglastmeasureSeason438, ' season27episode3 ').replace(reglastmeasureSeason439, ' season28episode3 ').replace(reglastmeasureSeason440, ' season29episode3 ').replace(reglastmeasureSeason441, ' season30episode3 ').replace(reglastmeasureSeason442, ' season1episode4 ').replace(reglastmeasureSeason443, ' season2episode4 ').replace(reglastmeasureSeason444, ' season3episode4 ');
}

function replacefinalpart42(str){
return str.replace(reglastmeasureSeason445, ' season4episode4 ').replace(reglastmeasureSeason446, ' season5episode4 ').replace(reglastmeasureSeason447, ' season6episode4 ').replace(reglastmeasureSeason448, ' season7episode4 ').replace(reglastmeasureSeason449, ' season8episode4 ').replace(reglastmeasureSeason450, ' season9episode4 ').replace(reglastmeasureSeason451, ' season10episode4 ').replace(reglastmeasureSeason452, ' season11episode4 ').replace(reglastmeasureSeason453, ' season12episode4 ').replace(reglastmeasureSeason454, ' season13episode4 ').replace(reglastmeasureSeason455, ' season14episode4 ').replace(reglastmeasureSeason456, ' season15episode4 ').replace(reglastmeasureSeason457, ' season16episode4 ').replace(reglastmeasureSeason458, ' season17episode4 ').replace(reglastmeasureSeason459, ' season18episode4 ').replace(reglastmeasureSeason460, ' season19episode4 ').replace(reglastmeasureSeason461, ' season20episode4 ').replace(reglastmeasureSeason462, ' season21episode4 ').replace(reglastmeasureSeason463, ' season22episode4 ').replace(reglastmeasureSeason464, ' season23episode4 ').replace(reglastmeasureSeason465, ' season24episode4 ').replace(reglastmeasureSeason466, ' season25episode4 ').replace(reglastmeasureSeason467, ' season26episode4 ').replace(reglastmeasureSeason468, ' season27episode4 ').replace(reglastmeasureSeason469, ' season28episode4 ').replace(reglastmeasureSeason470, ' season29episode4 ').replace(reglastmeasureSeason471, ' season30episode4 ').replace(reglastmeasureSeason472, ' season1episode5 ').replace(reglastmeasureSeason473, ' season2episode5 ').replace(reglastmeasureSeason474, ' season3episode5 ').replace(reglastmeasureSeason475, ' season4episode5 ').replace(reglastmeasureSeason476, ' season5episode5 ').replace(reglastmeasureSeason477, ' season6episode5 ').replace(reglastmeasureSeason478, ' season7episode5 ').replace(reglastmeasureSeason479, ' season8episode5 ').replace(reglastmeasureSeason480, ' season9episode5 ').replace(reglastmeasureSeason481, ' season10episode5 ').replace(reglastmeasureSeason482, ' season11episode5 ').replace(reglastmeasureSeason483, ' season12episode5 ').replace(reglastmeasureSeason484, ' season13episode5 ').replace(reglastmeasureSeason485, ' season14episode5 ').replace(reglastmeasureSeason486, ' season15episode5 ').replace(reglastmeasureSeason487, ' season16episode5 ').replace(reglastmeasureSeason488, ' season17episode5 ').replace(reglastmeasureSeason489, ' season18episode5 ').replace(reglastmeasureSeason490, ' season19episode5 ').replace(reglastmeasureSeason491, ' season20episode5 ').replace(reglastmeasureSeason492, ' season21episode5 ').replace(reglastmeasureSeason493, ' season22episode5 ').replace(reglastmeasureSeason494, ' season23episode5 ').replace(reglastmeasureSeason495, ' season24episode5 ').replace(reglastmeasureSeason496, ' season25episode5 ').replace(reglastmeasureSeason497, ' season26episode5 ').replace(reglastmeasureSeason498, ' season27episode5 ').replace(reglastmeasureSeason499, ' season28episode5 ').replace(reglastmeasureSeason500, ' season29episode5 ').replace(reglastmeasureSeason501, ' season30episode5 ').replace(reglastmeasureSeason502, ' season1episode6 ').replace(reglastmeasureSeason503, ' season2episode6 ').replace(reglastmeasureSeason504, ' season3episode6 ').replace(reglastmeasureSeason505, ' season4episode6 ').replace(reglastmeasureSeason506, ' season5episode6 ').replace(reglastmeasureSeason507, ' season6episode6 ').replace(reglastmeasureSeason508, ' season7episode6 ').replace(reglastmeasureSeason509, ' season8episode6 ').replace(reglastmeasureSeason510, ' season9episode6 ').replace(reglastmeasureSeason511, ' season10episode6 ').replace(reglastmeasureSeason512, ' season11episode6 ').replace(reglastmeasureSeason513, ' season12episode6 ').replace(reglastmeasureSeason514, ' season13episode6 ').replace(reglastmeasureSeason515, ' season14episode6 ').replace(reglastmeasureSeason516, ' season15episode6 ').replace(reglastmeasureSeason517, ' season16episode6 ').replace(reglastmeasureSeason518, ' season17episode6 ').replace(reglastmeasureSeason519, ' season18episode6 ').replace(reglastmeasureSeason520, ' season19episode6 ').replace(reglastmeasureSeason521, ' season20episode6 ').replace(reglastmeasureSeason522, ' season21episode6 ').replace(reglastmeasureSeason523, ' season22episode6 ').replace(reglastmeasureSeason524, ' season23episode6 ').replace(reglastmeasureSeason525, ' season24episode6 ').replace(reglastmeasureSeason526, ' season25episode6 ').replace(reglastmeasureSeason527, ' season26episode6 ').replace(reglastmeasureSeason528, ' season27episode6 ').replace(reglastmeasureSeason529, ' season28episode6 ').replace(reglastmeasureSeason530, ' season29episode6 ').replace(reglastmeasureSeason531, ' season30episode6 ').replace(reglastmeasureSeason532, ' season1episode7 ').replace(reglastmeasureSeason533, ' season2episode7 ').replace(reglastmeasureSeason534, ' season3episode7 ').replace(reglastmeasureSeason535, ' season4episode7 ').replace(reglastmeasureSeason536, ' season5episode7 ').replace(reglastmeasureSeason537, ' season6episode7 ').replace(reglastmeasureSeason538, ' season7episode7 ').replace(reglastmeasureSeason539, ' season8episode7 ').replace(reglastmeasureSeason540, ' season9episode7 ').replace(reglastmeasureSeason541, ' season10episode7 ').replace(reglastmeasureSeason542, ' season11episode7 ').replace(reglastmeasureSeason543, ' season12episode7 ').replace(reglastmeasureSeason544, ' season13episode7 ').replace(reglastmeasureSeason545, ' season14episode7 ').replace(reglastmeasureSeason546, ' season15episode7 ').replace(reglastmeasureSeason547, ' season16episode7 ').replace(reglastmeasureSeason548, ' season17episode7 ').replace(reglastmeasureSeason549, ' season18episode7 ').replace(reglastmeasureSeason550, ' season19episode7 ').replace(reglastmeasureSeason551, ' season20episode7 ').replace(reglastmeasureSeason552, ' season21episode7 ').replace(reglastmeasureSeason553, ' season22episode7 ').replace(reglastmeasureSeason554, ' season23episode7 ').replace(reglastmeasureSeason555, ' season24episode7 ').replace(reglastmeasureSeason556, ' season25episode7 ').replace(reglastmeasureSeason557, ' season26episode7 ').replace(reglastmeasureSeason558, ' season27episode7 ').replace(reglastmeasureSeason559, ' season28episode7 ').replace(reglastmeasureSeason560, ' season29episode7 ').replace(reglastmeasureSeason561, ' season30episode7 ').replace(reglastmeasureSeason562, ' season1episode8 ').replace(reglastmeasureSeason563, ' season2episode8 ').replace(reglastmeasureSeason564, ' season3episode8 ').replace(reglastmeasureSeason565, ' season4episode8 ').replace(reglastmeasureSeason566, ' season5episode8 ').replace(reglastmeasureSeason567, ' season6episode8 ').replace(reglastmeasureSeason568, ' season7episode8 ').replace(reglastmeasureSeason569, ' season8episode8 ').replace(reglastmeasureSeason570, ' season9episode8 ').replace(reglastmeasureSeason571, ' season10episode8 ').replace(reglastmeasureSeason572, ' season11episode8 ').replace(reglastmeasureSeason573, ' season12episode8 ').replace(reglastmeasureSeason574, ' season13episode8 ').replace(reglastmeasureSeason575, ' season14episode8 ').replace(reglastmeasureSeason576, ' season15episode8 ').replace(reglastmeasureSeason577, ' season16episode8 ').replace(reglastmeasureSeason578, ' season17episode8 ').replace(reglastmeasureSeason579, ' season18episode8 ').replace(reglastmeasureSeason580, ' season19episode8 ').replace(reglastmeasureSeason581, ' season20episode8 ').replace(reglastmeasureSeason582, ' season21episode8 ').replace(reglastmeasureSeason583, ' season22episode8 ').replace(reglastmeasureSeason584, ' season23episode8 ').replace(reglastmeasureSeason585, ' season24episode8 ').replace(reglastmeasureSeason586, ' season25episode8 ').replace(reglastmeasureSeason587, ' season26episode8 ').replace(reglastmeasureSeason588, ' season27episode8 ').replace(reglastmeasureSeason589, ' season28episode8 ').replace(reglastmeasureSeason590, ' season29episode8 ').replace(reglastmeasureSeason591, ' season30episode8 ');
}

function replacefinalpart43(str){
return str.replace(reglastmeasureSeason592, ' season1episode9 ').replace(reglastmeasureSeason593, ' season2episode9 ').replace(reglastmeasureSeason594, ' season3episode9 ').replace(reglastmeasureSeason595, ' season4episode9 ').replace(reglastmeasureSeason596, ' season5episode9 ').replace(reglastmeasureSeason597, ' season6episode9 ').replace(reglastmeasureSeason598, ' season7episode9 ').replace(reglastmeasureSeason599, ' season8episode9 ').replace(reglastmeasureSeason600, ' season9episode9 ').replace(reglastmeasureSeason601, ' season10episode9 ').replace(reglastmeasureSeason602, ' season11episode9 ').replace(reglastmeasureSeason603, ' season12episode9 ').replace(reglastmeasureSeason604, ' season13episode9 ').replace(reglastmeasureSeason605, ' season14episode9 ').replace(reglastmeasureSeason606, ' season15episode9 ').replace(reglastmeasureSeason607, ' season16episode9 ').replace(reglastmeasureSeason608, ' season17episode9 ').replace(reglastmeasureSeason609, ' season18episode9 ').replace(reglastmeasureSeason610, ' season19episode9 ').replace(reglastmeasureSeason611, ' season20episode9 ').replace(reglastmeasureSeason612, ' season21episode9 ').replace(reglastmeasureSeason613, ' season22episode9 ').replace(reglastmeasureSeason614, ' season23episode9 ').replace(reglastmeasureSeason615, ' season24episode9 ').replace(reglastmeasureSeason616, ' season25episode9 ').replace(reglastmeasureSeason617, ' season26episode9 ').replace(reglastmeasureSeason618, ' season27episode9 ').replace(reglastmeasureSeason619, ' season28episode9 ').replace(reglastmeasureSeason620, ' season29episode9 ').replace(reglastmeasureSeason621, ' season30episode9 ');
}

/*Mongodb save methods*/
async function postSave(responseBase, accepted, question, answer, links) {
console.log("Saving");
if (responseBase == base1) {
if (accepted) {
let saved = await saveBase1(question, answer, links);
if (saved) {
console.log("Accepted1 postSave QA saved");
return 'success';
} else {
console.log("Accepted1 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted1(question, answer, links);
if (saved) {
console.log("Unaccepted1 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted1 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base2) {
if (accepted) {
let saved = await saveBase2(question, answer, links);
if (saved) {
console.log("Accepted2 postSave QA saved");
return 'success';
} else {
console.log("Accepted2 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted2(question, answer, links);
if (saved) {
console.log("Unaccepted2 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted2 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base3) {
if (accepted) {
let saved = await saveBase3(question, answer, links);
if (saved) {
console.log("Accepted3 postSave QA saved");
return 'success';
} else {
console.log("Accepted3 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted3(question, answer, links);
if (saved) {
console.log("Unaccepted3 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted3 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base4) {
if (accepted) {
let saved = await saveBase4(question, answer, links);
if (saved) {
console.log("Accepted4 postSave QA saved");
return 'success';
} else {
console.log("Accepted4 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted4(question, answer, links);
if (saved) {
console.log("Unaccepted4 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted4 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base5) {
if (accepted) {
let saved = await saveBase5(question, answer, links);
if (saved) {
console.log("Accepted5 postSave QA saved");
return 'success';
} else {
console.log("Accepted5 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted5(question, answer, links);
if (saved) {
console.log("Unaccepted5 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted5 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base6) {
if (accepted) {
let saved = await saveBase6(question, answer, links);
if (saved) {
console.log("Accepted6 postSave QA saved");
return 'success';
} else {
console.log("Accepted6 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted6(question, answer, links);
if (saved) {
console.log("Unaccepted6 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted6 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base7) {
if (accepted) {
let saved = await saveBase7(question, answer, links);
if (saved) {
console.log("Accepted7 postSave QA saved");
return 'success';
} else {
console.log("Accepted7 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted7(question, answer, links);
if (saved) {
console.log("Unaccepted7 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted7 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base8) {
if (accepted) {
let saved = await saveBase8(question, answer, links);
if (saved) {
console.log("Accepted8 postSave QA saved");
return 'success';
} else {
console.log("Accepted8 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted8(question, answer, links);
if (saved) {
console.log("Unaccepted8 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted8 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base9) {
if (accepted) {
let saved = await saveBase9(question, answer, links);
if (saved) {
console.log("Accepted9 postSave QA saved");
return 'success';
} else {
console.log("Accepted9 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted9(question, answer, links);
if (saved) {
console.log("Unaccepted9 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted9 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base10) {
if (accepted) {
let saved = await saveBase10(question, answer, links);
if (saved) {
console.log("Accepted10 postSave QA saved");
return 'success';
} else {
console.log("Accepted10 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted10(question, answer, links);
if (saved) {
console.log("Unaccepted10 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted10 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base11) {
if (accepted) {
let saved = await saveBase11(question, answer, links);
if (saved) {
console.log("Accepted11 postSave QA saved");
return 'success';
} else {
console.log("Accepted11 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted11(question, answer, links);
if (saved) {
console.log("Unaccepted11 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted11 postSave QA not saved");
return 'failed';
}
}
		}
		if (responseBase == base12) {
if (accepted) {
let saved = await saveBase12(question, answer, links);
if (saved) {
console.log("Accepted12 postSave QA saved");
return 'success';
} else {
console.log("Accepted12 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted12(question, answer, links);
if (saved) {
console.log("Unaccepted12 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted12 postSave QA not saved");
return 'failed';
}
}
}
if (responseBase == base13) {
if (accepted) {
let saved = await saveBase13(question, answer, links);
if (saved) {
console.log("Accepted13 postSave QA saved");
return 'success';
} else {
console.log("Accepted13 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted13(question, answer, links);
if (saved) {
console.log("Unaccepted13 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted13 postSave QA not saved");
return 'failed';
}
}
}
if (responseBase == base14) {
if (accepted) {
let saved = await saveBase14(question, answer, links);
if (saved) {
console.log("Accepted14 postSave QA saved");
return 'success';
} else {
console.log("Accepted14 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted14(question, answer, links);
if (saved) {
console.log("Unaccepted14 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted14 postSave QA not saved");
return 'failed';
}
}
}
if (responseBase == base15) {
if (accepted) {
let saved = await saveBase15(question, answer, links);
if (saved) {
console.log("Accepted15 postSave QA saved");
return 'success';
} else {
console.log("Accepted15 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted15(question, answer, links);
if (saved) {
console.log("Unaccepted15 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted15 postSave QA not saved");
return 'failed';
}
}
}
if (responseBase == base16) {
if (accepted) {
let saved = await saveBase16(question, answer, links);
if (saved) {
console.log("Accepted16 postSave QA saved");
return 'success';
} else {
console.log("Accepted16 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted16(question, answer, links);
if (saved) {
console.log("Unaccepted16 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted16 postSave QA not saved");
return 'failed';
}
}
}
if (responseBase == base17) {
if (accepted) {
let saved = await saveBase17(question, answer, links);
if (saved) {
console.log("Accepted17 postSave QA saved");
return 'success';
} else {
console.log("Accepted17 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted17(question, answer, links);
if (saved) {
console.log("Unaccepted17 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted17 postSave QA not saved");
return 'failed';
}
}
}
if (responseBase == base18) {
if (accepted) {
let saved = await saveBase18(question, answer, links);
if (saved) {
console.log("Accepted18 postSave QA saved");
return 'success';
} else {
console.log("Accepted18 postSave QA not saved");
return 'failed';
}
} else {
let saved = await saveUnaccepted18(question, answer, links);
if (saved) {
console.log("Unaccepted18 postSave QA saved");
return 'success';
} else {
console.log("Unaccepted18 postSave QA not saved");
return 'failed';
}
}
}
}

async function saveUnaccepted1(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base1 + '/';
let questionanswerText = 'language/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted1 Item base already present");
        }else{
			console.log("Unaccepted1 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted1 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted1 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted1 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted1 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted1 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted1 Item base not present");
         var myData1 = new questionAnswer1({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted1 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted1 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted1 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted1 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted2(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base2 + '/';
let questionanswerText = 'medicalscience/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted2 Item base already present");
        }else{
			console.log("Unaccepted2 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted2 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted2 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted2 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted2 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted2 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted2 Item base not present");
         var myData1 = new questionAnswer2({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted2 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted2 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted2 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted2 Item QA master not saved");
		savedata = false;
        });		
        }
return savedata;
}

async function saveUnaccepted3(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base3 + '/';
let questionanswerText = 'travel/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted3 Item base already present");
        }else{
			console.log("Unaccepted3 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted3 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted3 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted3 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted3 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted3 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted3 Item base not present");
         var myData1 = new questionAnswer3({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted3 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted3 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted3 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted3 Item QA master not saved");
		savedata = false;
        });		
        }
return savedata;
}

async function saveUnaccepted4(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base4 + '/';
let questionanswerText = 'cooking/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted4 Item base already present");
        }else{
			console.log("Unaccepted4 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted4 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted4 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted4 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted4 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted4 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted4 Item base not present");
         var myData1 = new questionAnswer4({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted4 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted4 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted4 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted4 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted5(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base5 + '/';
let questionanswerText = 'gaming/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinaltech(questionBaseText);
questionanswerText = await replacefinaltech(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted5 Item base already present");
        }else{
			console.log("Unaccepted5 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted5 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted5 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted5 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted5 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted5 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted5 Item base not present");
         var myData1 = new questionAnswer5({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted5 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted5 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted5 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted5 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted6(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base6 + '/';
let questionanswerText = 'movies/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted6 Item base already present");
        }else{
			console.log("Unaccepted6 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted6 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted6 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted6 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted6 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted6 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted6 Item base not present");
         var myData1 = new questionAnswer6({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted6 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted6 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted6 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted6 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted7(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base7 + '/';
let questionanswerText = 'music/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted7 Item base already present");
        }else{
			console.log("Unaccepted7 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted7 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted7 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted7 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted7 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted7 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted7 Item base not present");
         var myData1 = new questionAnswer7({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted7 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted7 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted7 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted7 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted8(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base8 + '/';
let questionanswerText = 'scifi/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted8 Item base already present");
        }else{
			console.log("Unaccepted8 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted8 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted8 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted8 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted8 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted8 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted8 Item base not present");
         var myData1 = new questionAnswer8({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted8 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted8 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted8 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted8 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted9(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/veterinary/';
let questionanswerText = 'veterinary/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted9 Item base already present");
        }else{
			console.log("Unaccepted9 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted9 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted9 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted9 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted9 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted9 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted9 Item base not present");
         var myData1 = new questionAnswer9({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted9 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted9 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted9 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted9 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted10(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base10 + '/';
let questionanswerText = 'technology/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted10 Item base already present");
        }else{
			console.log("Unaccepted10 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted10 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted10 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted10 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted10 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted10 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted10 Item base not present");
         var myData1 = new questionAnswer10({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted10 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted10 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted10 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted10 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted11(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base11 + '/';
let questionanswerText = 'ask/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted11 Item base already present");
        }else{
			console.log("Unaccepted11 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted11 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted11 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted11 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted11 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted11 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted11 Item base not present");
         var myData1 = new questionAnswer11({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted11 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted11 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted11 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted11 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted12(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base12 + '/';
let questionanswerText = 'askdark/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted12 Item base already present");
        }else{
			console.log("Unaccepted12 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted12 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted12 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted12 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted12 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted12 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted12 Item base not present");
         var myData1 = new questionAnswer12({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted12 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted12 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted12 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted12 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted13(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base13 + '/';
let questionanswerText = 'literature/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted13 Item base already present");
        }else{
			console.log("Unaccepted13 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted13 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted13 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted13 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted13 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted13 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted13 Item base not present");
         var myData1 = new questionAnswer13({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted13 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted13 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted13 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted13 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted14(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base14 + '/';
let questionanswerText = 'history/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted14 Item base already present");
        }else{
			console.log("Unaccepted14 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted14 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted14 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted14 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted14 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted14 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted14 Item base not present");
         var myData1 = new questionAnswer14({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted14 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted14 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted14 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted14 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted15(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base15 + '/';
let questionanswerText = 'sports/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted15 Item base already present");
        }else{
			console.log("Unaccepted15 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted15 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted15 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted15 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted15 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted15 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted15 Item base not present");
         var myData1 = new questionAnswer15({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted15 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted15 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted15 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted15 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted16(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base16 + '/';
let questionanswerText = 'finance/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted16 Item base already present");
        }else{
			console.log("Unaccepted16 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted16 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted16 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted16 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted16 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted16 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted16 Item base not present");
         var myData1 = new questionAnswer16({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted16 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted16 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted16 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted16 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted17(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base17 + '/';
let questionanswerText = 'philosophy/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted17 Item base already present");
        }else{
			console.log("Unaccepted17 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted17 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted17 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted17 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted17 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted17 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted17 Item base not present");
         var myData1 = new questionAnswer17({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted17 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted17 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted17 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted17 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveUnaccepted18(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base18 + '/';
let questionanswerText = 'mythology/unaccepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Unaccepted18 Item base already present");
        }else{
			console.log("Unaccepted18 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Unaccepted18 Item base saved");
        })
        .catch(err => {
            console.log("Unaccepted18 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted18 Item base master saved");	
        })
        .catch(err => {
            console.log("Unaccepted18 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Unaccepted18 Item base already present");
			savedata = false;
        }else{
			console.log("Unaccepted18 Item base not present");
         var myData1 = new questionAnswer18({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Unaccepted18 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Unaccepted18 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Unaccepted18 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Unaccepted18 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase1(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base1 + '/';
let questionanswerText = 'language/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted1 Item base already present");
        }else{
			console.log("Accepted1 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted1 Item base saved");
        })
        .catch(err => {
            console.log("Accepted1 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted1 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted1 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted1 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted1 Item base not present");
         var myData1 = new questionAnswer1({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted1 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted1 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted1 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted1 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase2(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base2 + '/';
let questionanswerText = 'medicalscience/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted2 Item base already present");
        }else{
			console.log("Accepted2 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted2 Item base saved");
        })
        .catch(err => {
            console.log("Accepted2 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted2 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted2 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted2 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted2 Item base not present");
         var myData1 = new questionAnswer2({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted2 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted2 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted2 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted2 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase3(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base3 + '/';
let questionanswerText = 'travel/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted3 Item base already present");
        }else{
			console.log("Accepted3 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted3 Item base saved");
        })
        .catch(err => {
            console.log("Accepted3 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted3 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted3 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted3 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted3 Item base not present");
         var myData1 = new questionAnswer3({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted3 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted3 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted3 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted3 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase4(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base4 + '/';
let questionanswerText = 'cooking/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted4 Item base already present");
        }else{
			console.log("Accepted4 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted4 Item base saved");
        })
        .catch(err => {
            console.log("Accepted4 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted4 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted4 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted4 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted4 Item base not present");
         var myData1 = new questionAnswer4({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted4 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted4 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted4 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted4 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase5(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base5 + '/';
let questionanswerText = 'gaming/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinaltech(questionBaseText);
questionanswerText = await replacefinaltech(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted5 Item base already present");
        }else{
			console.log("Accepted5 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted5 Item base saved");
        })
        .catch(err => {
            console.log("Accepted5 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted5 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted5 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted5 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted5 Item base not present");
         var myData1 = new questionAnswer5({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted5 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted5 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted5 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted5 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase6(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base6 + '/';
let questionanswerText = 'movies/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted6 Item base already present");
        }else{
			console.log("Accepted6 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted6 Item base saved");
        })
        .catch(err => {
            console.log("Accepted6 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted6 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted6 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted6 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted6 Item base not present");
         var myData1 = new questionAnswer6({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted6 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted6 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted6 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted6 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase7(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base7 + '/';
let questionanswerText = 'music/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted7 Item base already present");
        }else{
			console.log("Accepted7 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted7 Item base saved");
        })
        .catch(err => {
            console.log("Accepted7 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted7 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted7 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted7 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted7 Item base not present");
         var myData1 = new questionAnswer7({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted7 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted7 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted7 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted7 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase8(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base8 + '/';
let questionanswerText = 'scifi/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted8 Item base already present");
        }else{
			console.log("Accepted8 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted8 Item base saved");
        })
        .catch(err => {
            console.log("Accepted8 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted8 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted8 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted8 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted8 Item base not present");
         var myData1 = new questionAnswer8({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted8 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted8 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted8 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted8 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase9(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/veterinary/';
let questionanswerText = 'veterinary/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted9 Item base already present");
        }else{
			console.log("Accepted9 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted9 Item base saved");
        })
        .catch(err => {
            console.log("Accepted9 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted9 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted9 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted9 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted9 Item base not present");
         var myData1 = new questionAnswer9({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted9 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted9 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted9 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted9 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase10(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base10 + '/';
let questionanswerText = 'technology/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted10 Item base already present");
        }else{
			console.log("Accepted10 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted10 Item base saved");
        })
        .catch(err => {
            console.log("Accepted10 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted10 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted10 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted10 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted10 Item base not present");
         var myData1 = new questionAnswer10({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted10 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted10 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted10 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted10 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase11(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base11 + '/';
let questionanswerText = 'ask/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted11 Item base already present");
        }else{
			console.log("Accepted11 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted11 Item base saved");
        })
        .catch(err => {
            console.log("Accepted11 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted11 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted11 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted11 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted11 Item base not present");
         var myData1 = new questionAnswer11({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted11 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted11 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted11 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted11 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase12(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base12 + '/';
let questionanswerText = 'askdark/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted12 Item base already present");
        }else{
			console.log("Accepted12 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted12 Item base saved");
        })
        .catch(err => {
            console.log("Accepted12 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted12 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted12 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted12 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted12 Item base not present");
         var myData1 = new questionAnswer12({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted12 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted12 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted12 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted12 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase13(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base13 + '/';
let questionanswerText = 'literature/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted13 Item base already present");
        }else{
			console.log("Accepted13 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted13 Item base saved");
        })
        .catch(err => {
            console.log("Accepted13 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted13 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted13 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted13 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted13 Item base not present");
         var myData1 = new questionAnswer13({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted13 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted13 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted13 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted13 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase14(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base14 + '/';
let questionanswerText = 'history/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted14 Item base already present");
        }else{
			console.log("Accepted14 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted14 Item base saved");
        })
        .catch(err => {
            console.log("Accepted14 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted14 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted14 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted14 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted14 Item base not present");
         var myData1 = new questionAnswer14({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted14 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted14 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted14 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted14 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase15(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base15 + '/';
let questionanswerText = 'sports/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted15 Item base already present");
        }else{
			console.log("Accepted15 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted15 Item base saved");
        })
        .catch(err => {
            console.log("Accepted15 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted15 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted15 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted15 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted15 Item base not present");
         var myData1 = new questionAnswer15({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted15 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted15 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted15 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted15 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase16(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base16 + '/';
let questionanswerText = 'finance/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted16 Item base already present");
        }else{
			console.log("Accepted16 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted16 Item base saved");
        })
        .catch(err => {
            console.log("Accepted16 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted16 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted16 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted16 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted16 Item base not present");
         var myData1 = new questionAnswer16({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted16 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted16 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted16 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted16 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase17(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base17 + '/';
let questionanswerText = 'philosophy/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted17 Item base already present");
        }else{
			console.log("Accepted17 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted17 Item base saved");
        })
        .catch(err => {
            console.log("Accepted17 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted17 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted17 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted17 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted17 Item base not present");
         var myData1 = new questionAnswer17({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted17 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted17 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted17 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted17 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

async function saveBase18(question, answer, links){
	question = question.replace(/Â/g,'').toLowerCase() + '??';
	answer = answer.replace(/Â/g,'').toLowerCase();
let questionBaseText = '/' + question + '/' + base18 + '/';
let questionanswerText = 'mythology/accepted/' + question + '/' + answer + '/';
questionBaseText = await replacefinal(questionBaseText);
questionanswerText = await replacefinal(questionanswerText);
questionanswerText = questionanswerText + links;
questionBaseText = questionBaseText.slice(1, -1);
console.log('QA saved: ' + questionanswerText);
let docs = await questionMasterBase.exists({Item : questionBaseText});
			let savedata;
        if (docs){            
			console.log("Accepted18 Item base already present");
        }else{
			console.log("Accepted18 Item base not present");
         var myData1 = new questionBase({
    Item: questionBaseText
});
		await myData1.save()
        .then(item => {				
            console.log("Accepted18 Item base saved");
        })
        .catch(err => {
            console.log("Accepted18 Item base not saved");
        });
		var myData2 = new questionMasterBase({
    Item: questionBaseText
});
await myData2.save()
        .then(item => {
            console.log("Accepted18 Item base master saved");	
        })
        .catch(err => {
            console.log("Accepted18 Item base master not saved");	
        });		
        }

docs = await questionMaster.exists({Item : questionanswerText});
        if (docs){            
			console.log("Accepted18 Item base already present");
			savedata = false;
        }else{
			console.log("Accepted18 Item base not present");
         var myData1 = new questionAnswer18({
    Item: questionanswerText
});
		await myData1.save()
        .then(item => {
			console.log("Accepted18 Item QA saved");		            			
        })
        .catch(err => {
            console.log("Accepted18 Item QA not saved");
		savedata = false;
        });
var myData2 = new questionMaster({
    Item: questionanswerText
});
await myData2.save()
        .then(item => {
            console.log("Accepted18 Item QA master saved");
			savedata = true;
        })
        .catch(err => {
            console.log("Accepted18 Item QA master not saved");
		savedata = false;
        });		
        }
        return savedata;
}

/*Data extraction queueing method*/
async function queueAddingMethod(page, browser, link, questionDatabase) {
let responseOk = false;
let extracted = false;
	await page.exposeFunction('all_replace', all_replace);
await page.setRequestInterception(true);            
			
        console.log('page scrape starting');        	
	  var startTime = Date.now();
	page.on('response', async response => {		
	responseOk = response.ok();
  }); 	
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(link, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
} catch(e) {
	console.log(' Page response failed' + e.message);
	return false;
	 }
await wait(5000);
if (!responseOk) {		
return false;	
}	 
	 try {
	 await recaptchaHandler(page);
console.log('page loaded');			
			if (questionDatabase == 'fluther1') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase1(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted1(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}			
			
			if (questionDatabase == 'fluther2') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase2(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted2(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			if (questionDatabase == 'fluther3') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase3(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted3(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			if (questionDatabase == 'fluther4') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase4(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted4(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			if (questionDatabase == 'fluther6') {
	await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase6(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted6(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			
			if (questionDatabase == 'fluther7') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase7(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted7(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			if (questionDatabase == 'fluther8') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase8(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted8(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			if (questionDatabase == 'fluther9') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase9(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted9(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			if (questionDatabase == 'fluther10') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase10(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted10(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			if (questionDatabase == 'fluther12') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase12(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted12(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			
			if (questionDatabase == 'fluther13') {
				await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase13(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted13(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			
			if (questionDatabase == 'fluther14') {
	await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase14(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted14(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			if (questionDatabase == 'fluther15') {
	await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase15(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted15(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			if (questionDatabase == 'fluther16') {
	await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase16(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted16(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			if (questionDatabase == 'fluther17') {
	await page.exposeFunction('all_replace_fluther', all_replace_fluther);
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersFluther, flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('fluther extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase17(question, answer, urls);
		if (saved) {
		console.log('fluther accepted saved');
		} else {
		console.log('fluther accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted17(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('fluther unaccepted saved');
		} else {
		console.log('fluther unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('fluther unextracted');	
			}
			}
			if (questionDatabase == 'answerscom1') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase1(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted1(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom2') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase2(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted2(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom3') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase3(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted3(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom4') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase4(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted4(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom5') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase5(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted5(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom6') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase6(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted6(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom7') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase7(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted7(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom8') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase8(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted8(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom10') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase10(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted10(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom11') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase11(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted11(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom12') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase12(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted12(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom13') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase13(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted13(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
if (questionDatabase == 'answerscom14') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase14(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted14(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom15') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase15(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted15(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
			if (questionDatabase == 'answerscom16') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase16(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted16(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			if (questionDatabase == 'answerscom18') {
console.log('starting extraction');
extracted = await Promise.race([page.evaluate(extractItemsQuestionsAnswersAnswerscom, answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 40000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');
   return false;});
if (extracted) {
		console.log('answerscom extracted');
		let extractedObj = JSON.parse(extracted);
		let extractedObjAccepted = extractedObj.accepted;
		let extractedObjAcceptedArray = extractedObjAccepted.split('/');
		let question = extractedObjAcceptedArray[0];
		let answer = extractedObjAcceptedArray[1];
		let urls = [];
let urlsTrash = extractedObj.trash;
for (var i = 0; i < urlsTrash.length; i++) {
let pushCheckVar = pushCheck(url_extract(urlsTrash[i]), urls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
urls = clearUrl(urls);
		let saved = await saveBase18(question, answer, urls);
		if (saved) {
		console.log('answerscom accepted saved');
		} else {
		console.log('answerscom accepted not saved');	
			}
		if ('unaccepted' in extractedObj) {
		let extractedObjUnaccepted = extractedObj.unaccepted;
		for (var i = 0; i < extractedObjUnaccepted.length; i++) {
		let extractedObjUnacceptedArray = extractedObjUnaccepted[i].split('/');
		let questionunaccepted = extractedObjUnacceptedArray[0];
		let answerunaccepted = extractedObjUnacceptedArray[1];

		let saved = await saveUnaccepted18(questionunaccepted, answerunaccepted, 'null');
		if (saved) {
		console.log('answerscom unaccepted saved');
		} else {
		console.log('answerscom unaccepted not saved');	
			}
		}
		}
		} else {
		console.log('answerscom unextracted');	
			}
			}
			
} catch(e) {
console.log('errore extractItemsQuestionsAnswers: ' +  e.message);
return false;
}
		return true;
}

/*Link extraction methods*/
async function extractItemsLinksFluther(flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion) {
  let links = [];  
  let unaccepted = false;  
  let link = null;  
  const extractedElementsBoxLinks = await document.querySelectorAll(flutherBoxLinks);
if (extractedElementsBoxLinks) {
  for (var i=0; i < extractedElementsBoxLinks.length ; i++) {
  let testUrls = [];
  let linkElement = null;
  linkElement = await extractedElementsBoxLinks[i].querySelector(flutherLink);
  if (linkElement) {
  link = linkElement.href;
  }
  let question = null;
  question = await extractedElementsBoxLinks[i].querySelector(flutherQuestion);
  if (question) {
  question =  await window.all_replace_fluther(question.innerText);
  }
  let numberElement = null;
  let number = null;
  numberElement = await extractedElementsBoxLinks[i].querySelector(flutherNumberComments);
  if (numberElement) {
  number = numberElement.innerText;
  if (number.match(/\d+/g)) {
	number = number.match(/\d+/g)[0];
	} else {
number = null;
} 		
  }  
  if (question && number && linkElement) {
   let urlTest = await window.urlRegexTest(extractedElementsBoxLinks[i].innerText);
  if (urlTest) {
   let urlExtractLink = await window.url_extract(extractedElementsBoxLinks[i].innerText);
let pushCheckVar = await window.pushCheck(urlExtractLink, testUrls);
if (!pushCheckVar) {
	return 'pushcheck error';
	}
}
unaccepted = false;
unaccepted = await window.checkAccepted(testUrls);
  if (parseInt(number) > 0) {
  if (question.length < lengthQuestion) {
  if (!unaccepted) {
  links.push(link);
  }
  }
  }
  }
    }
  if (links.length) {
  return links;
} else { 
return null;
}
  } else {
	return null; 
	  }
}

async function extractItemsLinksAnswersCom(answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer) {
  let links = [];  
  let unaccepted = false;
  let extractedElementsBoxLinks = null;      
  let link = null;
  try {  
  extractedElementsBoxLinks = await document.querySelectorAll(answersComBoxLinks);
  } catch (e) {
return 'links1 error: ' + e.message;
}
  if (extractedElementsBoxLinks) {
  for (var i=0; i < extractedElementsBoxLinks.length ; i++) {
  let linkSelector = null;
  let testUrls = [];
try {  
  linkSelector = await extractedElementsBoxLinks[i].querySelector(answersComLink);
  } catch (e) {
return 'links2 error: ' + e.message;
}
if (linkSelector) {
try {
  link = linkSelector.href;
  } catch (e) {
return 'links3 error: ' + e.message;
}
let question = null;
try {
  question = await window.all_replace(linkSelector.innerText);
  } catch (e) {
return 'links4 error: ' + e.message;
}
let singleAnswer = null;
try {
singleAnswer = await extractedElementsBoxLinks[i].querySelector(answersComBoxSingleAnswer);
} catch (e) {
return 'links9 error: ' + e.message;
}
try {
  let urlTest = await window.urlRegexTest(extractedElementsBoxLinks[i].innerText);
  if (urlTest) {
let urlExtractLink = await window.url_extract(extractedElementsBoxLinks[i].innerText);
let pushCheckVar = await window.pushCheck(urlExtractLink, testUrls);
if (!pushCheckVar) {
	return 'pushcheck error';
	}
}
} catch (e) {
return 'links5 error: ' + e.message;
}
try {
unaccepted = false;
unaccepted = await window.checkAccepted(testUrls);
} catch (e) {
return 'links6 error: ' + e.message;
}
if (singleAnswer) {
  if (question.length < lengthQuestion) {
  if (!unaccepted) {  
  links.push(link);
	}
  }
  }
  }
  }
  if (links.length) {
  return links;
} else { 
return null;
}	
  } else {
return null;	  
	  }	
}

/*Q&A extraction methods*/
async function extractItemsQuestionsAnswersFluther(flutherBoxComments, flutherSingleQuestion, flutherComments, flutherCommentPoints, lengthAnswer) {
let linkRefs = [];
let arrayusers = [];
let Answer = null;
let Question = null;
let pointPlus = null;
let commentPointsCheckElement = null;
let commentPoints = null;
let objSaved = {};
let unacceptedSaved = [];
let stringAccepted = null;
let answercheck = null;
const extractedElementsBoxAnswers = await document.querySelectorAll(flutherBoxComments);
const extractedElementsQuestion = await document.querySelector(flutherSingleQuestion);
let userquestion = await document.querySelector('#question > a');
userquestion = userquestion.href;
userquestion = userquestion.replace('https://www.fluther.com/users/','');
userquestion = userquestion.slice(0, -1);
arrayusers.push(userquestion);
if (extractedElementsBoxAnswers) {
for (var i=0; i < extractedElementsBoxAnswers.length ; i++) {
let answerTest = null;
let useranswer = await extractedElementsBoxAnswers[i].querySelector('a');
useranswer = useranswer.href;
useranswer = useranswer.replace('https://www.fluther.com/users/','');
useranswer = useranswer.slice(0, -1);
arrayusers.push(useranswer);
answerTest = await extractedElementsBoxAnswers[i].querySelector(flutherComments);
if (answerTest) {
	answercheck = answerTest.innerText;
	linkRefs.push(answercheck);
if (extractedElementsQuestion) {
answerTest = await window.all_replace_fluther(answerTest.innerText);
if (answerTest.length < lengthAnswer && answerTest.length > 1) {
if (!answercheck.includes('twitch') && !answercheck.includes('vimeo') && !answercheck.includes('dailymotion') && !answercheck.includes('yahoo') && !answercheck.includes('quora') && !answercheck.includes('answerscom') && !answercheck.includes('fluther') && !answercheck.includes('google') && !answercheck.includes('stack') && !answercheck.includes('facebook') && !answercheck.includes('reddit') && !answercheck.includes('Twitch') && !answercheck.includes('Vimeo') && !answercheck.includes('Dailymotion') && !answercheck.includes('Yahoo') && !answercheck.includes('Quora') && !answercheck.includes('Answerscom') && !answercheck.includes('Fluther') && !answercheck.includes('Google') && !answercheck.includes('Stack') && !answercheck.includes('Facebook') && !answercheck.includes('Reddit') && !answercheck.includes('Imgbb') && !answercheck.includes('Imgur') && !answercheck.includes('Postimages') && !answercheck.includes('Pasteboard') && !answercheck.includes('Imageupload') && !answercheck.includes('Photobox') && !answercheck.includes('Linkpicture') && !answercheck.includes('Linguee') && !answercheck.includes('Bbcode0') && !answercheck.includes('Kek.gg') && !answercheck.includes('Imageshack') && !answercheck.includes('Imgbox') && !answercheck.includes('Picpasteplus') && !answercheck.includes('Unsee') && !answercheck.includes('Imgpile') && !answercheck.includes('imgbb') && !answercheck.includes('imgur') && !answercheck.includes('postimages') && !answercheck.includes('pasteboard') && !answercheck.includes('imageupload') && !answercheck.includes('photobox') && !answercheck.includes('linkpicture') && !answercheck.includes('linguee') && !answercheck.includes('bbcode0') && !answercheck.includes('kek.gg') && !answercheck.includes('imageshack') && !answercheck.includes('imgbox') && !answercheck.includes('picpasteplus') && !answercheck.includes('unsee') && !answercheck.includes('imgpile')) {
commentPointsCheckElement = await extractedElementsBoxAnswers[i].querySelector(flutherCommentPoints);
if (commentPointsCheckElement) {
commentPoints = commentPointsCheckElement.innerText;
try {
if (parseInt(commentPoints) > 0) {
if (!pointPlus) { 
Answer = answerTest;
pointPlus = parseInt(commentPoints);
} else {
if (parseInt(commentPoints) > pointPlus) {
Answer = answerTest;
}
}
} else {
let questionReplace = extractedElementsQuestion.innerText;
Question = await window.all_replace_fluther(questionReplace);
if (Question.charAt(Question.length - 1) != '?' && Question.charAt(Question.length - 1) != '? ')    {
Question = Question + '?';
}
let stringSaved = Question + '/' + answerTest;
for (var k=0; k < arrayusers.length ; k++) {
if (arrayusers[k] != 'bob') {	
stringSaved = stringSaved.replace(arrayusers[k], '');
}
}
unacceptedSaved.push(stringSaved);
}
} catch (e) {}
}
}
}
}
}
}
if (Answer)    {
linkRefs.push(extractedElementsQuestion.innerText);
let questionReplace = extractedElementsQuestion.innerText;
Question = await window.all_replace_fluther(questionReplace);
if (Question.charAt(Question.length - 1) != '?' && Question.charAt(Question.length - 1) != '? ')    {
Question = Question + '?';
}
stringAccepted = Question + '/' + Answer;
for (var i=0; i < arrayusers.length ; i++) {
if (arrayusers[i] != 'bob') {	
stringAccepted = stringAccepted.replace(arrayusers[i], '');
}	
}
}
if (stringAccepted) {
if (unacceptedSaved.length) {
objSaved.unaccepted = unacceptedSaved;
}
objSaved.trash = linkRefs;
objSaved.accepted = stringAccepted;
return JSON.stringify(objSaved);
} else {
return false;
}
} else {
return false;
} 
}

async function extractItemsQuestionsAnswersAnswerscom(answerscomBoxAnswer, answerscomSingleQuestion, answersComAnswers, lengthAnswer) {
let linkRefs = [];
let Answer = null;
let Question = null;
let answerTest = null;
let answerPoints = null;
let answerPointsElement = null;
let objSaved = {};
let unacceptedSaved = [];
let stringAccepted = null;
let answercheck = null;
let pointPlus = null;
const extractedElementsBoxAnswer = await document.querySelector(answerscomBoxAnswer);
const extractedElementsQuestion = await document.querySelector(answerscomSingleQuestion);
if (extractedElementsBoxAnswer) {	
answerTest = await extractedElementsBoxAnswer.querySelector(answersComAnswers);
if (answerTest) {
if (extractedElementsQuestion) {
	answercheck = answerTest.innerText;
linkRefs.push(answercheck);
linkRefs.push(extractedElementsQuestion.innerText);	
answerTest = await window.all_replace(answerTest.innerText);
if (answerTest.length < lengthAnswer && answerTest.length > 1) {
if (!answercheck.includes('twitch') && !answercheck.includes('vimeo') && !answercheck.includes('dailymotion') && !answercheck.includes('yahoo') && !answercheck.includes('quora') && !answercheck.includes('answerscom') && !answercheck.includes('fluther') && !answercheck.includes('google') && !answercheck.includes('stack') && !answercheck.includes('facebook') && !answercheck.includes('reddit') && !answercheck.includes('Twitch') && !answercheck.includes('Vimeo') && !answercheck.includes('Dailymotion') && !answercheck.includes('Yahoo') && !answercheck.includes('Quora') && !answercheck.includes('Answerscom') && !answercheck.includes('Fluther') && !answercheck.includes('Google') && !answercheck.includes('Stack') && !answercheck.includes('Facebook') && !answercheck.includes('Reddit') && !answercheck.includes('Imgbb') && !answercheck.includes('Imgur') && !answercheck.includes('Postimages') && !answercheck.includes('Pasteboard') && !answercheck.includes('Imageupload') && !answercheck.includes('Photobox') && !answercheck.includes('Linkpicture') && !answercheck.includes('Linguee') && !answercheck.includes('Bbcode0') && !answercheck.includes('Kek.gg') && !answercheck.includes('Imageshack') && !answercheck.includes('Imgbox') && !answercheck.includes('Picpasteplus') && !answercheck.includes('Unsee') && !answercheck.includes('Imgpile') && !answercheck.includes('imgbb') && !answercheck.includes('imgur') && !answercheck.includes('postimages') && !answercheck.includes('pasteboard') && !answercheck.includes('imageupload') && !answercheck.includes('photobox') && !answercheck.includes('linkpicture') && !answercheck.includes('linguee') && !answercheck.includes('bbcode0') && !answercheck.includes('kek.gg') && !answercheck.includes('imageshack') && !answercheck.includes('imgbox') && !answercheck.includes('picpasteplus') && !answercheck.includes('unsee') && !answercheck.includes('imgpile')) {
Answer = answerTest;
} else {
Question = await window.all_replace(extractedElementsQuestion.innerText);
if (Question.charAt(Question.length - 1) != '?' && Question.charAt(Question.length - 1) != '? ')    {
Question = Question + '?';
}
let stringSaved = Question + '/' + answerTest;
unacceptedSaved.push(stringSaved);
}
}
}
}
if (Answer)    {
Question = await window.all_replace(extractedElementsQuestion.innerText);
if (Question.charAt(Question.length - 1) != '?' && Question.charAt(Question.length - 1) != '? ')    {
Question = Question + '?';
}
stringAccepted = Question + '/' + Answer;
}
if (stringAccepted) {
if (unacceptedSaved.length) {
objSaved.unaccepted = unacceptedSaved;
}
objSaved.trash = linkRefs;
objSaved.accepted = stringAccepted;
return JSON.stringify(objSaved);
} else {
return false;
}
} else {
return false;
} 
}

/*Infinite scrolling page methods*/  
async function scrapeInfiniteScrollItemsAnswersCom11(browser, page) {
  console.log('scrape infinite scroll items answerscom starting');
  let items = [];
  let questionDatabase;
  let browserbool = true;
  browser.on('disconnected', () => {		
	browserbool = false;
  });
    try {
		console.log('extracting items');
	      questionDatabase = 'answerscom11';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
	if (items.length) {
let browser2;
let timeRetry = 500;
try {
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
console.log('error puppeteerlink' + e.message);
	try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
try {
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
	console.log('errore on response ip change:' + e.message);
	return false;
}
}
try {
	for (var i=0; i < items.length ; i++) {
		if (browserbool) {
	let page2 = await browser2.newPage();
	let result = await Promise.race([queueAddingMethod(page2, browser2, items[i], questionDatabase),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 300000)
  })]).catch((err) => {console.log('evaluation failed timeout exceeded');});
        if (result) {
		console.log('queueAddingtask successfull');
		timeRetry = 500;
		try {
	await page2.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
		} else {
        console.log('queueAddingtask error');
		try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
await wait(timeRetry);
timeRetry += 500;
if (timeRetry > 25000) {
console.log('errore timeretry');
return false;
}
try {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
	try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
try {
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
	console.log('errore on response ip change:' + e.message);
	return false;
}
}
        }
		} else {
			console.log('task terminated');
			try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
	return false;
			}
}
} catch(e) {
	console.log('errore on cycle queueadding' + e.message);
	try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
return false;
}		
try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
} else {
console.log('no items');
	return true;	
	}
	console.log('success answerscom');
	return true;
  } catch(e) {
	  console.log('error answerscom ' + e.message);
return false;
  }
  }
  
  async function scrapeInfiniteScrollItemsAnswersCom(browser, page, itemTargetCount, dataBase) {
  console.log('scrape infinite scroll items answerscom starting');
  let items = [];
  let questionDatabase;
  let browserbool = true;
  browser.on('disconnected', () => {		
	browserbool = false;
  });
    try {
	var startTime = Date.now();
	while (items.length < itemTargetCount && (Date.now() - startTime) < (itemTargetCount * 40000)) {
		console.log('itemslength: ' + items.length + 'itemtargetcount: ' + itemTargetCount);
		console.log('extracting items');
	      if (dataBase == 'question1') {
			  questionDatabase = 'answerscom1';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question2') {
			  questionDatabase = 'answerscom2';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
	      if (dataBase == 'question3') {
		questionDatabase = 'answerscom3';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question4') {
		questionDatabase = 'answerscom4';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question5') {
			questionDatabase = 'answerscom5';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question6') {
			questionDatabase = 'answerscom6';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question7') {
			questionDatabase = 'answerscom7';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question8') {
			questionDatabase = 'answerscom8';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }		  
		  if (dataBase == 'question10') {
			 questionDatabase = 'answerscom10';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question11') {
			 questionDatabase = 'answerscom11';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question12') {
			questionDatabase = 'answerscom12';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question13') {
			questionDatabase = 'answerscom13';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question14') {
			 questionDatabase = 'answerscom14';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question15') {
			questionDatabase = 'answerscom15';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question16') {
			questionDatabase = 'answerscom16';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
          }
		  if (dataBase == 'question18') {
			questionDatabase = 'answerscom18';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksAnswersCom, answersComBoxLinks, answersComLink, lengthQuestion, answersComBoxSingleAnswer);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
          }
		  try {
await autoScrollAnswers(page);
} catch(e) {
console.log('scroll error, finished before limit? message: ' + e.message);
break;
}
    }
	if (items.length) {
let browser2;
let timeRetry = 500;
try {
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
console.log('error puppeteerlink' + e.message);
	try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
try {
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
	console.log('errore on response ip change:' + e.message);
	return false;
}
}
try {
	for (var i=0; i < items.length ; i++) {
		if (browserbool) {
	let page2 = await browser2.newPage();
	let result = await Promise.race([queueAddingMethod(page2, browser2, items[i], questionDatabase),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 300000)
  })]).catch((err) => {console.log('evaluation failed timeout exceeded');});
        if (result) {
		console.log('queueAddingtask successfull');
		timeRetry = 500;
		try {
	await page2.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
		} else {
        console.log('queueAddingtask error');
		try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
await wait(timeRetry);
timeRetry += 500;
if (timeRetry > 25000) {
console.log('errore timeretry');
return false;
}
try {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
	try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
try {
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
	console.log('errore on response ip change:' + e.message);
	return false;
}
}
        }
		} else {
			console.log('task terminated');
			try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
	return false;
			}
}
} catch(e) {
	console.log('errore on cycle queueadding' + e.message);
	try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
return false;
}		
try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
} else {
console.log('no items');
	return true;	
	}
	console.log('success answerscom');
	return true;
  } catch(e) {
	  console.log('error answerscom ' + e.message);
return false;
  }
  }
  
  async function scrapeInfiniteScrollItemsFluther(browser, page, itemTargetCount, dataBase) {
  console.log('scrape infinite scroll items fluther starting');
  let items = [];
  let pagenumber = 1;
  let questionDatabase;
  let browserbool = true;
  browser.on('disconnected', () => {		
	browserbool = false;
  });
  try {
	var startTime = Date.now();
    while (items.length < itemTargetCount && (Date.now() - startTime) < (itemTargetCount * 40000)) {
		console.log('itemslength: ' + items.length + 'itemtargetcount: ' + itemTargetCount);
		console.log('extracting items');
if (dataBase == 'question1') {
	questionDatabase = 'fluther1';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }	
	      if (dataBase == 'question2') {
			  questionDatabase = 'fluther2';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question3') {
			  questionDatabase = 'fluther3';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question4') {
			 questionDatabase = 'fluther4';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question6') {
			questionDatabase = 'fluther6';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }	
	      if (dataBase == 'question7') {
			questionDatabase = 'fluther7';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question8') {
			questionDatabase = 'fluther8';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question9') {
			questionDatabase = 'fluther9';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question10') {
			questionDatabase = 'fluther10';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question12') {
			 questionDatabase = 'fluther12';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }	
	      if (dataBase == 'question13') {
			questionDatabase = 'fluther13';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question14') {
			 questionDatabase = 'fluther14';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question15') {
			 questionDatabase = 'fluther15';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question16') {
			 questionDatabase = 'fluther16';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  if (dataBase == 'question17') {
			 questionDatabase = 'fluther17';
		  let itemsExSerialized = await page.evaluate(extractItemsLinksFluther, flutherBoxLinks, flutherLink, flutherQuestion, flutherNumberComments, lengthQuestion);
	      if (itemsExSerialized) {
		  console.log('itemsExtracted: ' + itemsExSerialized);
try {
let itemsExSerializedArray = itemsExSerialized.toString().split(',');
let pushCheckVar = pushCheck(itemsExSerializedArray, items);
if (!pushCheckVar) {
	console.log('pushcheck error');
	}
console.log('number of items: ' + items.length);
} catch(e) {
console.log('items json: ' + e.message);
}
		  } else {
		  console.log('itemsExSerialized null');
		  }
		  }
		  pagenumber += 1;
      try {
await autoScrollFluther(page, pagenumber);
} catch(e) {
console.log('scroll error, finished before limit? message: ' + e.message);
break;
}
    }
	if (items.length) {
let browser2;
let timeRetry = 500;
try {
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
console.log('error puppeteerlink' + e.message);
	try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
try {
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
	console.log('errore on response ip change:' + e.message);
	return false;
}
}
try {
	for (var i=0; i < items.length ; i++) {
		if (browserbool) {
	let page2 = await browser2.newPage();
	let result = await Promise.race([queueAddingMethod(page2, browser2, items[i], questionDatabase),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 300000)
  })]).catch((err) => {console.log('evaluation failed timeout exceeded');});
        if (result) {
		console.log('queueAddingtask successfull');
		timeRetry = 500;
		try {
	await page2.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
		} else {
        console.log('queueAddingtask error');
		try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
await wait(timeRetry);
timeRetry += 500;
if (timeRetry > 25000) {
console.log('errore timeretry');
return false;
}
try {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
	try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
try {
	browser2 = await puppeteer.launch(optionPPT);
} catch(e) {
	console.log('errore on response ip change:' + e.message);
	return false;
}
}
        }
		} else {
			console.log('task terminated');
			try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
	return false;
			}
}
} catch(e) {
	console.log('errore on cycle queueadding' + e.message);
	try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
return false;
}		
try {
	await browser2.close();
} catch(e) {
	console.log('errore on browser2 closing:' + e.message);
}
} else {
console.log('no items');
	return true;	
	}
	console.log('success scrapefluther');
	return true;
  } catch(e) {
	  console.log('error scrapefluther ' + e.message);
return false;
  }
  }
  
/*Scroll methods*/ 
  async function autoScrollFluther(page, pagenumber) {
	let flutherPageSelector = '[href="?page=' + pagenumber + '"]';
	try { 
	await page.waitForSelector(flutherPageSelector);
await Promise.all([
        page.waitForNavigation({ waitUntil: 'networkidle2' }),
        page.click(flutherPageSelector)
    ]).catch(e => {
	console.log(e.message);
	return true;
	});	
	console.log('new page fluther');
			await wait(3000);
			await recaptchaHandler(page);
			}
		catch (e) {
			throw new Error(e.message);
		}
	}
	
	async function autoScrollAnswers(page) {  
  try {
  await page.waitForSelector(answersComNext, {
        timeout: 30000
      });
  await Promise.all([
        page.waitForNavigation({ waitUntil: 'networkidle2' }),
        page.click(answersComNext)
    ]);
		await wait(5000);
	await recaptchaHandler(page);	
			}
		catch (e) {
			throw new Error(e.message);
		}
		}
	
/*Link extraction methods*/
	async function flutherExtraction1(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther1');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {  
	page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
await page.screenshot({ path: "./data/screenshotfluther.jpg", type: "jpeg", fullPage: true });
const html = await page.content();
fs.writeFileSync("./data/indexfluther.html", html);
	 let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems1, 'question1'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther1 : ' + e.message);
	return false;
	}
	}
  
  async function flutherExtraction2(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther2');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
 page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems2, 'question2'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther2 : ' + e.message);
	return false;
	}
	}
	
	async function flutherExtraction3(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther3');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
	 return false;
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems3, 'question3'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther3 : ' + e.message);
	return false;
	}
	} 
  
  async function flutherExtraction4(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther4');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
	 return false;
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems4, 'question4'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther4 : ' + e.message);
	return false;
	}
	}  
  
  async function flutherExtraction6(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther6');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
	page.on('response', async response => {		
	responseOk = response.ok();
  });	
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
	 return false;
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	  }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems6, 'question6'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther6 : ' + e.message);
	return false;
	}
	}
	
	async function flutherExtraction7(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther7');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems7, 'question7'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther7 : ' + e.message);
	return false;
	}
	}
	
	async function flutherExtraction8(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther8');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems8, 'question8'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther8 : ' + e.message);
	return false;
	}
	}
	
	async function flutherExtraction9(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther9');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems9, 'question9'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther9 : ' + e.message);
	return false;
	}
	}
	
	async function flutherExtraction10(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther10');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
		page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
	 return false;
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems10, 'question10'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther10 : ' + e.message);
	return false;
	}
	}	
	
	async function flutherExtraction12(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther12');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
		page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });		
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
        await page.exposeFunction('all_replace_fluther', all_replace_fluther);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	 let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems12, 'question12'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther12 : ' + e.message);
	return false;
	}
	}	
	
	async function flutherExtraction13(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
        await page.exposeFunction('all_replace_fluther', all_replace_fluther);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther13');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
		await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems13, 'question13'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther13 : ' + e.message);
	return false;
	}
	}
	
	async function flutherExtraction14(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
		await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther14');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
		await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems14, 'question14'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther14 : ' + e.message);
	return false;
	}
	}
	
	async function flutherExtraction15(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
		await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther14');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
		await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems15, 'question15'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther15 : ' + e.message);
	return false;
	}
	}
	
	async function flutherExtraction16(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
		await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther14');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
		await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems16, 'question16'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther16 : ' + e.message);
	return false;
	}
	}
	
	async function flutherExtraction17(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
		await page.setRequestInterception(true);
		console.log('starting extractItemsLinksfluther14');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.exposeFunction('all_replace_fluther', all_replace_fluther);
		await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsFluther(browser, page, limitforItems17, 'question17'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksfluther17 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction1(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.setRequestInterception(true);
		console.log('starting extractItemsLinksAnswersCom1');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
	page.on('response', async response => {		
	responseOk = response.ok();
  });	
 page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
	 return false;
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
await page.screenshot({ path: "./data/screenshotanswerscom.jpg", type: "jpeg", fullPage: true });
const html = await page.content();
fs.writeFileSync("./data/indexanswerscom.html", html);
	 let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems1, 'question1'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
     if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom1 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction2(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.setRequestInterception(true);
		console.log('starting extractItemsLinksAnswersCom1');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
	page.on('response', async response => {		
	responseOk = response.ok();
  });	
 page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
	 return false;
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
await page.screenshot({ path: "./data/screenshotanswerscom.jpg", type: "jpeg", fullPage: true });
const html = await page.content();
fs.writeFileSync("./data/indexanswerscom.html", html);
	 let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems2, 'question2'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
     if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom2 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction3(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.setRequestInterception(true);
		console.log('starting extractItemsLinksAnswersCom3');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
		await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems3, 'question3'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom3 : ' + e.message);
	return false;
	}
	}	
	
	async function answersComExtraction4(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksAnswersCom4');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
		page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });		
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems4, 'question4'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom4 : ' + e.message);
	return false;
	}
	}	
	
	async function answersComExtraction5(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.setRequestInterception(true);
		console.log('starting extractItemsLinksAnswersCom5');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems5, 'question5'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom5 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction6(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksAnswersCom6');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
		page.on('response', async response => {		
	responseOk = response.ok();
  });	
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems6, 'question6'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom6 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction7(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);            
	
		console.log('starting extractItemsLinksAnswersCom7');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);  
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems7, 'question7'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom7 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction8(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);           
	
		console.log('starting extractItemsLinksAnswersCom8');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
	 return false;
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);  
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems8, 'question8'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom8 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction10(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
let timeRetry = 1000;
await page.setRequestInterception(true);	
		console.log('starting extractItemsLinksAnswersCom10');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems10, 'question10'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom10 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction11(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
console.log('starting extractItemsLinksAnswersCom11');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
			page.on('response', async response => {		
	responseOk = response.ok();
  });
 page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });		
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom11(browser, page),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
     if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom11 : ' + e.message);
	return false;
	}
	}	
	
	async function answersComExtraction12(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true); 
		console.log('starting extractItemsLinksAnswersCom12');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
	page.on('response', async response => {		
	responseOk = response.ok();
  });		
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
		await page.setRequestInterception(true); 
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems12, 'question12'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom12 : ' + e.message);
	return false;
	}
	}	
	
	async function answersComExtraction13(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
let timeRetry = 1000;
await page.setRequestInterception(true);
		console.log('starting extractItemsLinksAnswersCom13');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) {
page.on('response', async response => {		
	responseOk = response.ok();
  });		
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems13Answers, 'question13'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
     if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom13 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction14(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
console.log('starting extractItemsLinksAnswersCom14');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
	page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems14, 'question14'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom14 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction15(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
		console.log('starting extractionanswerscom15');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems15, 'question15'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom15 : ' + e.message);
	return false;
	}
	}
	
	async function answersComExtraction16(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
		console.log('starting extractionanswerscom16');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems16, 'question16'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom16 : ' + e.message);
	return false;
	}
	}

async function answersComExtraction18(url, browser) {
	let responseOk = false;
let page = await browser.newPage();
let timeRetry = 1000;
await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
		console.log('starting extractionanswerscom16');		
  var startTime = Date.now();  
	while (!responseOk && (Date.now() - startTime) < 150000) { 
	page.on('response', async response => {		
	responseOk = response.ok();
  });
page.on('request', async request => {
				if (request.resourceType() !== 'image' && request.resourceType() !== 'font') {
					console.log('Request continued');
                    try {
				await puppeteerProxy.proxyRequest({
      page,
      proxyUrl: 'http://' + authProxy + '@' + proxyArray[sessionID] + ':' + portArray[sessionID],
      request,
    });
	} catch(e) {
     console.log('error proxy request');
return false;	 
}
                } else {
					console.log('Request abort');
                    request.abort();
                }							 
            });	
	console.log('responseok: ' + responseOk + ' datenow: ' + Date.now() + ' startTime: ' + startTime);
responseOk = false;
try {	
	await page.goto(url, {
  timeout: 40000,
  waitUntil: 'networkidle2'
});
await wait(2000);
} catch(e) {
console.log('error on going to url' + e.message);
}
if (!responseOk) {		
		console.log(' Page response failed');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
	try {
	await browser.close();
} catch(e) {
	console.log('errore on browser closing:' + e.message);
}
try {
	browser = await puppeteer.launch(optionPPT);
    page = await browser.newPage();
	await page.exposeFunction('all_replace', all_replace);
		await page.exposeFunction('urlRegexTest', urlRegexTest);
		await page.exposeFunction('pushCheck', pushCheck);
		await page.exposeFunction('url_extract', url_extract);
		await page.exposeFunction('checkAccepted', checkAccepted);
await page.setRequestInterception(true);
	await wait(timeRetry);
timeRetry += 1000;
if (timeRetry > 50000) {
console.log('errore timeretry');
responseOk = true;
}
} catch(e) {
	responseOk = true;
console.log('errore on response ip change:' + e.message);
}	
} else {
      console.log(' Success: The Page Response was successful (no need to change the IP Address).');
   timeRetry = 1000;
 }
	 }
	try {
	 await recaptchaHandler(page);
console.log('page loaded');
	let scraped = await Promise.race([scrapeInfiniteScrollItemsAnswersCom(browser, page, limitforItems18, 'question18'),new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 50000000)
  })]).catch( async (err) => {console.log('evaluation failed timeout exceeded');});
    if (scraped) {
		console.log('successo extractItemsLinksfluther1');
    } else {console.log('errore extractItemsLinksfluther1');}
	try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}	
	return true;
	} catch(e) {
if (!page.isClosed()) {
try {
	await page.close();
	} catch(e) {
	console.log('errore pageclosing : ' + e.message);	
	}
}
	console.log('errore extractItemsLinksAnswersCom18 : ' + e.message);
	return false;
	}
	}
	
	/*API extraction methods*/
	async function stackApi1() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems1 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems1 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems1: ' + limitforItems1 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site1 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase1(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item1 stack accepted saved');
stackCount++;
} else {
	console.log('Item1 stack accepted not saved');
}
});
} else {
await saveUnaccepted1(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item1 stack unaccepted saved');
} else {
	console.log('Item1 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 1 no arrayResponseI');
return 'error stack 1';
}
}
modelCount = await questionAnswer1.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
} else {
hasMore = false;
}
}
} catch(e) {
	console.log('error: ' + e.message + 'errorstack: ' + e.stack);
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems1: ' + limitforItems1 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 1: ' + e.message);
return 'error stack 1';}
}

async function stackApi2a() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems2Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems2Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems2Stack: ' + limitforItems2Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site2a + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase2(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item2 stack accepted saved');
stackCount++;
} else {
	console.log('Item2 stack accepted not saved');
}
});
} else {
await saveUnaccepted2(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item2 stack unaccepted saved');
} else {
	console.log('Item2 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 2 no arrayResponseI');
return 'error stack 2';
}
}
modelCount = await questionAnswer2.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
	console.log('error: ' + e.message);
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems2Stack: ' + limitforItems2Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 2: ' + e.message);
return 'error stack 2';}
}

async function stackApi2b() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems2Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems2Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems2Stack: ' + limitforItems2Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site2b + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase2(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item2 stack accepted saved');
stackCount++;
} else {
	console.log('Item2 stack accepted not saved');
}
});
} else {
await saveUnaccepted2(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item2 stack unaccepted saved');
} else {
	console.log('Item2 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 2 no arrayResponseI');
return 'error stack 2';
}
}
modelCount = await questionAnswer2.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems2Stack: ' + limitforItems2Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 2: ' + e.message);
return 'error stack 2';}
}

async function stackApi3a() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems3Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems3Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems3Stack: ' + limitforItems3Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site3a + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase3(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item3 stack accepted saved');
stackCount++;
} else {
	console.log('Item3 stack accepted not saved');
}
});
} else {
await saveUnaccepted3(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item3 stack unaccepted saved');
} else {
	console.log('Item3 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 3 no arrayResponseI');
return 'error stack 3';
}
}
modelCount = await questionAnswer3.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems3Stack: ' + limitforItems3Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 3: ' + e.message);
return 'error stack 3';}
}

async function stackApi3b() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems3Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems3Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems3Stack: ' + limitforItems3Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site3b + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase3(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item3 stack accepted saved');
stackCount++;
} else {
	console.log('Item3 stack accepted not saved');
}
});
} else {
await saveUnaccepted3(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item3 stack unaccepted saved');
} else {
	console.log('Item3 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 3 no arrayResponseI');
return 'error stack 3';
}
}
modelCount = await questionAnswer3.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems3Stack: ' + limitforItems3Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 3: ' + e.message);
return 'error stack 3';}
}

async function stackApi4a() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems4Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems4Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems4Stack: ' + limitforItems4Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site4a + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase4(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item4 stack accepted saved');
stackCount++;
} else {
	console.log('Item4 stack accepted not saved');
}
});
} else {
await saveUnaccepted4(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item4 stack unaccepted saved');
} else {
	console.log('Item4 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 4 no arrayResponseI');
return 'error stack 4';
}
}
modelCount = await questionAnswer4.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
} else {
hasMore = false;
}	
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems4Stack: ' + limitforItems4Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 4: ' + e.message);
return 'error stack 4';}
}

async function stackApi4b() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems4Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems4Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems4Stack: ' + limitforItems4Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site4b + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase4(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item4 stack accepted saved');
stackCount++;
} else {
	console.log('Item4 stack accepted not saved');
}
});
} else {
await saveUnaccepted4(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item4 stack unaccepted saved');
} else {
	console.log('Item4 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 4 no arrayResponseI');
return 'error stack 4';
}
}
modelCount = await questionAnswer4.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems4Stack: ' + limitforItems4Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 4: ' + e.message);
return 'error stack 4';}
}

async function stackApi5() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems5 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems5 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems5: ' + limitforItems5 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site5 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase5(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item5 stack accepted saved');
stackCount++;
} else {
	console.log('Item5 stack accepted not saved');
}
});
} else {
await saveUnaccepted5(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item5 stack unaccepted saved');
} else {
	console.log('Item5 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 5 no arrayResponseI');
return 'error stack 5';
}
}
modelCount = await questionAnswer5.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems5: ' + limitforItems5 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 5: ' + e.message);
return 'error stack 5';}
}

async function stackApi6() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems6 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems6 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems6: ' + limitforItems6 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site6 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase6(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item6 stack accepted saved');
stackCount++;
} else {
	console.log('Item6 stack accepted not saved');
}
});
} else {
await saveUnaccepted6(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item6 stack unaccepted saved');
} else {
	console.log('Item6 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 6 no arrayResponseI');
return 'error stack 6';
}
}
modelCount = await questionAnswer6.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems6: ' + limitforItems6 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 6: ' + e.message);
return 'error stack 6';}
}

async function stackApi7() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems7 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems7 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems7: ' + limitforItems7 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site7 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase7(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item7 stack accepted saved');
stackCount++;
} else {
	console.log('Item7 stack accepted not saved');
}
});
} else {
await saveUnaccepted7(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item7 stack unaccepted saved');
} else {
	console.log('Item7 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 7 no arrayResponseI');
return 'error stack 7';
}
}
modelCount = await questionAnswer7.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems7: ' + limitforItems7 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 7: ' + e.message);
return 'error stack 7';}
}

async function stackApi8a() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems8Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems8Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems8Stack: ' + limitforItems8Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site8a + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase8(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item8 stack accepted saved');
stackCount++;
} else {
	console.log('Item8 stack accepted not saved');
}
});
} else {
await saveUnaccepted8(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item8 stack unaccepted saved');
} else {
	console.log('Item8 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 8 no arrayResponseI');
return 'error stack 8';
}
}
modelCount = await questionAnswer8.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems8Stack: ' + limitforItems8Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 8: ' + e.message);
return 'error stack 8';}
}

async function stackApi8b() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems8Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems8Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems8Stack: ' + limitforItems8Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site8b + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase8(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item8 stack accepted saved');
stackCount++;
} else {
	console.log('Item8 stack accepted not saved');
}
});
} else {
await saveUnaccepted8(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item8 stack unaccepted saved');
} else {
	console.log('Item8 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 8 no arrayResponseI');
return 'error stack 8';
}
}
modelCount = await questionAnswer8.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems8Stack: ' + limitforItems8Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 8: ' + e.message);
return 'error stack 8';}
}

async function stackApi9() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems9 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems9 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems9: ' + limitforItems9 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site9 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase9(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item9 stack accepted saved');
stackCount++;
} else {
	console.log('Item9 stack accepted not saved');
}
});
} else {
await saveUnaccepted9(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item9 stack unaccepted saved');
} else {
	console.log('Item9 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 9 no arrayResponseI');
return 'error stack 9';
}
}
modelCount = await questionAnswer9.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems9: ' + limitforItems9 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 9: ' + e.message);
return 'error stack 9';}
}

async function stackApi11() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems11 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems11 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems11: ' + limitforItems11 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site11 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase11(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item11 stack accepted saved');
stackCount++;
} else {
	console.log('Item11 stack accepted not saved');
}
});
} else {
await saveUnaccepted11(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item11 stack unaccepted saved');
} else {
	console.log('Item11 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 11 no arrayResponseI');
return 'error stack 11';
}
}
modelCount = await questionAnswer11.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems11: ' + limitforItems11 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 11: ' + e.message);
return 'error stack 11';}
}

async function stackApi13a() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems13Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems13Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems13Stack: ' + limitforItems13Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site13a + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase13(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item13 stack accepted saved');
stackCount++;
} else {
	console.log('Item13 stack accepted not saved');
}
});
} else {
await saveUnaccepted13(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item13 stack unaccepted saved');
} else {
	console.log('Item13 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 13 no arrayResponseI');
return 'error stack 13';
}
}
modelCount = await questionAnswer13.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems13Stack: ' + limitforItems13Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 13: ' + e.message);
return 'error stack 13';}
}

async function stackApi13b() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems13Stack && modelCount < modelMax && (Date.now() - startTime) < (limitforItems13Stack * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems13Stack: ' + limitforItems13Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site13b + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase13(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item13 stack accepted saved');
stackCount++;
} else {
	console.log('Item13 stack accepted not saved');
}
});
} else {
await saveUnaccepted13(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item13 stack unaccepted saved');
} else {
	console.log('Item13 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 13 no arrayResponseI');
return 'error stack 13';
}
}
modelCount = await questionAnswer13.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems13Stack: ' + limitforItems13Stack + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 13: ' + e.message);
return 'error stack 13';}
}

async function stackApi14() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems14 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems14 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems14: ' + limitforItems14 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site14 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase14(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item14 stack accepted saved');
stackCount++;
} else {
	console.log('Item14 stack accepted not saved');
}
});
} else {
await saveUnaccepted14(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item14 stack unaccepted saved');
} else {
	console.log('Item14 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 14 no arrayResponseI');
return 'error stack 14';
}
}
modelCount = await questionAnswer14.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems14: ' + limitforItems14 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 14: ' + e.message);
return 'error stack 14';}
}

async function stackApi15() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems15 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems15 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems15: ' + limitforItems15 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site15 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase15(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item15 stack accepted saved');
stackCount++;
} else {
	console.log('Item15 stack accepted not saved');
}
});
} else {
await saveUnaccepted15(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item15 stack unaccepted saved');
} else {
	console.log('Item15 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 15 no arrayResponseI');
return 'error stack 15';
}
}
modelCount = await questionAnswer15.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems15: ' + limitforItems15 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 15: ' + e.message);
return 'error stack 15';}
}

async function stackApi17() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems17 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems17 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems17: ' + limitforItems17 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site17 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase17(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item17 stack accepted saved');
stackCount++;
} else {
	console.log('Item17 stack accepted not saved');
}
});
} else {
await saveUnaccepted17(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item17 stack unaccepted saved');
} else {
	console.log('Item17 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 17 no arrayResponseI');
return 'error stack 17';
}
}
modelCount = await questionAnswer17.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems17: ' + limitforItems17 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 17: ' + e.message);
return 'error stack 17';}
}

async function stackApi18() {
let modelCount = 0;
let hasMore = true;
let path = ''; 
let stackCount = 0;
let pageNumber = '1';
let stackLimit = 9000;
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems18 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems18 * 4000)) {
console.log('hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems18: ' + limitforItems18 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime);
path = '/2.2/answers?page=' + pageNumber + '&pagesize=100&order=desc&sort=votes&site=' + site18 + '&filter=!frogvBN4z49)xK)1Ut1TSRopYE-oxu3(f.H';
path = hostBase + path;
let responseOkStack = false;
	let ipChange = true;	
if (stackLimit <= 10) {
	ipChange = false;
	}
while (!responseOkStack) {	
if (ipChange) {
let hostProxy = proxyArray[sessionID];
let portProxy = portArray[sessionID];
console.log('ip: ' + hostProxy + ' port: ' + portProxy);
try {	
let json = await fetch(path, { agent:new HttpsProxyAgent({auth: authProxy, port: portProxy, host: hostProxy}), headers:headers });
console.log('response :' + JSON.stringify(json));
if (!json.ok) {
	console.log('connection refused');
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;	  
    } else {
	console.log('connection accepted');
let response = await json.json();
let arrayResponse = response['items'];
stackLimit = response['quota_remaining'];
if (arrayResponse.length) {
for (var i = 0; i < arrayResponse.length; i++) {
let testUrls = [];
let unaccepted = false;
let arrayResponseI = arrayResponse[i];
if (arrayResponseI) {
let questionTestReplace = all_replace(arrayResponseI['title'].replace('[duplicate]', '').replace('[closed]', ''));
let answerTest = all_replace(arrayResponseI['body'].replace(regTagsCode, '').replace('::before', ''));
let questionTest = questionTestReplace;
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
let bodyraw = arrayResponseI['body'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (questionTest.length < lengthQuestion && questionTest.length > 5) {
		if (answerTest.length < lengthAnswer && answerTest.length > 1) {
		if (arrayResponseI['is_accepted']) {
		if (questionTest.includes('?')) {
		if (!unaccepted) {		
		await saveBase18(questionTest, answerTest, clearUrl(testUrls)).then((output) => {
if (output) {
	console.log('Item18 stack accepted saved');
stackCount++;
} else {
	console.log('Item18 stack accepted not saved');
}
});
} else {
await saveUnaccepted18(questionTest, answerTest, 'null').then((output) => {
if (output) {
	console.log('Item18 stack unaccepted saved');
} else {
	console.log('Item18 stack unaccepted not saved');
}
});
}
}
}
}
}
} else {
console.log('error stack 18 no arrayResponseI');
return 'error stack 18';
}
}
modelCount = await questionAnswer18.countDocuments({});
await wait(1200);
pageNumber = (parseInt(pageNumber) + 1).toString();
console.log('pageScraped');	
hasMore = response['has_more'];
    responseOkStack = true;
	} else {
hasMore = false;
}
}
} catch(e) {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}	
} else {
sessionID += 1;
console.log('CONNECTION CHANGED NUMBER: ' + sessionID);
await wait(timeRetry);
timeRetry += 250;
if (sessionID == (proxyArray.length - 1)) {
	sessionID = 0;
	}
ipChange = true;
}
}
}
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems18: ' + limitforItems18 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 18: ' + e.message);
return 'error stack 18';}
}

async function redditApi1() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems1 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems1 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
	console.log('getting subreddit');
let subreddit = await r.getSubreddit(subReddit1);
console.log('getting subreddit');
let hotposts = await subreddit.getHot(payload);
console.log('getting hot subreddit');
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
console.log('getting comments');
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
console.log('getting submission');
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase1(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item1 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item1 stack accepted not saved');
	break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted1(questionTest, answerTest, 'null');
if (output) {
	console.log('Item1 stack unaccepted saved');
} else {
	console.log('Item1 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted1(questionTest, answerTest, 'null');
if (output) {
	console.log('Item1 stack unaccepted saved');
} else {
	console.log('Item1 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer1.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems1: ' + limitforItems1 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 1: ' + e.message);
return 'error stack 1';}
}

async function redditApi2() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems2 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems2 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit2);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase2(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item2 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item2 stack accepted not saved');
	break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted2(questionTest, answerTest, 'null');
if (output) {
	console.log('Item2 stack unaccepted saved');
} else {
	console.log('Item2 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted2(questionTest, answerTest, 'null');
if (output) {
	console.log('Item2 stack unaccepted saved');
} else {
	console.log('Item2 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer2.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems2: ' + limitforItems2 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 2: ' + e.message);
return 'error stack 2';}
}

async function redditApi3() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems3 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems3 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit3);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase3(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item3 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item3 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted3(questionTest, answerTest, 'null');
if (output) {
	console.log('Item3 stack unaccepted saved');
} else {
	console.log('Item3 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted3(questionTest, answerTest, 'null');
if (output) {
	console.log('Item3 stack unaccepted saved');
} else {
	console.log('Item3 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer3.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems3: ' + limitforItems3 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 3: ' + e.message);
return 'error stack 3';}
}

async function redditApi4() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems4 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems4 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit4);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase4(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item4 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item4 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted4(questionTest, answerTest, 'null');
if (output) {
	console.log('Item4 stack unaccepted saved');
} else {
	console.log('Item4 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted4(questionTest, answerTest, 'null');
if (output) {
	console.log('Item4 stack unaccepted saved');
} else {
	console.log('Item4 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer4.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems4: ' + limitforItems4 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 4: ' + e.message);
return 'error stack 4';}
}

async function redditApi5() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems5 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems5 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit5);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase5(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item5 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item5 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted5(questionTest, answerTest, 'null');
if (output) {
	console.log('Item5 stack unaccepted saved');
} else {
	console.log('Item5 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted5(questionTest, answerTest, 'null');
if (output) {
	console.log('Item5 stack unaccepted saved');
} else {
	console.log('Item5 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer5.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems5: ' + limitforItems5 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 5: ' + e.message);
return 'error stack 5';}
}

async function redditApi6a() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems6Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems6Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit6a);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase6(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item6 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item6 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted6(questionTest, answerTest, 'null');
if (output) {
	console.log('Item6 stack unaccepted saved');
} else {
	console.log('Item6 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted6(questionTest, answerTest, 'null');
if (output) {
	console.log('Item6 stack unaccepted saved');
} else {
	console.log('Item6 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer6.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems6Reddit: ' + limitforItems6Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 6: ' + e.message);
return 'error stack 6';}
}

async function redditApi6b() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems6Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems6Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit6b);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase6(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item6 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item6 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted6(questionTest, answerTest, 'null');
if (output) {
	console.log('Item6 stack unaccepted saved');
} else {
	console.log('Item6 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted6(questionTest, answerTest, 'null');
if (output) {
	console.log('Item6 stack unaccepted saved');
} else {
	console.log('Item6 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer6.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems6Reddit: ' + limitforItems6Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 6: ' + e.message);
return 'error stack 6';}
}

async function redditApi7() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems7 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems7 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit7b);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase7(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item7 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item7 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted7(questionTest, answerTest, 'null');
if (output) {
	console.log('Item7 stack unaccepted saved');
} else {
	console.log('Item7 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted7(questionTest, answerTest, 'null');
if (output) {
	console.log('Item7 stack unaccepted saved');
} else {
	console.log('Item7 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer7.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems7: ' + limitforItems7 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 7: ' + e.message);
return 'error stack 7';}
}

async function redditApi8() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems8 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems8 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit8);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase8(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item8 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item8 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted8(questionTest, answerTest, 'null');
if (output) {
	console.log('Item8 stack unaccepted saved');
} else {
	console.log('Item8 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted8(questionTest, answerTest, 'null');
if (output) {
	console.log('Item8 stack unaccepted saved');
} else {
	console.log('Item8 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer8.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems8: ' + limitforItems8 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 8: ' + e.message);
return 'error stack 8';}
}

async function redditApi9() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems9 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems9 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit9);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase9(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item9 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item9 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted9(questionTest, answerTest, 'null');
if (output) {
	console.log('Item9 stack unaccepted saved');
} else {
	console.log('Item9 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted9(questionTest, answerTest, 'null');
if (output) {
	console.log('Item9 stack unaccepted saved');
} else {
	console.log('Item9 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer9.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems9: ' + limitforItems9 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 9: ' + e.message);
return 'error stack 9';}
}

async function redditApi10() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems10 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems10 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit10);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase10(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item10 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item10 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted10(questionTest, answerTest, 'null');
if (output) {
	console.log('Item10 stack unaccepted saved');
} else {
	console.log('Item10 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted10(questionTest, answerTest, 'null');
if (output) {
	console.log('Item10 stack unaccepted saved');
} else {
	console.log('Item10 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer10.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems10: ' + limitforItems10 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 10: ' + e.message);
return 'error stack 10';}
}

async function redditApi11a() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems11Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems11Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 100};
}
try {
let subreddit = await r.getSubreddit(subReddit11a);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase11(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item11 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item11 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted11(questionTest, answerTest, 'null');
if (output) {
	console.log('Item11 stack unaccepted saved');
} else {
	console.log('Item11 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted11(questionTest, answerTest, 'null');
if (output) {
	console.log('Item11 stack unaccepted saved');
} else {
	console.log('Item11 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer11.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems11Reddit: ' + limitforItems11Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 11: ' + e.message);
return 'error stack 11';}
}

async function redditApi11b() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems11Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems11Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit11b);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase11(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item11 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item11 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted11(questionTest, answerTest, 'null');
if (output) {
	console.log('Item11 stack unaccepted saved');
} else {
	console.log('Item11 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted11(questionTest, answerTest, 'null');
if (output) {
	console.log('Item11 stack unaccepted saved');
} else {
	console.log('Item11 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer11.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems11Reddit: ' + limitforItems11Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 11: ' + e.message);
return 'error stack 11';}
}

async function redditApi12() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems12 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems12 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit12);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase12(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item12 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item12 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted12(questionTest, answerTest, 'null');
if (output) {
	console.log('Item12 stack unaccepted saved');
} else {
	console.log('Item12 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted12(questionTest, answerTest, 'null');
if (output) {
	console.log('Item12 stack unaccepted saved');
} else {
	console.log('Item12 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer12.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems12: ' + limitforItems12 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 12: ' + e.message);
return 'error stack 12';}
}

async function redditApi13a() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems13Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems13Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 100};
}
try {
let subreddit = await r.getSubreddit(subReddit13a);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase13(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item13 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item13 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted13(questionTest, answerTest, 'null');
if (output) {
	console.log('Item13 stack unaccepted saved');
} else {
	console.log('Item13 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted13(questionTest, answerTest, 'null');
if (output) {
	console.log('Item13 stack unaccepted saved');
} else {
	console.log('Item13 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer13.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems13Reddit: ' + limitforItems13Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 13: ' + e.message);
return 'error stack 13';}
}

async function redditApi13b() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems13Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems13Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 100};
}
try {
let subreddit = await r.getSubreddit(subReddit13b);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase13(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item13 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item13 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted13(questionTest, answerTest, 'null');
if (output) {
	console.log('Item13 stack unaccepted saved');
} else {
	console.log('Item13 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted13(questionTest, answerTest, 'null');
if (output) {
	console.log('Item13 stack unaccepted saved');
} else {
	console.log('Item13 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer13.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems13Reddit: ' + limitforItems13Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 13: ' + e.message);
return 'error stack 13';}
}

async function redditApi13c() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems13Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems13Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 100};
}
try {
let subreddit = await r.getSubreddit(subReddit13c);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase13(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item13 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item13 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted13(questionTest, answerTest, 'null');
if (output) {
	console.log('Item13 stack unaccepted saved');
} else {
	console.log('Item13 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted13(questionTest, answerTest, 'null');
if (output) {
	console.log('Item13 stack unaccepted saved');
} else {
	console.log('Item13 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer13.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems13Reddit: ' + limitforItems13Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 13: ' + e.message);
return 'error stack 13';}
}

async function redditApi14() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems14 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems14 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 100};
}
try {
let subreddit = await r.getSubreddit(subReddit14);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase14(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item14 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item14 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted14(questionTest, answerTest, 'null');
if (output) {
	console.log('Item14 stack unaccepted saved');
} else {
	console.log('Item14 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveUnaccepted14(questionTest, answerTest, 'null');
if (output) {
	console.log('Item14 stack unaccepted saved');
} else {
	console.log('Item14 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer14.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems14: ' + limitforItems14 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 14: ' + e.message);
return 'error stack 14';}
}

async function redditApi15() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems15 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems15 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit15);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase15(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item15 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item15 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted15(questionTest, answerTest, 'null');
if (output) {
	console.log('Item15 stack unaccepted saved');
} else {
	console.log('Item15 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted15(questionTest, answerTest, 'null');
if (output) {
	console.log('Item15 stack unaccepted saved');
} else {
	console.log('Item15 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer15.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems15: ' + limitforItems15 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 15: ' + e.message);
return 'error stack 15';}
}

async function redditApi16a() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems16Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems16Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit16a);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase16(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item16 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item16 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer16.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems16Reddit: ' + limitforItems16Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 16: ' + e.message);
return 'error stack 16';}
}

async function redditApi16b() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems16Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems16Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit16b);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase16(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item16 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item16 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer16.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems16Reddit: ' + limitforItems16Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 16: ' + e.message);
return 'error stack 16';}
}

async function redditApi16c() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems16Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems16Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit16c);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase16(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item16 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item16 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer16.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems16Reddit: ' + limitforItems16Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 16: ' + e.message);
return 'error stack 16';}
}

async function redditApi16d() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems16Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems16Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit16d);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase16(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item16 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item16 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer16.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems16Reddit: ' + limitforItems16Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 16: ' + e.message);
return 'error stack 16';}
}

async function redditApi16e() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems16Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems16Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit16e);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase16(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item16 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item16 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer16.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems16Reddit: ' + limitforItems16Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 16: ' + e.message);
return 'error stack 16';}
}

async function redditApi16f() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems16Reddit && modelCount < modelMax && (Date.now() - startTime) < (limitforItems16Reddit * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit16f);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase16(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item16 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item16 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted16(questionTest, answerTest, 'null');
if (output) {
	console.log('Item16 stack unaccepted saved');
} else {
	console.log('Item16 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer16.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforItems16Reddit: ' + limitforItems16Reddit + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 16: ' + e.message);
return 'error stack 16';}
}

async function redditApi17() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems17 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems17 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit17);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase17(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item17 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item17 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted17(questionTest, answerTest, 'null');
if (output) {
	console.log('Item17 stack unaccepted saved');
} else {
	console.log('Item17 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted17(questionTest, answerTest, 'null');
if (output) {
	console.log('Item17 stack unaccepted saved');
} else {
	console.log('Item17 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer17.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems17: ' + limitforItems17 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 17: ' + e.message);
return 'error stack 17';}
}

async function redditApi18() {
let stackCount = 0;
let modelCount = 0;
let hasMore = true;
let after = null;
let payload = {};
let timeRetry = 250;
try {
	var startTime = Date.now();	
while (hasMore && stackCount <= limitforItems18 && modelCount < modelMax && (Date.now() - startTime) < (limitforItems18 * 4000)) {
let responseOkStack = false;
while (!responseOkStack) {
if (after) {
payload = {'limit': 100, 'show': 'all', 'after': after};
} else {
payload = {'limit': 100, 'show': 'all', 'count': 1};
}
try {
let subreddit = await r.getSubreddit(subReddit18);
let hotposts = await subreddit.getHot(payload);
if (hotposts.length) {
if (hotposts.length > 1) {
let maxlimit = hotposts[hotposts.length - 1];
after = maxlimit['name'];
for (var i = 0; i < hotposts.length; i++) {	
let testUrls = [];
let unaccepted = false;
let arrayResponseI = hotposts[i];
if (arrayResponseI) {
let numberComments = arrayResponseI['num_comments'];
let modQuestion = arrayResponseI['distinguished'];
let fullnameQuestion = arrayResponseI['id'];
let questionReplace = all_replace_questions_reddit(arrayResponseI['title']);
let titleraw = arrayResponseI['title'].replace(reglast, ' ');
if (urlRegexTest(titleraw)) {
let pushCheckVar = pushCheck(url_extract(titleraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modQuestion || modQuestion == 'null') {
if (numberComments > 1) {
if (questionReplace.length < lengthQuestion && questionReplace.length > 5) {
if (!unaccepted) {
if (questionReplace.includes('?')) {
await wait(2010);
let arrayResponseComments = await r.getSubmission(fullnameQuestion).fetch();
arrayResponseComments = arrayResponseComments.comments;
console.log('got submission');
for (var k = 0; k < arrayResponseComments.length; k++) {
let arrayResponseCommentsI = arrayResponseComments[k];
if (arrayResponseCommentsI) {
let commentReplace = all_replace(arrayResponseCommentsI['body'].replace(regTagsReddit, ''));
let modComment = arrayResponseCommentsI['distinguished'];
let commentHidden = arrayResponseCommentsI['score_hidden'];
let score = arrayResponseCommentsI['score'];
let bodyraw = arrayResponseCommentsI['body'].replace(reglast, ' ');
if (urlRegexTest(bodyraw)) {
let pushCheckVar = pushCheck(url_extract(bodyraw), testUrls);
if (!pushCheckVar) {
	console.log('pushcheckmethod error');
	}
}
unaccepted = checkAccepted(testUrls);
if (!modComment || modComment == 'null') {
if (!commentHidden) {
if (commentReplace.length < lengthAnswer && commentReplace.length > 1) {
if (score > 0) {
if (!unaccepted) {
let answerTest = commentReplace;
let questionTest = questionReplace;
let output = await saveBase18(questionTest, answerTest, clearUrl(testUrls));
if (output) {
	console.log('Item18 stack accepted saved');
stackCount++;
break;
} else {
	console.log('Item18 stack accepted not saved');
break;
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted18(questionTest, answerTest, 'null');
if (output) {
	console.log('Item18 stack unaccepted saved');
} else {
	console.log('Item18 stack unaccepted not saved');
}
}
} else {
let answerTest = commentReplace;
let questionTest = questionReplace;	
let output = await saveUnaccepted18(questionTest, answerTest, 'null');
if (output) {
	console.log('Item18 stack unaccepted saved');
} else {
	console.log('Item18 stack unaccepted not saved');
}
}
}
}
}
}
}
}
}
}
}
}
} else {
hasMore = false;	
}
}
} else {
hasMore = false;	
}
} else {
hasMore = false;	
}
modelCount = await questionAnswer18.countDocuments({});
console.log('pageScraped');
responseOkStack = true;
} catch(e) {
console.log('connection refused' + e.message);
await wait(timeRetry);
timeRetry += 250;
}
}
}	
let success = 'Finished! hasmore: ' + hasMore + 'stackcount: ' + stackCount + 'limitforitems18: ' + limitforItems18 + 'modelcount: ' + modelCount + 'modelmax: ' + modelMax + 'datenow: ' + Date.now() + 'startime: ' + startTime;
return success;
} catch(e) {
console.log('error stack 18: ' + e.message);
return 'error stack 18';}
}

async function stackApi() {
let timelimit18 = limitforItems18 * 5000;
let timelimit17 = limitforItems17 * 5000;
let timelimit16Reddit = limitforItems16Reddit * 5000;
let timelimit16 = limitforItems16 * 5000;
let timelimit15 = limitforItems15 * 5000;
let timelimit14 = limitforItems14 * 5000;
let timelimit13Stack = limitforItems13Stack * 5000;
let timelimit13Reddit = limitforItems13Reddit * 5000;
let timelimit12 = limitforItems12 * 5000;
let timelimit11Reddit = limitforItems11Reddit * 5000;
let timelimit11 = limitforItems11 * 5000;
let timelimit10 = limitforItems10 * 5000;
let timelimit9 = limitforItems9 * 5000;
let timelimit8Stack = limitforItems8Stack * 5000;
let timelimit8 = limitforItems8 * 5000;
let timelimit7 = limitforItems7 * 5000;
let timelimit6Reddit = limitforItems6Reddit * 5000;
let timelimit6 = limitforItems6 * 5000;
let timelimit5 = limitforItems5 * 5000;
let timelimit4Stack = limitforItems4Stack * 5000;
let timelimit4 = limitforItems4 * 5000;
let timelimit3Stack = limitforItems3Stack * 5000;
let timelimit3 = limitforItems3 * 5000;
let timelimit2Stack = limitforItems2Stack * 5000;
let timelimit2 = limitforItems2 * 5000;
let timelimit1 = limitforItems1 * 5000;
console.log('stackapi starting');
let stackapi1 = await Promise.race([stackApi1(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit1)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi1: ' + stackapi1);

let stackapi2a = await Promise.race([stackApi2a(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit2Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi2a: ' + stackapi2a);

let stackapi2b = await Promise.race([stackApi2b(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit2Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi2b: ' + stackapi2b);

let stackapi3a = await Promise.race([stackApi3a(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit3Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi3a: ' + stackapi3a);

let stackapi3b = await Promise.race([stackApi3b(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit3Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi3b: ' + stackapi3b);

let stackapi4a = await Promise.race([stackApi4a(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit4Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi4a: ' + stackapi4a);

let stackapi4b = await Promise.race([stackApi4b(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit4Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi4b: ' + stackapi4b);

let stackapi5 = await Promise.race([stackApi5(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit5)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi5: ' + stackapi5);

let stackapi6 = await Promise.race([stackApi6(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit6)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi6: ' + stackapi6);

let stackapi7 = await Promise.race([stackApi7(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit7)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi7: ' + stackapi7);

let stackapi8a = await Promise.race([stackApi8a(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit8Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi8a: ' + stackapi8a);

let stackapi8b = await Promise.race([stackApi8b(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit8Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi8b: ' + stackapi8b);

let stackapi9 = await Promise.race([stackApi9(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit9)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi9: ' + stackapi9);

let stackapi11 = await Promise.race([stackApi11(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit11)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi11: ' + stackapi11);

let stackapi13a = await Promise.race([stackApi13a(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit13Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi13a: ' + stackapi13a);

let stackapi13b = await Promise.race([stackApi13b(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit13Stack)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi13b: ' + stackapi13b);

let stackapi14 = await Promise.race([stackApi14(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit14)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi14: ' + stackapi14);

let stackapi15 = await Promise.race([stackApi15(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit15)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi15: ' + stackapi15);

let stackapi17 = await Promise.race([stackApi17(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit17)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi17: ' + stackapi17);

let stackapi18 = await Promise.race([stackApi18(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit18)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('stackapi18: ' + stackapi18);

let reddit1 = await Promise.race([redditApi1(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit1)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit1: ' + reddit1);

let reddit2 = await Promise.race([redditApi2(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit2)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit2: ' + reddit2);

let reddit3 = await Promise.race([redditApi3(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit3)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit3: ' + reddit3);

let reddit4 = await Promise.race([redditApi4(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit4)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit4: ' + reddit4);

let reddit5 = await Promise.race([redditApi5(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit5)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit5: ' + reddit5);

let reddit6a = await Promise.race([redditApi6a(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit6Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit6a: ' + reddit6a);

let reddit6b = await Promise.race([redditApi6b(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit6Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit6b: ' + reddit6b);

let reddit7 = await Promise.race([redditApi7(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit7)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit7: ' + reddit7);

let reddit8 = await Promise.race([redditApi8(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit8)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit8: ' + reddit8);

let reddit9 = await Promise.race([redditApi9(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit9)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit9: ' + reddit9);

let reddit10 = await Promise.race([redditApi10(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit10)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit10: ' + reddit10);

let reddit11a = await Promise.race([redditApi11a(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit11Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit11a: ' + reddit11a);

let reddit11b = await Promise.race([redditApi11b(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit11Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit11b: ' + reddit11b);

let reddit12 = await Promise.race([redditApi12(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit12)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit12: ' + reddit12);

let reddit13a = await Promise.race([redditApi13a(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit13Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit13a: ' + reddit13a);

let reddit13b = await Promise.race([redditApi13b(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit13Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit13b: ' + reddit13b);

let reddit13c = await Promise.race([redditApi13c(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit13Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit13c: ' + reddit13c);

let reddit14 = await Promise.race([redditApi14(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit14)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit14: ' + reddit14);

let reddit15 = await Promise.race([redditApi15(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit15)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit15: ' + reddit15);

let reddit16a = await Promise.race([redditApi16a(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit16Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit16: ' + reddit16a);
let reddit16b = await Promise.race([redditApi16b(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit16Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit16: ' + reddit16b);
let reddit16c = await Promise.race([redditApi16c(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit16Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit16: ' + reddit16c);
let reddit16d = await Promise.race([redditApi16d(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit16Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit16: ' + reddit16d);
let reddit16e = await Promise.race([redditApi16e(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit16Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit16: ' + reddit16e);
let reddit16f = await Promise.race([redditApi16f(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit16Reddit)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit16: ' + reddit16f);

let reddit17 = await Promise.race([redditApi17(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit17)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit17: ' + reddit17);

let reddit18 = await Promise.race([redditApi18(), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, timelimit18)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
console.log('reddit18: ' + reddit18);
console.log('stackapi done');
return 'success';
}

/*Puppeteer queue method*/
async function clusterApi() {    	
	try {
	    await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction1(answerscom1, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction2(answerscom2, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction3(answerscom3, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction4(answerscom4, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction5(answerscom5, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction6(answerscom6, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction7(answerscom7, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction8(answerscom8, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction9(answerscom9, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction10(answerscom10, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11a, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11b, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11c, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11d, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11e, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11f, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11g, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11h, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11i, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11l, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11m, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11n, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11o, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11p, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11q, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11r, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11s, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11t, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11u, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11v, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11z, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11aa, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11bb, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11cc, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11dd, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11ee, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11ff, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11gg, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11hh, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11ii, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11ll, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11mm, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11nn, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11oo, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11pp, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11qq, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11rr, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11ss, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11tt, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction11(answerscom11uu, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction12(answerscom12, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction13(answerscom13a, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction13(answerscom13b, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction14(answerscom14, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});	
await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction15(answerscom15, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});	
await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction16(answerscom16, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});		
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([answersComExtraction18(answerscom18, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction1(fluther1, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction2(fluther2, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction3(fluther3, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction4(fluther4, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction6(fluther6, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction7(fluther7, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction8(fluther8, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction9(fluther9, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction10(fluther10, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction12(fluther12, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction13(fluther13, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction14(fluther14, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction15(fluther15, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction16(fluther16, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
		await queue.add(async () => {
		let browser;
		let phase = false;
		let timeRetry = 1000;
		let block = false;
		while (!phase) {
	    try {
        console.log('starting cluster');    
        console.log('cluster queuing');		
	    browser = await puppeteer.launch(optionPPT);
		phase = true;
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		await wait(timeRetry);
		timeRetry += 1000;
		if (timeRetry < 50000) {
		try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		try {
		browser = await puppeteer.launch(optionPPT);
        phase = true;
		} catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
		phase = true;
        block = true; 		
			}
		}		
}
if (!block) {
let result = await Promise.race([flutherExtraction17(fluther17, browser), new Promise((resolve, reject) => {
    let id = setTimeout(() => {
      clearTimeout(id);
      reject(false)
    }, 60000000)
  })]).catch( async (err) => {console.log('extraction timeout exceeded');});
if (result) {
		console.log('task successfull');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
		} else {
        console.log('task error');
try {
	    await browser.close();
	    } catch(e) {
		console.log('browser starting error:' + e.message);
		}
        }
		}
		});
	} catch(e) {
	console.log('queue adding error:' + e.message);
    queue.clear();
	return 'error queue: ' + e.message;
	}
	try {
    await queue.onIdle();
    console.log('cluster done');
	} catch(e) {
    queue.clear();		
	console.log('queue closing error:' + e.message);
	}
	return 'success';   
}

/*All scraper method*/
async function callmodelHook() {
	console.log('starting modelhook');
	requestprocessing = true;
	let outputStack = await stackApi();
	let outputCluster = await clusterApi();	
let outputClear = await clearWrite();
let stringOutput = 'modelhook done, outputstack: ' + outputStack + ' , outputcluster: ' outputCluster + ' , outputclear: ' + outputClear;
console.log(stringOutput);
return stringOutput;
}

/*GET response*/
app.use(bodyParser.urlencoded({extended: false}));
app.use(bodyParser.json());
app.listen(PORT, HOST);
console.log('Running on http://' + HOST + ':' + PORT);
app.get('/', async function (req, res) {
if (!requestprocessing) {
console.log('Extracting Proxy list');
myF = new JFile("./data/Iplist.txt");
myF2 = new JFile("./data/Portlist.txt");
proxyArray = await myF.lines;
portArray = await myF2.lines;
console.log('Proxy list extracted');
sessionID = 0;
console.log('getting request');	
let outputGet = await callmodelHook();
console.log('request done');
res.send(JSON.stringify({ 'result': outputGet }));
}	
});

/*POST response*/
app.post('/', async function (req, res) {
let responseBase = req.body.base;
let accepted = req.body.accepted;
let question = req.body.question;
let answer = req.body.answer;
let links = req.body.links;	
console.log('posting request');
let outputPost = await postSave(responseBase, accepted, question, answer, links);
console.log('posting request done');
res.send(JSON.stringify({ 'saveprocess': outputPost }));
let modelCount1sum = await questionAnswer1.countDocuments({});
	let modelCount2sum = await questionAnswer2.countDocuments({});
	let modelCount3sum = await questionAnswer3.countDocuments({});
	let modelCount4sum = await questionAnswer4.countDocuments({});
	let modelCount5sum = await questionAnswer5.countDocuments({});
	let modelCount6sum = await questionAnswer6.countDocuments({});
	let modelCount7sum = await questionAnswer7.countDocuments({});
	let modelCount8sum = await questionAnswer8.countDocuments({});
	let modelCount9sum = await questionAnswer9.countDocuments({});
	let modelCount10sum = await questionAnswer10.countDocuments({});
	let modelCount11sum = await questionAnswer11.countDocuments({});
	let modelCount12sum = await questionAnswer12.countDocuments({});
	let modelCount13sum = await questionAnswer13.countDocuments({});
	let modelCount14sum = await questionAnswer14.countDocuments({});
	let modelCount15sum = await questionAnswer15.countDocuments({});
	let modelCount16sum = await questionAnswer16.countDocuments({});
	let modelCount17sum = await questionAnswer17.countDocuments({});
	let modelCount18sum = await questionAnswer18.countDocuments({});
	let summodels = modelCount1sum + modelCount2sum + modelCount3sum + modelCount4sum + modelCount5sum + modelCount6sum + modelCount7sum + modelCount8sum + modelCount9sum + modelCount10sum + modelCount11sum + modelCount12sum + modelCount13sum + modelCount14sum + modelCount15sum + modelCount16sum + modelCount17sum + modelCount18sum;
if (summodels > 60000) {
if (!requestprocessing) {
console.log('Extracting Proxy list');
myF = new JFile("./data/Iplist.txt");
myF2 = new JFile("./data/Portlist.txt");
proxyArray = await myF.lines;
portArray = await myF2.lines;
console.log('Proxy list extracted');
sessionID = 0;
console.log('getting request');	
let outputGet = await callmodelHook();
console.log('request done, output: ' + outputGet);
}	
}	
});